# ЗАДАЧКИ:
# В этой программе если a>b,
# то меняем значения переменных местами. Переменная temp - вспомогательная.
# a = int(input("Введите первое число: "))
# b = int(input("Введите второе число: "))
# if a > b:
#     temp = a
#     a = b
#     b = temp
# print(a)
# print(b)


# Задача:
# Просим пользователя указать свой возраст, до 18 лет доступ на сайт запрещен, после 18 - разрешен
# age = int(input("Введите свой возраст: "))
# if age >= 18:
#     print("Вход на сайт разрешен")
# else:
#     print("Вход на сайт запрещен")

# Задача:
# if elif else
# a = 50
# b = 50
# if a > b:
#     print("a > b")
# elif b > a:
#     print("b > a")
# else:
#     print("a = b")

# Вложенный условный оператор. Сложные условия.
# A = int(input("Укажите, сколько у вас денег: "))
# if A > 10:
#     if A > 100:
#         print("У вас очень много денег.")
#     else:
#         print("У вас достаточно денег.")
# else:
#     print("У вас маловато денег.")


# A = int(input("Укажите, сколько у вас денег: "))
# if A < 10:
#     print("У вас маловато денег.")
# elif A > 100:
#     print("У вас очень много денег.")
# else:
#     print("У вас достаточно денег.")


# СЛОЖНОЕ УСЛОВИЕ - состоит из двух или нескольких простых отношений (условий), которые объединяются
# с помощью логических операций:
#   И - логическое умножение - на языке Python записывается как and,
#   ИЛИ - логическое сложение - на языке Python записывается как or,
#   НЕ - логическое отрицание - на языке Python записывается как not.


# end — это встроенная функция в языке программирования Python. Она используется для определения символа,
# который будет добавлен в конце вывода строки. Она позволяет настроить разделитель между элементами при выводе
# на экран, подавлять перенос строки и добавлять свои символы.


# Исключения в Python – это события, возникающие во время выполнения программы, которые могут
# привести к ошибкам или аномальному завершению программы.


# MATCH
# Новая тема - в питоне нет switch, но есть конструкция match:
# Оператор хороший, но не будем использовать, тк пока работает медленно
# password = ""
# match password:
#     case "admin":
#         print("Администратор")
#     case "user":
#         print("Пользователь")
#     case _:
#         print("Пароль неверен")


# Тернарные операторы
# Шаблон:
# condition_if_true if condition else condition_if_false
# Пример:
# is_nice = True
# state = "nice" if is_nice else "not nice"
# a, b = 10, 20  # объявлено 2 переменные
# minim = a if a < b else b  # здесь соблюдено 1 условие true, поэтому выводится a (10)
# print(minim)
#
# a, b = 50, 20
# min = a if a < b else b  # здесь соблюдено 2 условие false, поэтому выводится b (20)
# print(min)


# ИСКЛЮЧЕНИЯ ***
# Обработка исключений
# a = int(input("Введите первое число: "))
# b = int(input("Введите второе число: "))
# c = a / b
# print(c)  # ZeroDivisionError: division by zero

# Чтобы обойти это исключение, мы воспользуемся конструкцией try..except, то есть мы вначале
# запишем try: далее записываем наше условие и ниже слово except с видом ошибки:
# a = int(input("Введите первое число: "))
# b = int(input("Введите второе число: "))
# try:
#     c = a / b
# except ZeroDivisionError:
#     print("так нельзя")


# -------------------------------------------------------------------------------
# НОВАЯ ТЕМА:
# *** ЦИКЛ *** ЦИКЛ *** ЦИКЛ ***
# Цикл for - Когда количество итераций известно
# for [элемент] in [последовательность]:
# [тело цикла]

# collection = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# n = 10
# for i in collection:
#     l = n * i
#     print(l)
# else:
#     print('Хватит умножать')

# Внутри цикла for нельзя изменять итерируемый объект (переменная i) — это может привести к ошибкам.

# Цикл while - Когда количество итераций неизвестно
# Цикл while с условием в Python используется, когда точное число повторений неизвестно
# и может изменяться в зависимости от поведения переменной в теле цикла.
# n = 1
# while n < 6:
#     print('Цикл выполнился', n, 'раз(а)')
#     n = n + 1

# Бесконечные циклы
# n = 1
# while n < 6:
#     print('Цикл выполнился', n, 'раз(а)')

# Вложенные циклы

# Примеры циклов в Python
# Первый пример:

# for i in range(10, 5, -2):
#     print(i)
# Здесь используется вызов метода range с тремя параметрами. Третий параметр задаёт шаг итерации,
# то есть определяет, сколько элементов будет пропущено при перемещении от начала до конца
# диапазона. По умолчанию шаг равен 1 и его можно не указывать. В примере указано значение −2,
# то есть каждое повторение цикла будет смещать начальную позицию на 2 элемента назад.
# В итоге после выполнения программы в терминале будет последовательность «10, 8, 6».

# Второй пример:
# word_str = "Hello, world!"
# for n in word_str:
#     print(n)
# В цикле не обязательно работать с числами — можно использовать строку. Цикл пройдёт
# по всем элементам строки по очереди и выведет её по буквам в столбик, так как функция print
# выводит каждое значение с новой строки.

# Третий пример:
# n = 6
# while n > 0:
#     n -= 1
#     print(n)
# Этот классический цикл while будет выводить значение n, пока оно не достигнет нуля.
# Правда, цикл идет не от меньшего к большему, а наоборот, и используется оператор
# вычитания −=. Он равнозначен выражению n = n − 1. В итоге цикл выведет
# Последовательность «6, 5, 4, 3, 2, 1».

# iter = 6
# while iter > 0:
#     iter -= 1
#     if iter == 3:
#         continue
#     print(iter)
# print('Конец цикла')
# В цикле используется оператор continue. Без него цикл просто выведет последовательность
# чисел от 6 до 0. Наличие continue изменят поведение: когда переменная iter становится равна 3,
# цикл пропускает операцию вывода и переходит к началу. В итоге будет выведена
# последовательность «6, 5, 4, 2, 1, 0».


# -------------------------------------------------------------------------------
# 09.01.2024
# ОБОЖАЮ
# (Python) Циклы. Цикл со счетчиком - for
# Цикл - это алгоритмическая конструкция, в которой некоторая последовательность
# команд повторяется несколько раз.

# Цикл с переменной, или с известным числом шагов (цикл for)
# Надо запомнить!
# Общая форма записи оператора цикла for выглядит следующим образом:
# for <переменная-счетчик> in <значения переменной-счетчика>:
# тело цикла

# 1. Имя переменной-счетчика может быть любым (чаще используют букву i)
# 2. Тело цикла записывается со сдвигом вправо, относительно строки с заголовком цикла (for).
# По стандарту PEP8 сдвиг осуществляется на 4 пробела.

# Пример 1
# for i in range(10):  # для переменной i, изменяемой в диапазоне (in range)
#     # от 0 до 10 (10 не включается)
#     print("Hello")  # печатать Hello

# for i in range(10):
#     print("Hello")

# Переменная i - это счетчик выполненных итераций (шагов) цикла. В данном случае цикл
# выполняется для i = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. То есть ровно 10 раз.
# Эту же программу можно записать по-другому.

# Пример 2
# for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
#     print("Hello")

# Особенности работы цикла for
# Общий вид записи функции следующий:
# range([start], stop[, step])
# start: число начала последовательности.
# stop: генерирует числа до данного числа, но не включая его!
# step (ШАГ): разница между каждым числом из последовательности (шаг)

# Надо запомнить!
# Все параметры должны быть целыми числами:
# Каждый из параметров может быть, как положительным, так и отрицательным.
# range() (и Python в целом) основана на индексе 0. Это означает, что список индексов начинается с
# 0, а не с 1.  Последнее целое число, сгенерированное функцией range() зависит от stop,
# но не будет включать его. Например, range(0, 5) генерирует целые числа 0, 1, 2, 3, 4, не включая 5.

# Пример 1
# for i in range(10, 0, -1):
#     print(i*i)
# Программа выводит квадраты натуральных чисел от 10 до 1 в порядке убывания
# 10: первое число последовательности.
# 0: конечное число последовательности (не включая это число).
# -1: шаг

# Пример 2
# for i in range(0, 101, 5):
#     print(i)
# Программа выводит все числа от 0 до 100 с шагом 5
# 0: первое число последовательности.
# 101: конечное число последовательности (не включая это число).
# 5: шаг

# Повторить N-раз
# Все программы с циклом for, которые мы до этого писали, нельзя назвать универсальными.
# Потому что мы сами задавали число повторений тела цикла.
# А что делать, если количество повторений будет зависеть от какого-либо другого значения?
# Например, пользователь сам хочет задать количество повторений цикла.

# Например, нам нужно вывести квадраты чисел от 1 до N, где значение переменной N вводится
# с клавиатуры пользователем.
# Программа будет выглядеть следующим образом:
# n = int(input("Введите количество квадратов чисел, кот вы хотите видеть: "))  # ввод N с клавиатуры
# for i in range(1, n + 1):
#     print("square", i, "=", i * i)
# цикл: для всех i от 1 до n - переменная i
# будет последовательно принимать значения от 1 до N
# вывод квадрата числа

# (Python) Оператор цикла с условием - WHILE
# while <условие>:
#   тело цикла
# Молчаливый счет".
# print("Start")
# i = 1
# while i <= 10:
#     print(i, end=" ")  # перевод курсора на новую строку
#     i += 1
# print()
# print("Finish")


# -------------------------------------------------------------------------------
# 11.01.2024
# Новая тема ***
# СПИСОК СПИСОК СПИСОК СПИСОК СПИСОК

# a = [1, 2, 3]
# print(a[1])  # 2

# СРЕЗЫ *** СРЕЗЫ ***
# a = [1, 2, 3, 4]
# print(a[0:2])  # Получим [1, 2] (по умолчанию, шаг - 1)
# Двоеточие позволяет получить срез списка. Полная форма оператора выглядит так:
# начальный_индекс:конечный_индекс:шаг.

# Здесь мы указываем, с какого индекса начинается «срез», на каком заканчивается и с каким шагом
# берутся элементы — по умолчанию 1. Единственный нюанс с конечным индексом: хоть мы и можем подумать,
# что закончим именно на нём, на самом деле Python остановится на элементе с индексом конечный_индекс — 1.
# Почему создатели языка решили так сделать? Кто их знает.

# a = [1, 2, 3, 4, 5]
# # print(a[1:6:2])  # Получим [2, 4]
# print(a)

# Изменение элементов
# Списки — это динамическая структура данных. А значит, мы можем менять их уже после создания.
# Например, можно заменить один элемент на другой:
# a = [1, 2, 3]
# a[1] = 4
# print(a)

# Перебор элементов
# FOR и WHILE
# Мы можем перебирать элементы списка с помощью циклов for и while.
# Так выглядит перебор через for:
# animals = ['cat', 'dog', 'bat']
# for i in animals:
#     # print(i)
#     print(i[0])
# Здесь мы перебираем каждый элемент списка и выводим их с помощью функции print().

# А вот так выглядит перебор через цикл while:
# animals = ['cat', 'dog', 'bat']
# i = 0
# while i < len(animals):
#     print(animals[i])
#     i += 1
# Этот перебор чуть сложнее, потому что мы используем дополнительную переменную i,
# чтобы обращаться к элементам списка. Также мы использовали встроенную функцию len(),
# чтобы узнать размер нашего списка. А ещё в условии цикла while мы указали знак «меньше» (<),
# потому что индексация элементов идёт до значения количество элементов списка — 1.
# Как и в прошлом примере, все элементы по очереди выводятся с помощью функции print().


# Встроенные функции для списков Python
# len()
# Возвращает длину списка:
# a = [5, 3, 1]
# print(len(a))  # 3

# sorted()
# Возвращает отсортированный список:
# a = [8, 1, 3, 2]
# print(sorted(a))  # [1, 2, 3, 8] Список отсортирован по порядку

# min() и max()
# Возвращают наименьший и наибольший элемент списка:
# a = [1, 9, -2, 3]
# print(min(a))  # -2
# print(max(a))  # 9


# Методы списков Python
# Чтобы проще управлять элементами списка, в стандартной библиотеке Python есть
# набор популярных методов для списков. Разберём основные из них.

# append()
# Добавляет новый элемент в конец списка:
# a = [1, 2, 3]
# a.append(4)
# print(a)
# a.append(-9)
# print(a)
# a.append(10.8)  # [1, 2, 3, 4, -9, 10.8]
# print(a)
# a.append("cat")  # [1, 2, 3, 4, -9, 10.8, 'cat']
# print(a)

# extend()
# Добавляет набор элементов в конец списка:
# a = [1, 2, 3]
# a.extend([4, 5])  # [1, 2, 3, 4, 5]
# print(a)
# a.extend([-8, -69, 5.82])  # [1, 2, 3, 4, 5, -8, -69, 5.82]
# print(a)

# Вот так метод extend() добавит строку:
# a = ['cat', 'dog', 'bat']
# a.extend('mouse')  # ['cat', 'dog', 'bat', 'm', 'o', 'u', 's', 'e']  Посимвольно
# print(a)

# insert()
# Добавляет новый элемент по индексу:
# Сначала мы передаём индекс, по которому хотим вставить новый элемент, а затем сам элемент.
# a = [1, 2, 3]
# a.insert(0, 4)  # [4, 1, 2, 3]
# print(a)

# remove()
# Удаляет элемент из списка:
# a = [1, 2, 3, 1]
# a.remove(1)  # [2, 3, 1]
# print(a)
# Метод удаляет только первое вхождение элемента. Остальные остаются нетронутыми.

# clear()
# Удаляет все элементы из списка и делает его пустым:
# a = [1, 2, 3]
# a.clear()  # []
# print(a)

# index()
# Возвращает индекс элемента списка в Python:
# a = [1, 2, 3]
# print(a.index(2))  # 1 это индекс чифры 2 из списка

# pop()
# Удаляет элемент по индексу и возвращает его как результат:
# a = [1, 2, 3]
# print(a.pop())  # 3
# print(a)  # [1, 2]
# Мы не передали индекс в метод, поэтому он удалил последний элемент списка.
# Если передать индекс, то получится так:
# a = [1, 2, 3]
# print(a.pop(1))  # 2
# print(a)  # [1, 3]

# count()
# Считает, сколько раз элемент повторяется в списке:
# a = [1, 1, 1, 2]
# print(a.count(1))  # 3

# sort()
# Сортирует список:
# a = [4, 1, 5, 2]
# a.sort()  # [1, 2, 4, 5]
# print(a)

# reverse()
# Переставляет элементы в обратном порядке:
# a = [1, 3, 2, 4]
# a.reverse()  # [4, 2, 3, 1]
# print(a)

# copy()
# Копирует список:
# a = [1, 2, 3]
# b = a.copy()
# print(b)  # [1, 2, 3]


# Описание функции range с примерами для Python 3
# Параметры range: star, stop, шаг
# Функция range() принимает три параметра, например:
# range(stop)
# stop: количество целых чисел для генерации, начиная с нуля. Например, range(3) == [0, 1, 2].
# range([start], stop[, step])

# Примеры функции range()
# 1. Если 1 цифра, это значит stop:
# for i in range(5):
#     print(i)  # 0 1 2 3 4 - 5 чисел начиная с 0

# 2. Если 2 цифры, это значит start и stop:
# for i in range(3, 6):
#     print(i)  # 3 4 5 - числа с 3 до 6 (не включая его)

# 3. Если 3 цифры, это значит start и stop и step:
# for i in range(4, 10, 2):
#     print(i)  # 4 6 8 - числа с 4 до 10 (не включая его) с шагом 2

# 4. Цифры с минусом
# for i in range(0, -10, -2):
#     print(i)  # числа с 0 до -10 (не включая его) с шагом -2
# # 0 -2 -4 -6 -8


# Цикл с for
# my_list = ['один', 'два', 'три', 'четыре', 'пять']
# my_list_len = len(my_list)
# for i in range(0, my_list_len):
#     print(my_list[i])
# В качестве параметра stop мы передали длину списка (5).


# my_list = ['один', 'два', 'три', 'четыре', 'пять']
# my_list_len = len(my_list)
# for i in range(0, my_list_len):
#     # print(my_list)
# # Без [i] - прокручивает список в цикле 5 раз подряд
# # ['один', 'два', 'три', 'четыре', 'пять']
# # ['один', 'два', 'три', 'четыре', 'пять']
# # ['один', 'два', 'три', 'четыре', 'пять']
# # ['один', 'два', 'три', 'четыре', 'пять']
# # ['один', 'два', 'три', 'четыре', 'пять']
#     print(my_list[i])
# один
# два
# три
# четыре
# пять
# Через индекс [i] - выводит все значения списка по порядку


# for i in range(10):
#     print("Hello")  # печатать Hello
# Без [i] - выводит слово (просто список) Hello 10 раз
# С [i] - выводит значения списка или слова, в данном случае слово Hello по буквам
# H
# e
# l
# l
# o

# Эту же программу можно записать по-другому.
# Пример 2
# for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
#     print("Hello")

# Особенности работы цикла for
# Общий вид записи функции следующий:
# range([start], stop[, step])
# start: число начала последовательности.
# stop: генерирует числа до данного числа, но не включая его.
# step: разница между каждым числом из последовательности (шаг)

# N = int(input())    # ввод N с клавиатуры
# for i in range(1, N+1):
#     print("square", i, "=", i*i)  # вывод квадрата числа
# 5
# square 1 = 1
# square 2 = 4
# square 3 = 9
# square 4 = 16
# square 5 = 25


# ОДИНАКОВЫЕ ОПЕРАЦИИ
# МОЖНО И ТАК И ТАК:
# for i in range(9): # 9 - не включается
#     print(i, end=" ")
# # 0 1 2 3 4 5 6 7 8
# print()
#
# i = 0
# while i < 9:
#     print(i, end=" ")
#     i += 1
# 0 1 2 3 4 5 6 7 8


# -------------------------------------------------------------------------
# ИНТЕРЕСНЫЕ РАБОТЫ !!!!
# СРЕЗЫ *** СРЕЗЫ *** СРЕЗЫ
# Срезы позволяют обрезать список, взяв лишь те элементы, которые нужны. Они работают по следующей схеме:
# list[НАЧАЛО:КОНЕЦ:ШАГ]. Начало - с какого элемента стоит начать (по умолчанию равно 0);
# Конец - по какой элемент мы берем элементы (по умолчанию равно длине списка)


# Задача:
# ЭТО ВСЕ АНАЛОГИ В РЕШЕНИИ:
# № 1.
# a = [int(input("-> ")) for i in range(int(input("n = ")))]
# print(a)

# № 2.
# s = []
# n = int(input("Введите количество элементов списка: "))
# for num in range(n):
#     x = int(input("Введите число: "))
#     s.append(x)  # добавление начинается с конца
#     # s.insert(0, x) # вводит наоборот
# print(s)


# Задача:
# У нас есть элементы, которые пересекаются и в 1 и во 2 списке. И мы хотим найти область пересечения
# значений, то есть нам нужны элементы, которые присутствуют и там и там.
# a = [5, 9, 2, 1, 4, 3]
# b = [4, 2, 1, 3, 7]
# c = []  # [2, 1, 4, 3]
# for i in a: # 5, 9, 2, 1, 4, 3
#     for j in b: # 4, 2, 1, 3, 7
#         if i == j:
#             c.append(i)
# print(c)


# АХРЕНЕТЬ !!! ВОТ РЕШЕНИЕ !!
# Простое и без вложенных списков
# a = [5, 9, 2, 1, 4, 3]
# b = [4, 2, 1, 3, 7]
# c = []  # [2, 1, 4, 3]
# for element in a:
#     if element not in c and element in b:
#         c.append(element)
# print(c)


# УДАЛИИИИИИИИИЛ !!!  # Но удалил только первый попавшийся !!
# a = [1, 3, 2, 3, 4, 3, 5, 7]
# print(a)
# if 7 in a:
#     a.remove(7)
# print(a)
# [1, 3, 2, 3, 4, 3, 5, 7]
# [1, 3, 2, 3, 4, 3, 5]


# ДЗ №6 от 15.01.2024 - *** Я УМНИЧКА ***
# Дан список целых чисел, число k (индекс) и значение С. Необходимо вставить в список на позицию
# с индексом k элемент, равный С, сдвинув все элементы, имевшие индекс не менее k, вправо.
# sp = [int(input("-> ")) for i in range(int(input("Введите количество чисел списка: ")))]
# print(sp)
# a = int(input("Введите индекс: "))
# print(a)
# b = int(input("Введите значение: "))
# print(b)
# sp.insert(a, b)
# print(sp)
# Введите количество чисел списка: 5
# -> 5
# -> 9
# -> 6
# -> -1
# -> 8
# [5, 9, 6, -1, 8]
# Введите индекс: 2
# 2
# Введите значение: 56
# 56
# [5, 9, 56, 6, -1, 8]


# Задача:
# Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с индексом k,
# сдвинув влево все элементы, стоящие правее элемента с индексом k.
# Введите количество чисел списка: 5
# -> 9
# -> 8
# -> 7
# -> 6
# -> 5
# Введите индекс: 1
# 8
# [9, 7, 6, 5]
# sp = [int(input("-> ")) for i in range(int(input("Введите количество чисел списка: ")))]
# x = int(input("Введите индекс: "))
# print(sp.pop(x))
# print(sp)


# -------------------------------------------------------------------------
# ИНТЕРЕСНЫЕ РАБОТЫ !!!!
import random  # CTRL + левая кнопка мыши
# print(random.random())  # от 0 до 1 (не включая) - 0.517323349343888

# Теперь хотим получить целочисленное значение (случайных чисел)
# print(random.randint(0, 9))  # от 0 до 9 (включительно)


# ГЕНЕРАТОР СПИСКА
s = [i for i in range(5)]
print(s)  # [0, 1, 2, 3, 4] - # Заполняем i-ками в range (диапазоне) до 5 не включая 5

# ЗАПОЛНЯЕМ НУЛЯМИ СПИСОК
mas = [0 for i in range(10)]
print(mas)  # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
mas = [input("->") for i in range(10)]
print(mas)


# СПИСОК ЗАПОЛНИЛСЯ СЛУЧАЙНЫМИ ЗНАЧЕНИЯМИ ***
mas = [random.randint(0, 100) for i in range(10)]
print(mas)

# ИНПУТАМИ input заполняем (в каком диапазоне, да который input введет)
sp = [int(input("-> ")) for i in range(int(input("Введите количество чисел списка: ")))]
x = int(input("Введите индекс: "))


# Получаем сумму чисел списка:
# mas = [random.randint(0, 100) for i in range(10)]
# print(sum(mas))
# s = 0
# for i in mas:
#     s += i  # s = s + i  # s = 0 + "a"
# print(s)


# Задача:
# Заполнить список из 10 элементов случайных чисел. Найти максимальный элемент списка
# и переместить его в начало списка.
# mas = [random.randint(0, 100) for i in range(10)]
# print(mas)
# print(max(mas))
# mas.insert(0, max(mas))
# print(mas)


# Задача:
# Заполнить список из 10 элементов случайными числами как положительными, так и отрицательными.
# Изменить этот список таким образом, чтобы все отрицательные элементы оказались в конце.
# Обычная сортировка.
# mas = [random.randint(-20, 20) for i in range(10)]
# print(mas)
# mas.sort(reverse=True)  # [19, 15, 15, 12, 10, -8, -8, -12, -16, -18] от большего к меньшему
# print(mas)


# Задача:
# Заполнить список из 10 элементов случайными числами. Удалить все элементы, расположенные перед
# минимальным элементом списка.
# mas = [random.randint(0, 100) for i in range(10)]
# print(mas)
# print(min(mas))
# index = mas.index(min(mas))
# print(index)
# print(mas[index:])  # какие нужно оставить


# Таблица из нулей:
# w, h = 5, 3
# matrix = [[0 for x in range(w)] for y in range(h)]
# print(matrix)
# for row in matrix:
#     # print(row)
#     for x in row:
#         print(x, end="\t")
#     print()


# Задача:
# Написать функцию нахождения разности, если a > b, или сумму, если a < b
# a и b - вводятся с клавиатуры
# Вначале задаем формулу в функции
def foo(a, b):
    if a > b:
        return a - b
    else:
        return a + b


c = foo(int(input()), int(input()))
print(c)
# или
c = foo(int(input("Введите первое число: ")), int(input("Введите второе число: ")))
print(c)


# -------------------------------------------------------------------------
# ИНТЕРЕСНЫЕ РАБОТЫ !!!!
# КОРТЕЖ *** КОРТЕЖ *** КОРТЕЖ ***
# ГЕНЕРАТОР СПИСКА
# Как мы до этого создавали список
s = [i for i in range(5)]
print(s)  # [0, 1, 2, 3, 4]

s = (i for i in range(5))  # Если просто поменять квадратные скобки на круглые, то так не сработает
print(s)  # <generator object <genexpr> at 0x000001A54FB44B80>

s = tuple([i for i in range(5)])  # Но здесь мы поместили [] в круглые и написали слово tuple
print(s)  # (0, 1, 2, 3, 4) - И получили кортеж

s = tuple(input("-> ") for i in range(5))
print(s)

from random import randint
s = tuple(randint(20, 40) for i in range(5))
print(s)  # (26, 22, 31, 23, 37)

# ------------------------------------------------------------------
# ДОМАШКА:
# Введите статистику частотности символов в кортеже

a = tuple("253523651")
print(a)
for i in a:
    print("Количество ", i, "=", a.count(i))


# a = 2, 5, 3, 5, 2, 3, 6, 5, 1
# print(a)
# for i in a:
#     print("Количество ", i, "=", a.count(i))


# a = tuple("253523651")
# print(a)
# for i in set(a):
#     print("Количество ", i, "=", a.count(i))

# ------------------------------------------------------------------



