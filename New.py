# -------------------------------------------------------------------
# Темка:
# __getstate__
# __setstate__
# что означают эти методы в питон

# Метод __getstate__ является частью протокола сериализации в Python и используется при сериализации
# объектов с помощью модуля pickle. Когда объект сериализуется с помощью pickle.dump() или pickle.dumps(),
# метод __getstate__ вызывается у объекта для определения (состояния), которое должно быть сохранено.

# Обычно метод __getstate__ определяет, какие атрибуты объекта должны быть сериализованы. Он должен
# возвращать словарь, содержащий состояние объекта, которое нужно сохранить. Этот словарь будет передан
# в метод __setstate__ при десериализации объекта.

# Пример использования метода __getstate__:

# import pickle
#
#
# class MyClass:
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#     def __getstate__(self):
#         # Сохраняем только атрибут x
#         return {'x': self.x}
#
#     def __setstate__(self, state):
#         # Восстанавливаем состояние объекта (x) из переданного словаря
#         self.x = state['x']
#
#
# obj = MyClass(10, 20)
# sob = pickle.dumps(obj)
# print(sob)

# Результат:
# b'\x80\x04\x95%\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x07MyClass\x94\x93\x94)\x81\x94}\x94\x8c\x01x\
# x94K\nsb.'

# В этом примере метод __getstate__ определяет, что должен быть сохранен только атрибут (x) объекта MyClass,
# поэтому при сериализации будет сохранен только атрибут (x), а атрибут (y) будет проигнорирован.

# -------------------------------------------------------------------

# Что такое метод dump в Питон * * *

# Метод dump() в Python обычно используется для записи сериализованных данных в файл. Этот метод доступен в
# различных модулях Python, таких, как pickle, json, yaml и других.

# Например, в модуле pickle метод dump() используется для записи сериализованных объектов Python в файл:

# import pickle
#
# data = {'name': 'Alice', 'age': 30}
#
# # Открываем файл для записи бинарных данных
# with open('data.pkl', 'wb') as f:
#     pickle.dump(data, f)


# В этом примере объект data сериализуется с помощью pickle.dump() и сохраняется в файл data.pkl в бинарном формате.

# Аналогично, в модуле json метод dump() используется для записи сериализованных данных в файл в формате JSON:

# import json
#
# data = {'name': 'Bob', 'age': 25}
#
# # Открываем файл для записи данных в формате JSON
# with open('data.json', 'w') as f:
#     json.dump(data, f)


# Здесь объект data сериализуется с помощью json.dump() и сохраняется в файл data.json в формате JSON.

# Таким образом, метод dump() в Python обеспечивает запись сериализованных данных в файл, что позволяет
# сохранить данные для последующего использования.


import json


class CountryCapital:  # создадим класс, где мы все эти методы будет реализовывать
    # @staticmethod
    # def load(file_name):
    #     # data = None
    #     try:
    #         data = json.load(open(file_name))
    #     except FileNotFoundError:
    #         data = {}
    #     finally:
    #         return data

    @staticmethod  # Нам здесь проще и удобнее использовать статические методы, чтобы не создавать экземпляры
    # класса. Мы можем просто обращаться к имени класса (CountryCapital.) и вызывать нужный нам метод
    def add_country(file_name):
        new_country = input("Введите название страны: ").lower()  # приводит к нижнему регистру
        new_capital = input("Введите название столицы: ").lower()

        data = CountryCapital.load(file_name)  # load - это метод или функция, используемая для загрузки
        # данных о странах и их столицах из файла с указанным именем (file_name)
        # Она выполняет чтение данных из файла и создание объекта (или объектов), представляющих эту информацию,
        # которые затем могут быть использованы в программе.

        data[new_country] = new_capital  # у нас есть словарь data{}, но нам нужно записать туда new_country -
        # ключом, а new_capital - значением

        with open(file_name, 'w') as f:  # 'w' - режим записи, создаем файл
            json.dump(data, f, indent=2)  # dump - это функция из модуля json, которая используется для записи
            # данных в файл в формате JSON.


# import requests
# ChatGPT
# requests - это модуль в Python, который предоставляет простой и удобный способ взаимодействия с веб-ресурсами.
# Он позволяет отправлять HTTP-запросы (например, GET, POST, PUT, DELETE и т.д.) и получать ответы от серверов.
# После того как вы импортируете модуль requests с помощью команды import requests, вы можете использовать его
# функциональность для выполнения различных HTTP-запросов. Например:

import requests

# Отправка GET-запроса
response = requests.get('https://api.example.com/data')

# Отправка POST-запроса с данными
payload = {'key1': 'value1', 'key2': 'value2'}
response = requests.post('https://api.example.com/submit', data=payload)

# Проверка успешности запроса и вывод ответа
if response.status_code == 200:
    print(response.text)
else:
    print('Ошибка:', response.status_code)
# В этом примере мы импортируем модуль requests и используем его для отправки GET- и POST-запросов на различные
# URL-адреса. Результаты запросов сохраняются в переменной response, и мы можем анализировать их,
# проверяя статус-коды и получая текст ответов.
