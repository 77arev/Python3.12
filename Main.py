# ----------------------------------------------------------------
# Урок №1 Python от 18.12.2023
# Урок №1
# ----------------------------
import json
import sys
import time
from random import randint

# firstName = "admin"
# # print(name)
# # строчный комментарий
# print("Hello", firstName)  # Hello admin
# print("Hello " + firstName)  # Hello admin
# age = 20.2
# print(age)
# print(type(firstName))  # <class 'str'>
# print(type(age))  # <class 'float'>


# ----------------------------------------------------------------
# Урок №2
# ----------------------------
# АДРЕС ЯЧЕЕК ДЛЯ ХРАНЕНИЯ
# a = 4
# b = 5
# print(a, id(a))
# print(b, id(b))
# a = b
# print(a, id(a))
# print(b, id(b))

# a = 5; b = 3
# print(a); print(b)
# Множественное присваивание
# a = b = c = d = 5
# print(a, b, c, d)
# a = b = c = 7, "Hello", 9.2
# print(a, b, c)


# КОНСТАНТА
# Константные значения пишутся в верхнем регистре
# PI = 3.14
# print(PI)
# PI = 2  # это нарушение соглашения
# print(PI)
# # В верхнем регистре константы не менять
# a = 5
# b = "7"
# print(a + int(b))
# print(str(a) + b)


# Задача от 18.12.2023 и дома продолжение ДЗ:
# Обмен значениями переменных через создание буферной переменной (промежуточной)
# Первый способ:
# a = 19
# b = 205
# print("a:", a)
# print("b:", b)
# c = a  # 19
# a = b  # 205
# b = c  # 19
# print("a:", a)  # 205
# print("b:", b)  # 19

# Обмен значениями переменных через Множественное присваивание в языке Питон
# Второй способ:
# a = 19
# b = 205
# print("a:", a)
# print("b:", b)
# a, b = b, a   # Множественное присваивание в питоне
# print("a:", a)  # 205
# print("b:", b)  # 19


# print("\t строка\n"
#       "символов")
# print(
#     'строка символов строка символов строка символов строка символов\n'
#     'строка символов строка символов'
#     'строка символов ')
# print("\"program\"\n\rC:\\folder\\file.txt")  # обратный слэш
# \r затирает все, что было до него


# s1 = "Hello"
# s2 = "Python"
# s3 = s1 + " " + s2 + "___"  # пробел ставим с помощью конкатенации
# print(s3)
# print(s3 * 3)  # Hello Python___Hello Python___Hello Python___


# БОЛЬШОЕ ЦЕЛОЕ ЧИСЛО
# print(4455666612222333378999655122323)
# print(4.455666612222333378999655122323)


# Операторы в Питон:
# print(6 + 2)
# print(6 - 2)
# print(6 * 2)
# print(6 / 2)
# print(5 / 2)
# print(5 // 2)  # Целочисленное деление
# print(6 ** 2)
# print(6 % 2)
# print(5 % 2)


# Задача
# Нужно написать программу нахождения суммы, произведения и среднего арифметического трех чисел: 5, 7, 3
# Сумма: 15
# Произведение: 105
# Среднее арифметическое: 5.0

# a = 5
# b = 7
# c = 3
# print("Cумма:", a + b + c)
# print("Произведение:", a * b * c)
# print("Среднее арифметическое:", (a + b + c) / 3)

# a = 5
# b = 7
# c = 3
# sum1 = a + b + c
# print("Cумма:", sum1)
# print("Произведение", a * b * c)
# print("Среднее арифметическое:", sum1 / 3)


# numbers = 6 + 4 * 5 ** 2 + 7
# print(numbers)
#
# numbers = (6 + 4) * (5 ** 2 + 7)
# print(numbers)

# num = 10
# num += 5
# print(num)  # 15
# num -= 3
# print(num)  # 12
# num *= 4
# print(num)  # 48


# ----------------------------------------------------------------
# Урок №2 Python от 20.12.2023
# Урок №1
# ----------------------------

# Задача:
# Вывести числа в обратной последовательности: исходное - 9753, обратное - 3579 (через срез)
# a = "9753"
# reversed_a = a[::-1]
# b = int(reversed_a)
# print(b)
# print(type(b))


# Задача:
# Запросите у пользователя 4 числа. Отдельно сложите первые 2 и отдельно вторые 2.
# Разделите первую сумму на вторую. Выведите результат на экран, чтобы в ответе были 2 цифры после запятой.

# a = int(input("Введите первое число: "))
# b = int(input("Введите второе число: "))
# c = int(input("Введите третье число: "))
# d = int(input("Введите четвертое число: "))
# print("1:", a)
# print("2:", b)
# print("3:", c)
# print("4:", d)
# result = round(((a + b)/(c + d)), 2)
# print(result)
# Самый простой способ — использовать встроенную функцию round() . Вторым аргументом
# в эту функцию передается количество знаков после запятой, до которого следует округлить число.


# Задача:
# Вывести числа в обратной последовательности: исходное - 9753, обратное - 3579:
# РЕШЕНИЕ НА УРОКЕ:
# Первый вариант:
# num = 4321
# a = num % 10
# print(a)  # 1
# num = num // 10  # 432
# # print("num", num)
# b = num % 10
# print(b)  # 2
# num = num // 10  # 43
# # print("num", num)
# c = num % 10
# print(c)  # 3
# num = num // 10  # 4
# # print("num", num)
# d = num % 10
# print(d)  # 4
# print(a, b, c, d)
# num = a * 1000 + b * 100 + c * 10 + d * 1
# print(num)

# Второй вариант:
# num = 4321  # 1234
# res = num % 10 * 1000  # 1000
# num //= 10  # 432
# res += num % 10 * 100  # 200
# num //= 10  # 43
# res += num % 10 * 10  # 30
# num //= 10  # 4
# res += num % 10 * 1  # 4
# num //= 10
# print(res)


# *** ВОТ_ВОТ_ВОТ ***
# Задача:
# Дано трехзначное число. Вывести на экран все цифры этого числа, начиная с единиц, и
# получить новое число, образованное перестановкой единиц и сотен.
# Полностью программа будет выглядеть следующим образом:
# n = int(input("Введите трехзначное число: "))
# e = n % 10
# d = n // 10 % 10
# s = n // 100  # n // 10 // 10
# # print(e, d, s, e*100 + d*10 + s)
# print(e, d, s)
# print(e*100 + d*10 + s*1)


# print(int(3.8))  # 3
# a = round(3.8566988, 3)  # подразумевает float
# print(round(a))  # Это функция округления
# print(a, type(a))

# a = '5.2'  # не получится, потому что одновременно float и string
# b = 10
# c = int(a) + b
# print(c)


# name = "Виктор"
# age = 28
# # print("Меня зовут", name, ". Мне", age, "лет.")  # здесь пробел нам добавляет запятая
# # print("Меня зовут", name + ". Мне", age, "лет.")
# # print("Меня зовут " + name + ". Мне " + str(age) + " лет.")  # print выводит строки
# print("Меня зовут", name, ". Мне", age, "лет.", sep="---", end="\n")  # sep - seperator
# #  end - чем заканчивается конец строки
# print("Меня зовут", name, ". Мне", age, "лет.", end=" ", sep="---")
# print("Hello")

# name = input("Введите имя: ")
# city = input("Введите город: ")
# print("Вы ввели:", name, city)


# Задача:
# Попросим пользователя через input ввести какое-то число, а потом указать степень:
# num = input("Введите число: ")
# power = input("Введите степень: ")
# num = int(num)
# power = int(power)
# res = num ** power
# print("Число", num, "в степени", power, "равно: ", res)

# Правильный вариант, так лучше:
# num = int(input("Введите число: "))
# power = int(input("Введите степень: "))
# res = num ** power
# print("Число", num, "в степени", power, "равно: ", res)


# BOOLEAN ЗНАЧЕНИЯ:
# b1 = True  # True - расценивается как 1
# b2 = False  # False - расценивается как 0
# print(b1 + 5)  # 1 + 5
# print(b2 + 5)  # 0 + 5
# print(type(b1))
# print(bool)

# False => "" (пустая строка), 0, 0.0, False, None

# print(bool("python"))
# print(bool(""))
# print(bool(10))
# print(bool(0))
# print(bool(0.0))
# print(bool(False))
# print(bool(None))

# test = None
# print(type(test))  # <class 'NoneType'>
# test = 5
# print(test)


# Операторы сравнения
# print(7 == 7)  # здесь сравниваются типы данных # True
# print(7 == "7")  # False потому, что разные типы данных
# print(2 + 5 != 7)
# print(8 > 5)
# print(8 < 5)
# print(8 >= 8)
# print(8 <= 8)
# print("Привет" > "ПРИВЕТ")  # 175 > 143

# print(2 < 4 < 9)  # True : True => True
# print(2 < 4 > 9)  # True : False => False
# print(2 * 5 > 7 >= 4 + 3)   # True
# print(3 * 3 <= 7 >= 2)  # False


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# a = 10
# b = 5
# c = a == b # == оператор сравнения
# print(a, b, c)  # 10 5 False

# Логические операторы:
# print(5 - 3 == 2 and 1 + 3 == 4)  # True and True => True
# print(5 - 3 == 2 or 1 + 3 < 4)  # True and False => True
# print(not 9 - 5)  # False (все что не 0 это True), но у нас стоит not, поэтому мы получаем False
# print(not 9 - 9)  # True


# УСЛОВИЯ:
# cnt = 15
# if cnt < 10:
#     cnt += 1
# print(cnt)  # 15
#
# cnt = 9
# if cnt < 10:
#     cnt += 1
# print(cnt)  # 9 + 1 = 10


# Задача:
# Просим пользователя указать свой возраст, до 18 лет доступ на сайт запрещен, после 18 - разрешен
# age = int(input("Введите свой возраст: "))
# if age >= 18:
#     print("Доступ на сайт разрешен")
# else:
#     print("Доступ на сайт запрещен")

# PEP20
# import this


# a = 100
# b = 10
# if a > b:  # Можно так или использовать 3 if
#     print("a > b")
# elif b > a:
#     print("b > a")
# else:
#     print("a == b")


# a = 10
# b = 10
# if a > b:
#     print("a > b")
# if b > a:
#     print("b > a")
# if a == b:
#     print("a == b")


# Задача - треугольник:
# Даны длины треугольника, проверить, является ли треугольник равносторонним, равнобедренным или
# разносторонним
# a = int(input("Введите первую сторону: "))
# b = int(input("Введите вторую сторону: "))
# c = int(input("Введите третью сторону: "))
#
# if a == b == c:
#     print("Треугольник равносторонний")
# elif a == b or a == c or c == b:
#     print("Треугольник равнобедренный")
# else:
#     print("Треугольник разносторонний")


# ВЛОЖЕННЫЕ УСЛОВИЯ:
# Новое!
# Задача:
# Попросим пользователя ввести день недели цифрой, а мы выдаем, рабочий это день или выходной и
# называем день недели
# day = int(input("Введите день недели (цифрой): "))
# if 1 <= day <= 5:  # (day >= 1) and (day <= 5):
#     print("Рабочий день - ", end="")
#     if day == 1:
#         print("понедельник")
#     if day == 2:
#         print("вторник")
#     if day == 3:
#         print("среда")
#     if day == 4:
#         print("четверг")
#     if day == 5:
#         print("пятница")
# elif day == 6 or day == 7:
#     print("Выходной день - ", end="")
#     if day == 6:
#         print("суббота")
#     if day == 7:
#         print("воскресенье")
# else:
#     print("Такого дня недели не существует!")


# ЗАДАЧА:
# ВОРОНЫ ** ВОРОНЫ ** ВОРОНЫ:
# Число ворон на ветке от 0 до 9, указать количество ворон с правильным падежом
# МОЙ ВАРИАНТ:
# crows = int(input("Введите количество ворон на ветке цифрой (от 1 до 9): "))
# if crows == 1:
#     print("На ветке:", crows, "ворона")
# elif 2 <= crows <= 4:
#     print("На ветке:", crows, "вороны")
# else:
#     print("На ветке:", crows, "ворон")


# ВАРИАНТ УЧИТЕЛЯ:
# crows = int(input("Введите количество ворон на ветке: "))
# if 0 <= crows <= 9:
#     print("На ветке", end=" ")
#     if crows == 1:
#         print(crows, "ворона")
#     elif 2 <= crows <= 4:
#         print(crows, "вороны")
#     else:
#         print(crows, "ворон")
# else:
#     print("Ошибка ввода данных")  # но это распространяется только на цифры положит и отрицательные, на те,
# которые выходят за диапазон 0-9


# Бескоровайный Владимир Сергеевич (НЕ ВЕРНО):
# crows = int(input("Введите кол-во ворон: "))
# if crows == 1:
#     print(f"На ветке {crows} ворона")
# if crows >= 2:
#     print(f"На ветке {crows} вороны")
# if crows >= 5:
#     print(f"На ветке {crows} ворон")


# *** ВОТ_ВОТ_ВОТ ***
# Задача:
# Дано трехзначное число. Вывести на экран все цифры этого числа, начиная с единиц, и
# получить новое число, образованное перестановкой единиц и сотен.
# Полностью программа будет выглядеть следующим образом:
# n = int(input("Введите трехзначное число: "))
# e = n % 10
# d = n // 10 % 10
# s = n // 100  # n // 10 // 10
# # print(e, d, s, e*100 + d*10 + s)
# print(e, d, s)
# print(e*100 + d*10 + s*1)


# ----------------------------------------------------------------
# Урок №3 Python от 25.12.2023
# Урок №1
# ----------------------------------

# Мы заканчиваем с условием IF:
# Задача:
# Введите № месяца и мы должны вывести название времени года в соответствии с этим номером месяца.
# В случае, если пользователь введет недопустимое число, мы должны написать (Ошибка ввода данных)
# m = int(input("Введите номер месяца: "))
# if m == 1 or m == 2 or m == 12:
#     print("Зима")
# elif 3 <= m <= 5:
#     print("Весна")
# elif 6 <= m <= 8:
#     print("Лето")
# elif 9 <= m <= 11:
#     print("Осень")
# else:
#     print("Ошибка ввода данных")


# Новая тема - в питоне нет switch, но есть конструкция match:
# Оператор хороший, но не будем использовать, тк пока работает медленно
# password = "admin"
# # password = "user"
# # password = ""  # Пароль неверен
# match password:  # что мы планируем сравнивать
#     case 'admin':
#         print("Администратор")
#     case 'user':
#         print("Пользователь")
#     case _:
#         print("Пароль неверен")


# Задача:
# Используя Match, указать, какой это день недели рабочий или выходной или вывести,
# что такого дня недели не существует
# day = 'понедельник'
# match day:
#     case 'понедельник' | 'вторник' | 'среда' | 'четверг' | 'пятница': # когда нам нужно сравнить
#         # разные значения, мы отделяем их вертикальной чертой
#         print("Рабочий день")
#     case 'суббота' | 'воскресенье':
#         print("Выходной день")
#     case _:
#         print("Такого дня недели не существует")


# day = 'суббота'
# time = 12
# match day:
#     case 'понедельник' | 'вторник' | 'среда' | 'четверг' | 'пятница' if 9 <= time <= 16:
#         print("Рабочий день")
#     case 'суббота' | 'воскресенье' if 9 <= time <= 12:
#         print("Рабочий день")
#     case 'суббота' | 'воскресенье':
#         print("Выходной день")
#     case _:
#         print("Такого дня недели не существует или нерабочее время")


# ТЕРНАРНОЕ ВЫРАЖЕНИЕ:
# (Тернарное выражение  - if и else в одной строке)
# Шаблон:
# condition_if_true if condition else condition_if_false
# a, b = 10, 20  # объявлено 2 переменные
# minim = a if a < b else b  # здесь соблюдено 1 условие true, поэтому выводится a (10)
# print(minim)
#
# a, b = 50, 20
# min = a if a < b else b  # здесь соблюдено 2 условие false, поэтому выводится b (20)
# print(min)


# Усложненная задача:
# a, b = 20, 10
# print("a == b" if a == b else ("a > b" if a > b else "b > a"))

# Задача:
# Написать программу проверки деления на нуль с использованием тернарного выражения:
# a = int(input("Введите первое число: "))
# b = int(input("Введите второе число: "))
# print("На ноль делить нельзя." if b == 0 else a / b)
#
# a, b = int(input("Введите первое число")), int(input("Введите второе число"))
# print("На ноль делить нельзя!!!" if b == 0 else a / b)


# ИСКЛЮЧЕНИЯ:
# Новая тема - исключения в питоне
# РАССМОТРИМ РАЗНЫЕ ВИДЫ ОШИБОК:
# 2a = 0 # SyntaxError: invalid decimal literal - неверный десятичный литерал
# нельзя указывать имя переменной, начиная с цифры

# a = 0
# print(a + b)  # NameError: name 'b' is not defined
# не определена переменная

# a = 0
# b = "2a"
# print(a + b)  # TypeError: unsupported operand type(s) for +: 'int' and 'str'
# разные типы данных

# a = 0
# b = "2a"
# print(a + int(b))  # ValueError (Ошибка значения): invalid literal for int() with base 10: '2a'
# когда функция int() пытается преобразовать строку или другой тип данных,
# который не может быть интерпретирован как целое число

# a = 5
# b = 0
# print(a / b)  # ZeroDivisionError: division by zero
# на нуль делить нельзя


#  ОБРАБОТКА ИСКЛЮЧЕНИЙ:
# Чтобы обойти это исключение, мы воспользуемся конструкцией try..except, то есть мы вначале
# запишем try: далее записываем наше условие и ниже слово except с видом ошибки:
# n = int(input("Введите целое число: "))
# print(n * 2)

# try:
#     n = int(input("Введите целое число: "))
#     print(n * 2)
# except ValueError:
#     print("Что-то пошло не так")


# Задача:
# У нас деление, и мы знаем, что, скорее всего, могут ввести строковые значения,
# мы их исключим с помощью ValueError, и еще могут делить на нуль, поэтому ZeroDivisionError:
# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except ValueError:
#     print("Нельзя вводить строки.")
# except ZeroDivisionError:
#     print("Нельзя делить на ноль.")


# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except (ValueError, ZeroDivisionError): # чтобы не было ошибки, нужно эти исключения взять в круглые скобочки
#     # такой тип данных мы еще не проходили, это кортеж у нас будет
#     print("Нельзя вводить строки и нельзя делить на ноль")
# else: # срабатывает, когда в блоке try не возникло исключений
#     print("Все нормально. Вы ввели числа", n, "и", m)
# finally: # выполняется в любом случае
#     print("Конец программы")

# Но есть еще и другие операторы else и finally
# else срабатывает только тогда, когда в блоке try не возникло исключений, и все работает нормально
# finally всегда отрабатывает в конце программы


# Задача:
# Напишите программу, которая запрашивает ввод 2х значений.
# Если, хотя бы одно из них не является числом, то должна выполняться конкатенация,
# то есть соединение строк. в остальных случаях введенные числа суммируются.
# УЧИТЕЛЬ:
# x = input("Введите первое число: ")
# y = input("Введите второе число: ")
# try:
#     print(int(x) + int(y))
# except ValueError:
#     print(x + y)


# УЧИТЕЛЬ:
# n = input("Введите первое число: ")
# m = input("Введите второе число: ")
# try:
#     n = int(n)  # '9' => 9
#     m = int(m)  # 'uiduud'
# except ValueError:
#     n = str(n)
# finally:
#     print(n + m)


# Губарьков Денис Юрьевич # Какой он молодец ***
# x = input("Введите первое: ")
# y = input("Введите второе: ")
# try:
#     print(int(x) + int(y))
# except ValueError:
#     print(x + y)

# Губарьков Денис Юрьевич
# x = input("Введите первое: ")
# y = input("Введите второе: ")
# try:
#     z = int(x) + int(y)
# except ValueError:
#     z = x + y
# finally:
#     print(z)  # вывод конечного результата


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# *** ЦИКЛ *** ЦИКЛ ***
# FOR и WHILE (в питоне только 2 цикла):
# i = 0
# while i < 5:
#     print("i =", i)
#     i = i + 1  # i += 1

# i = 10
# while i > 0:
#     print("i =", i)
#     i -= 1

# Задача:
# Написать программу, выводящую на экран только четные числа из диапазона от 1 до 20
# Первый вариант:
# i = 1
# while i <= 20:
#     if i % 2 == 0:  # только четные числа
#         print("i =", i)
#     i += 1

# Второй вариант:
# i = 2
# while i <= 20:
#     print("i =", i)
#     i += 2

# Задача:
# Написать программу, которая выводит на экран ряд из звездочек ('*').
# Количество выводимых символов указывает пользователь.
# n = int(input("Укажите количество символов: "))
# print("*" * n)

# n = int(input("Укажите количество символов: "))
# print("/" * n)
# print("+-" * int(n / 2))

# n = int(input("Укажите количество символов: "))  # в n попадет максимальное кол-во
# i = 0
# while i < n:  # Пока i будет меньше n
#     print("*", end="")  # end - чтобы все звездочки были на одной строке
#     i += 1


# n = int(input("Укажите количество символов: "))
# i = 0
# while i < n:
#     if i % 2 == 0:
#         print("+", end="")
#     else:
#         print("-", end="")
#     i += 1

# n = int(input("Укажите количество символов: "))
# while n > 0:
#     print("*", end="")
#     n -= 1


# Задача:
# Написать программу, которая находит сумму всех целых нечетных чисел в диапазоне,
# указанном пользователем
# 1 - 5 => 1 + 3 + 5 => 9 Сумма целых нечетных чисел
# a = int(input("Введите начало диапазона: "))
# b = int(input("Введите конец диапазона: "))
# res = 0 # res - это мы указали переменную для суммы
# if a > b:
#     a, b = b, a # то есть если пользователь ввел наоборот, a и b поменяются местами
# while a <= b:
#     if a % 2: # достаточно, это значит, что они нечетные
#         res += a
#     a += 1
# print("Сумма целых нечетных чисел: ", res)


# Если вывести просто диапазон:
# a = int(input("Введите начало диапазона: "))
# b = int(input("Введите конец диапазона: "))
# res = 0  # res - это мы указали переменную для суммы
# while a <= b:
#     print(a, end=" ")
#     a += 1


# Задача:
# Нужно ввести целое число и проверять его на четность
# n = int(input("Введите целое число: "))
# if n % 2 == 0:
#     print("Четное")
# else:
#     print("Нечетное")

# n = input("Введите целое число: ")
# while type(n) != int:  # проверяем тип данных переменной, если она не равна типу данных int
#     # мы сами делаем ее int
#     try:
#         n = int(n)  # но это касается только чисел
#     except ValueError:  # Ошибка значения
#         print("Число не целое")
#         n = input("Введите целое число: ")
# if n % 2 == 0:
#     print("Четное")
# else:
#     print("Нечетное")


# i = 0
# while i < 10:
#     print(i, end=" ")
#     i += 1


# i = 0
# while i < 10:
#     print(i, end=" ")
#     if i == 5:
#         break
#     i += 1
# print("\nЦикл завершен")


# i = 0
# while i < 10:
#     if i == 3:
#         i += 1  # и еще перед continue надо увеличивать на 1, иначе создастся бесконечный цикл
#         continue  # continue пропускает у нас текущую итерацию
#     print(i, end=" ")  # не забываем писать print перед break, иначе инфа не выведется
#     if i == 5:
#         break
#     i += 1
# print("\nЦикл завершен")


# Бесконечный цикл
# i = 0
# while True:
#     print(i)
#     i += 1


# i = 0
# while True:
#     print(i)
#     if i == 5:  # if и break пишутся после print
#         break
#     i += 1  # а увеличение на 1 после

# while True:
#     n = int(input("Введите положительное число: "))
#     if n < 0:  # и если число будет отрицательным, цикл остановится
#         break


# Задача:
# Написать программу поиска произведения последовательности положительных и отрицательных чисел,
# вводимых с клавиатуры, пока пользователь не введет 0
# res = 1
# while True:
#     n = int(input("Введите число: "))
#     if n == 0:
#         break
#     res *= n  # чтобы выводилось произведение, res нужно опустить после break
# print("Результат:", res)


# В языке программирования Python, конструкция while True: используется для создания бесконечного цикла.
# Она означает, что код, заключенный в этот цикл, будет выполняться повторно до тех пор,
# пока условие True (истина) не изменится или не будет прервано внутри цикла.


# i = 0
# while i < 10:
#     print(i)
#     i += 1
# else:  # else отрабатывает только в том случае, когда тело while отработало корректно без ошибок
#     # и прерываний
#     print("Цикл окончен, i =", i)


# i = 0
# while i < 10:
#     if i == 5:
#         break
#     print(i)
#     i += 1
# else:  # здесь есть break, поэтому else не выводится
#     print("Цикл окончен, i =", i)


# Вложенные циклы:
# i = 1
# while i < 5:
#     print("Внешний цикл: i =", i)
#     j = 1
#     while j < 4:
#         print("\tВнутренний цикл: j =", j)  # здесь мы добавили \t табуляцию
#         j += 1
#     i += 1


# length = 435
# m = length // 100
# cm = length % 100
# print("m:", m, "cm:", cm)


# ----------------------------------------------------------------
# Урок №4 Python от 27.12.2023
# Урок №1
# ВЛОЖЕННЫЕ ЦИКЛЫ:
# ----------------------------------

# Задача:
# Необходимо вывести на экран таблицу умножения
# i = 1
# while i < 10:
#     j = 1
#     while j < 10:
#         print(i, "*", j, "=", i * j, end="\t\t")
#         j += 1
#     print()  # здесь мы добавили перенос на другую строчку
#     i += 1


# Задача:
# Необходимо вывести на экран прямоугольник из символов:
# i = 1  # то есть (i) у нас выводит вертикально. но это кол-во СТРОК
# while i < 4:
#     j = 1   # а (j) выводит горизонтально. а это кол-во СТОЛБЦОВ
#     while j < 7:
#         print("^", end="")
#         j += 1
#     print()
#     i += 1

# i = 0
# while i < 3:
#     j = 0
#     while j < 6:
#         print("^", end="")
#         j += 1
#     print()
#     i += 1


# Задача:
# Необходимо вывести на экран прямоугольник из чередующихся символов:
# i = 0 # строки
# while i < 5:
#     j = 0 # столбцы
#     while j < 16:
#         if i % 2 == 0:
#             print("+", end="")
#         else:
#             print("-", end="")
#         j += 1
#     print()
#     i += 1
# ++++++++++++++++
# ----------------
# ++++++++++++++++
# ----------------
# ++++++++++++++++


# Задача:
# Написать программу, выводящую чередующиеся символы по вертикали:
# Первый вариант:
# i = 0
# while i < 5:
#     j = 0
#     while j < 16:
#         if j % 2 == 0: # i поменяли на j в проверке
#             print("+", end="")
#         else:
#             print("-", end="")
#         j += 1
#     print()
#     i += 1
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-


# Второй вариант:
# i = 0 # строки
# while i < 5:
#     j = 0 # столбцы
#     while j < 8:
#         print("+-", end="")
#         j += 1
#     print()
#     i += 1
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-
# +-+-+-+-+-+-+-+-


# Задача:
# Вывести диагональ из звездочек:
# Первый вариант:
# j = 0
# while j < 5:
#     print(" " * j, "*", sep="")
#     j += 1

# Второй вариант:
# i = 0
# while i < 5:
#     j = 0
#     while j < i:
#         print(" ", end="")
#         j += 1
#     print("*")
#     i += 1
# *
#  *
#   *
#    *
#     *


# ЦИКЛ FOR
# for i in "Hello":
#     print(i)
# H
# e
# l
# l
# o

# Конструкция с FOR
# for element in collection:
#     print(element)

# То есть переменная-счетчик (element) может быть любым. Она будет использоваться при каждой итерации.
# Эта переменная может называться как угодно
# (collection) - это список, массив, слово, то есть (тип данных), который представляет собой
# коллекцию, его еще называют итерируемый объект (когда мы можем пройтись по всем элементам этой коллекции).
# Так же это строковое значение данных, где можно вывести посимвольно каждый элемент
# for i in "Hello":
#     print(i)

# for color in "red", "yellow", "green", 1, 20, 0.3: # это кортеж
#     print(color)
# red
# yellow
# green
# 1
# 20
# 0.3

# Конструкция с range (start, stop, step) - start=0, step=1 (это по умолчанию)
# print(range(5))
# # range(0, 5)
# print(range(2, 5))
# # range(2, 5)
# print(range(2, 5, 2))
# range(2, 5, 2)

# for i in range(9): # 9 - не включается
#     print(i, end=" ")
# # 0 1 2 3 4 5 6 7 8
# print()
#
# i = 0
# while i < 9:
#     print(i, end=" ")
#     i += 1
# # 0 1 2 3 4 5 6 7 8


# for i in range(2, 9):
#     print(i, end=" ")
# # 2 3 4 5 6 7 8
# print()
#
# i = 2
# while i < 9:
#     print(i, end=" ")
#     i += 1
# # 2 3 4 5 6 7 8


# for i in range(2, 9, 2): # Шаг с 2
#     print(i, end=" ")
# # 2 4 6 8
# print()
#
# i = 2
# while i < 9:
#     print(i, end=" ")
#     i += 2 # Здесь шаг с 2
# # 2 4 6 8


# Теперь хотим от большего к меньшему:
# for i in range(9, 0, -1):
#     print(i, end=" ")
# # 9 8 7 6 5 4 3 2 1
# print()
#
# i = 9
# while i > 0:
#     print(i, end=" ")
#     i -= 1
# # 9 8 7 6 5 4 3 2 1


# for i in range(1, 10):
#     print(i, end=" ")
# # 1 2 3 4 5 6 7 8 9
# print()
#
# i = 1
# while i <= 9:
#     print(i, end=" ")
#     i += 1
# # 1 2 3 4 5 6 7 8 9


# n = 9
# for i in range(1, n + 1): # n + 1
#     print(i, end=" ")
# # 1 2 3 4 5 6 7 8 9
# print()
#
# i = 1
# while i <= 9:
#     print(i, end=" ")
#     i += 1
# # 1 2 3 4 5 6 7 8 9


# for i in range(100, 0, -10):
#     print(i, end=" ")
# # 100 90 80 70 60 50 40 30 20 10
# print()
#
# i = 100
# while i > 0:
#     print(i, end=" ")
#     i -= 10
# # 100 90 80 70 60 50 40 30 20 10


# Задача:
# Пользователь вводит целое число. Необходимо вывести все целые числа, на которые
# заданно число делится без остатка.
# Введите целое число: 36
# 1 2 3 4 6 9 12 18 - если 36 делить на данные числа, там делится без остатка

# a = int(input("Введите целое число: "))
# for i in range(1, a + 1):
#     if a % i == 0:
#         print(i, end=" ")
# # 1 2 3 4 6 9 12 18 36

# Задача:
# Вывести целые числа в диапазоне от 10 до 100, у которых есть две одинаковые цифры.
# 11 22 33 44 55 66 77 88 99
# for i in range(10, 100):
#     if i // 10 == i % 10: # то есть смотрим, чтобы 1 и последняя цифры были одинаковыми
#         print(i, end=" ")
# # 11 22 33 44 55 66 77 88 99


# Еще у нашего FOR есть ELSE:
# for i in range(3):
#     print(i)
#     if i == 1:
#         break
#         # continue
# else:
#     print("done")


# ----------------------------------------------------------------
# Урок №2
# ----------------------------
# ВЛОЖЕННЫЕ FOR:

# for i in range(3):
#     print("+++")
# +++
# +++
# +++

# Здесь мы сделаем вложенный цикл:
# for i in range(3):
#     print("+++")
#     for j in range(2):
#         print("-----")
# +++
# -----
# -----
# +++
# -----
# -----
# +++
# -----
# -----


# Задача:
# Задача вывести на экран прямоугольник из звездочек, ширину и высоту задает пользователь:
# Введите длину прямоугольника: 12
# Введите высоту прямоугольника: 4
# w = int(input("Введите длину/ ширину прямоугольника: "))
# h = int(input("Введите высоту прямоугольника: "))
# for i in range(h):  # 3 строки, то есть высота
#     for j in range(w):  # 2 столбца, то есть длина
#         print("*", end="")
#     print()
# Введите длину прямоугольника: 8
# Введите высоту прямоугольника: 3
# ********
# ********
# ********


# Задача:
# Вывести пустой прямоугольник, для описания контура фигуры использовать звездочки:
# Введите ширину прямоугольника: 16
# Введите высоту прямоугольника: 4
# w = int(input("Введите длину/ ширину прямоугольника: ")) # 16
# h = int(input("Введите высоту прямоугольника: ")) # 4
# for i in range(h): # или (0, h)
#     for j in range(w): # или (0, w)
#         if i == 0 or i == h - 1 or j == 0 or j == w - 1:
#             print("*", end="")
#         else:
#             print(" ", end="")
#     print()
# ****************
# *              *
# *              *
# ****************


# FOR в Питоне можно писать в одну строку:
# print([i * 2 for i in "Python"])
# # ['PP', 'yy', 'tt', 'hh', 'oo', 'nn']
# print([i * 5 for i in "Python"])
# # ['PPPPP', 'yyyyy', 'ttttt', 'hhhhh', 'ooooo', 'nnnnn']
# print([i for i in range(30)])
# # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
# # 22, 23, 24, 25, 26, 27, 28, 29]
# print([i for i in range(30) if i % 2 == 0])  # только четные числа
# [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]


# СПИСОК СПИСОК СПИСОК *** list list list
# В Питоне списком называется то, что в javascript называлось массивом
# В Питоне индексы с лева направо начинаются с 0, а справа налево с -1 (потому что нет -0)
# num = [9, 3, 9, 4, 1]
# print(num)
# # [9, 3, 9, 4, 1]
# print(type(num))  # <class 'list'>
# num = [9, 3, 9, 4, 1, "Hello", 2.3, True]
# print(num)
# [9, 3, 9, 4, 1, 'Hello', 2.3, True]
# print(num[0])  # 9
# print(num[3])  # 4
# print(num[-1])  # True
# print(num[7])  # True
# print(num[8])  # IndexError: list index out of range
# num[1] = 100
# num[2] += 50  # было 9, стало 59
# print(num)
# # [9, 100, 59, 4, 1, 'Hello', 2.3, True]
# num[8] = 2  # IndexError: list assignment index out of range


# У списка есть возможность посмотреть длину:
# num = [9, 3, 9, 4, 1, "Hello", 2.3, True]
# print(num)
# print(len(num))  # len - функция, которая показывает количество элементов в списке
# # 8 - просто количество
# print(num[len(num) - 1])  # True
# print(num[-1])  # True


# ВИДЫ СОЗДАНИЯ СПИСКОВ В ПИТОН:
# num = []
# print(num)
# print(type(num))
# []
# <class 'list'>

# nums = list("Hello")
# print(nums)
# print(type(nums))
# [] ['H', 'e', 'l', 'l', 'o']
# <class 'list'>

# nums1 = list(range(9))
# print(nums1)
# print(type(nums1))
# [0, 1, 2, 3, 4, 5, 6, 7, 8]
# <class 'list'>

# nums2 = list(range(2, 21, 2))  # нужен список от 2 до 20, только четные числа
# print(nums2)
# print(type(nums2))
# [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
# <class 'list'>

# nums2 = list(range(20, 1, -2))  # нужен список от 20 до 2 в обратном порядке, только четные числа
# print(nums2)
# print(type(nums2))
# [20, 18, 16, 14, 12, 10, 8, 6, 4, 2]
# <class 'list'>


# Списки можно умножать, списки можно складывать:
# nums = list("Hello")
# print(nums)
# # ['H', 'e', 'l', 'l', 'o']
# print(nums * 2)
# ['H', 'e', 'l', 'l', 'o', 'H', 'e', 'l', 'l', 'o']

# nums = list("Hello")
# num = nums * 2
# print(num + [1, 2, 3])
# ['H', 'e', 'l', 'l', 'o', 'H', 'e', 'l', 'l', 'o', 1, 2, 3]


# Шаг в range умножим на 2:
# nums = list(range(1, 100, 2 * 4))
# print(nums)
# # [1, 9, 17, 25, 33, 41, 49, 57, 65, 73, 81, 89, 97]
# nums = list(range(1, 100, 2 ** 4))
# print(nums)
# # [1, 17, 33, 49, 65, 81, 97]
# nums = list(range(1, 100, 4 // 2))
# print(nums)

# nums = list(range(2, 100, 10))
# print(nums)
# for i in nums:
#     print(i)
# [2, 12, 22, 32, 42, 52, 62, 72, 82, 92]
# 2
# 12
# 22
# 32
# 42
# 52
# 62
# 72
# 82
# 92


# nums = list(range(2, 100, 10))  # в nums у нас хранится список чисел
# print(nums)
# for i in range(len(nums)):  # а range у нас принимает только int, если укажем len,
#     # то ок попадет длина списка и в i не сами значения будут приходить, при длине списка len
#     # к нам приходят индексы элементов списка
#     # print(i)
#     print(nums[i])  # а если укажем nums по индексу i, то придут Сами Значения
# 0
# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9


# Генератор списков:
# [конечное выражение for имя переменной in последовательность]
# или вместо последовательности может быть (range)
# a = [0 for i in range(5)]  # количество итераций 5
# print(a)  # [0, 0, 0, 0, 0]
# b = [i for i in range(5)]
# print(b)  # [0, 1, 2, 3, 4]
# c = [i ** 2 for i in range(1, 6)]
# print(c)  # [1, 4, 9, 16, 25]
# d = [d * 3 for d in "list"]  # len = 4
# print(d)  # ['lll', 'iii', 'sss', 'ttt']


# Заполним список (массив) с клавиатуры:
# Первый способ:
# a = [0] * int(input("Введите количество элементов списка: "))  # 5
# # a = [0] - это список на 1 элемент со значением 0
# print(a)  # [0, 0, 0, 0, 0]
# for i in range(len(a)):
#     # a[i] = input("-> ")
#     a[i] = int(input("-> "))
# print(a)
# Введите количество элементов списка: 5
# [0, 0, 0, 0, 0]
# ->g
# ->f
# ->f
# ->d
# ->s
# ['g', 'f', 'f', 'd', 's']


# Второй способ:
# a = [input("-> ") for i in range(int(input("n = ")))]
# print(a)
# n = 3
# -> f
# -> d
# -> d
# ['f', 'd', 'd']

# a = [int(input("-> ")) for i in range(int(input("n = ")))]  # здесь именно числа int
# print(a)

# a = [int(input("-> ")) for i in range(int(input("n = ")))]
# print(a)


# ----------------------------------------------------------------
# Урок №5 Python от 10.01.2024
# *** С НОВЫМ ГОДОМ ***
# Урок №1
# ----------------------------------

# print(range(5))  # 1 - это конечное значение
# print(list(range(5))) # list - это список, который содержит диапазон от 0 до 5
# for i in range(5):
#     print(i)
# range(0, 5)
# [0, 1, 2, 3, 4]


# print(range(5))  # Напечатай диапазон от 0 до 5
# print(list(range(5)))  # Напечатай список этого диапазона от 0 до 5
# s = [2, 9, 8, 7, 4]
# for i in range(5):  # for i in range(len(s)):
#     print(i, "->", s[i])
# print(len(s))  # 5
# range(0, 5)
# [0, 1, 2, 3, 4]
# 0 -> 2
# 1 -> 9
# 2 -> 8
# 3 -> 7
# 4 -> 4


# Задача:
# Посчитать в списке сумму всех отрицательных элементов (список вводит пользователь):
# a = [int(input("-> ")) for i in range(int(input("n = ")))]
# print(a)
# s = 0  # ну ок, это блят сумма у нас # sum - нельзя слово использовать
# for i in range(len(a)):
#     if a[i] < 0:
#         s += a[i]
# -------------------------------
# for i in a:  # Смотреть в цикле
#     if i < 0:
#         s += i  # (s = s + i)
# print(s)
# n = 5
# -> 58
# -> -589
# -> -52
# -> 6
# -> 9
# [58, -589, -52, 6, 9]
# -641


# lst = list(range(10, 100, 10))  # с шагом 10
# print(lst)
# for i in range(len(lst)):  # 10 20 30 40 50 60 70 80 90
#     print(lst[i], end=" ")
# print()
# for i in lst:  # 10 20 30 40 50 60 70 80 90
#     print(i, end=" ")


# colors = ["red", "blue", "green"]
# for i in range(len(colors)):  # 0 1 2 - здесь выводятся индексы
#     print(i, end=" ")

# colors = ["red", "blue", "green"]
# for i in range(len(colors)):  # red blue green - здесь выводятся сами цвета из списка
#     print(colors[i], end=" ")


# colors = ["red", "blue", "green"]
# for i in range(len(colors)):
#     print(colors[i], end=" ")  # red blue green
# print()
# for i in colors:
#     print(i, end=" ")  # red blue green


# Задача:
# В списке на 20 элементов посчитать количество четных элементов и найти сумму нечетных элементов (от 21 до 40)
# Первый вариант:
# n = list(range(21, 41))  # [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
# # 35, 36, 37, 38, 39, 40]
# print(n)
# count = s = 0  # множественное присваивание
# # count = 0
# # s = 0
# # print(s, count)
# for i in range(len(n)):
#     if n[i] % 2 == 0:
#         count += 1  # так считаем количество штук
#     else:
#         s += n[i]  # так считаем сумму
# print("Количество четных элементов списка:", count)
# print("Сумма нечетных элементов списка:", s)


# Второй вариант:
# n = list(range(21, 41))  # [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
# # 35, 36, 37, 38, 39, 40]
# print(n)
# count = s = 0  # множественное присваивание
# for i in n:
#     if i % 2 == 0:
#         count += 1
#     else:
#         s += i
# print("Количество четных элементов списка:", count)
# print("Сумма нечетных элементов списка:", s)


# Задача:
# Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.
# n = list(range(21, 41))
# print(n)
# i = 0
# print(n[i])  # 21 - получаем 0 индекс
# print(n[i + 1])  # 22 - получаем 1 индекс

# print(n[0])
# print(n[0 + 1])

# i = 2
# print(n[i])  # 23 - получаем 2 индекс, а теперь хотим получить элемент перед ним (то есть -1)
# print(n[i - 1])  # 22


# n = [4, 9, 6]
# print(n)
# i = 2
# print(n[i])  # 6
# print(n[i - 1])  # 9


# Задача:
# У нас дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.
# a = [int(input("-> ")) for i in range(int(input("n = ")))]
# print(a)
# for i in range(1, len(a)):
#     if a[i] > a[i - 1]:  # a[i] - текущий элемент, a[i - 1] - предыдущий элемент
#         print(a[i], end=" ")
# n = 5
# -> 9
# -> 45
# -> 85
# -> 6
# -> 2
# [9, 45, 85, 6, 2]
# 45 85

# Вот еще вариант, но он неправильный!):
# for i in a:
#     if i > i - 1:
#         print(i, end=" ")


# Задача:
# Элементы должны поменяться местами, то есть изменить свои индексы:
# a = [7, 9, 3, 1, 2]
# print(a)  # 7, 9, 3, 1, 2
# print("[0]", id(a[0]))
# print("[1]", id(a[1]))
# a[1], a[0] = a[0], a[1] # множественное присваивание

# print(a)  # 9, 7, 3, 1, 2
# print("[0]", id(a[0]))
# print("[1]", id(a[1]))


# НОВАЯ ТЕМА:
# СРЕЗЫ *** СРЕЗЫ ***
# Срезы - список [start:stop:step]
# s = [5, 9, 3, 7, 1, 8]
# print(s[0:3])  # без включения 3 индекса - [5, 9, 3]
# print(s[1:3])  # [9, 3]
# print(s[1:])  # с первого индекса до конца - [9, 3, 7, 1, 8]
# print(s[:3])  # с самого начала и до 3 индекса (не включая 3 индекс) - [5, 9, 3]
# print(s[:])  # [:] = не будем ставить цифры ни слева ни справа, список выведется полностью,
# то есть сначала и до конца
# [:] или [::] — весь список
# print(s[::2])  # каждое 2 число, начиная с самого начала [::2] — нечетные по порядку индексы элементов
# [1::2] — четные по порядку элементы
# print(s[::1])  # Вывелись все числа по умолчанию [5, 9, 3, 7, 1, 8]
# print(s[::-1])  # элементы развернулись задом наперед, стали в обратном порядке
# print(s[::-2])

# s = [5, 9, 3, 7, 1, 8]
# print(s[5::-1])  # []
# i = 5
# while i >= 0:
#     print(s[i])
#     i -= 1


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# s = [5, 9, 3, 7, 1, 8]
# b = s[10:20]
# print(b)
# print(s[10])  # IndexError: list index out of range
# print(s[10:20])  # []

# s = [5, 9, 3, 7, 1, 8]
# print(s, id(s))
# b = s[10:4]
# print(b, id(b))


# s = "Hello"
# print(list("Hello"))  # ['H', 'e', 'l', 'l', 'o']
# print(s[0])  # H
# print(s[0:3])  # Hel

# s = "Hello World!"
# print(s[6:])  # World!

# s = "Hello World!"
# print(s[6:-1])  # World будет без !


# Задача:
# Создать срезы из списка: [1, 2, 3, 4, 5, 6, 7]
# s = list(range(1, 8))
# print(s)
# print(s[::-1])  # [7, 6, 5, 4, 3, 2, 1] - чтобы список развернулся!
# print(s[::2])  # [1, 3, 5, 7] - начиная с 0 получаем шаг 2
# print(s[1::2])  # [2, 4, 6] - начиная с 1 получаем шаг 2
# print(s[0:1])  # [1] - от начала 0 до 1 индекса, не включая его
# print(s[-1:])  # [7] - от -1 индекса и до конца [7]
# print(s[3:4])  # [4] - от 3 индекса до 4, не включая его
# print(s[4:])  # [5, 6, 7] - от 4 индекса и до конца
# print(s[4:1:-1])  # [5, 4, 3] - от 4 индекса до 1 индекса, не включая его и шаг -1
# print(s[2:5])  # [3, 4, 5] - от 2 индекса до до 5 индекса, не включая его


# Задача:
# Будем изменять срезы
# s = [1, 2, 3, 4, 5, 6, 7]
# print(s)
# s[1:3] = [0, 0, 0, 0]  # 2 3 - то есть мы влияем на наш список через срез
# print(s)
# [1, 2, 3, 4, 5, 6, 7]
# [1, 0, 0, 0, 0, 4, 5, 6, 7]
# s[1:2] = [20]  # хочу поставить цифру 20 вместо первого нуля, здесь без [] не добавится
# print(s)
# # [1, 20, 0, 0, 0, 4, 5, 6, 7]
# s[2] = 50  # одним числом к одному индексу прекрасно добавилось
# print(s)
# [1, 20, 50, 0, 0, 4, 5, 6, 7]
# s[2] = [50]  # здесь сделал вложенный список
# print(s)
# [1, 20, [50], 0, 0, 4, 5, 6, 7]
# s[2] = 50, 30  # (50, 30) - кортеж
# print(s)
# [1, 20, (50, 30), 0, 0, 4, 5, 6, 7]  # (50, 30) - кортеж
# s[2:5] = []
# print(s)  # так мы удалили все нули
# [1, 20, (50, 30), 0, 0, 4, 5, 6, 7]
# [1, 20, 4, 5, 6, 7]

# del s[1]  # хочу удалить двадцатку - 20
# print(s)
# # [1, 20, 4, 5, 6, 7]
# # [1, 4, 5, 6, 7]
# del s[1:3]  # [1, 6, 7]
# print(s)


# НОВАЯ ВАЖНАЯ ТЕМА!
# *** МЕТОДЫ *** МЕТОДЫ *** МЕТОДЫ

# Как бы нам добавить после последнего индекса элемент
# s = [9, 3, 7, 8, 4, 6, 5]
# print(s)
# s[len(s):] = [12]  # [9, 3, 7, 8, 4, 6, 5, 12]
# print(s)


# dir(list) - смотрим в Python Console
# PyDev console: starting.
# Python 3.12.1 (tags/v3.12.1:2305ca5, Dec  7 2023, 22:03:25) [MSC v.1937 64 bit (AMD64)] on win32
# dir(list)
# ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__',
# '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__',
# '__getstate__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__',
# '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__',
# '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__',
# '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend',
# 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']


# 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'


# Метод - APPEND - append()
# ДОБАВИТЬ ТОЛЬКО 1 ЭЛЕМЕНТ В КОНЕЦ: append()
# s = [9, 3, 7, 8, 4, 6, 5]
# print(s)
# s.append(12)  # добавляет Один элемент в конец списка - [9, 3, 7, 8, 4, 6, 5, 12]
# print(s)
# s.append([1, 2, 3])  # [9, 3, 7, 8, 4, 6, 5, 12, [1, 2, 3]]
# print(s)
# s.append("add")  # [9, 3, 7, 8, 4, 6, 5, 12, [1, 2, 3], 'add']
# print(s)


# Метод - EXTEND - extend()
# ДОБАВИТЬ НЕСКОЛЬКО ЭЛЕМЕНТОВ В КОНЕЦ: extend()
# s.extend([1, 2, 3])  # добавляет любое кол-во элементов в конец списка []
# # [9, 3, 7, 8, 4, 6, 5, 12, [1, 2, 3], 'add', 1, 2, 3]
# print(s)
# s.extend("add")  # [9, 3, 7, 8, 4, 6, 5, 12, [1, 2, 3], 'add', 1, 2, 3, 'a', 'd', 'd']
# print(s)
# s.extend([2])  # добавит как 1 элемент если в []
# print(s)


# Метод - INSERT - insert()
# ДОБАВИТЬ В НАЧАЛО, СЕРЕДИНУ СПИСКА: insert()
# s.insert(0, "Hello") # добавляем элемент в список в заданный индекс
# заданный индекс - 1 параметр, само числовое значение - 2 параметр
# ['Hello', 9, 3, 7, 8, 4, 6, 5, 12, [1, 2, 3], 1, 2, 3, 'a', 'd', 'd', 2]
# print(s)

# s.insert(-1, "Hello")  # встал на -2 индекс, не предназначен для конца списка
# print(s)
# ['Hello', 9, 3, 7, 8, 4, 6, 5, 12, [1, 2, 3], 1, 2, 3, 'a', 'd', 'd', 'Hello', 2]
# s.insert(20, 90)  # лазейка как поставить в конец
# print(s)
# ['Hello', 9, 3, 7, 8, 4, 6, 5, 12, [1, 2, 3], 'add', 1, 2, 3, 'a', 'd', 'd', 'Hello', 2, 90]


# Задача:
# ЭТО ВСЕ АНАЛОГИ В РЕШЕНИИ:
# № 1.
# a = [int(input("-> ")) for i in range(int(input("n = ")))]
# print(a)

# № 2.
# s = []
# n = int(input("Введите количество элементов списка: "))
# for num in range(n):
#     x = int(input("Введите число: "))
#     s.append(x)  # добавление начинается с конца
#     # s.insert(0, x) # вводит наоборот
# print(s)


# Задача:
# У нас есть элементы, которые пересекаются и в 1 и во 2 списке. И мы хотим найти область пересечения
# значений, то есть нам нужны элементы, которые присутствуют и там и там.
# a = [5, 9, 2, 1, 4, 3]
# b = [4, 2, 1, 3, 7]
# c = []  # [2, 1, 4, 3]
# for i in a:  # 5, 9, 2, 1, 4, 3
#     for j in b:  # 4, 2, 1, 3, 7
#         if i == j:
#             c.append(i)
#             break
# print(c)


# a = [5, 9, 2, 1, 4, 3]
# b = [4, 2, 1, 3, 7]
# c = []  # [2, 1, 4, 3]
# for i in a:
#     for j in b:
#         if i in c:  # если i уже есть в списке c[], то мы повторяющийся элемент не добавляем повторно.
#             # Итерация прерывается с помощью continue
#             continue
#         if i == j:
#             c.append(i)
#             break
# print(c)


# АХРЕНЕТЬ !!! ВОТ РЕШЕНИЕ !!
# Простое и без вложенных списков
# a = [5, 9, 2, 1, 4, 3]
# b = [4, 2, 1, 3, 7]
# c = []  # [2, 1, 4, 3]
# for element in a:
#     if element not in c and element in b:
#         c.append(element)
# print(c)


# ----------------------------------------------------------------
# Урок №6 Python от 15.01.2024
# *** БЛЯТ HAPPY NEW YEAR ***
# Урок №1
# ----------------------------------


# Задача:
# Напишите функцию, которая создает комбинацию двух списков таким образом:
# [1, 2, 3] (+) [1, 11, 2, 22, 3, 33] -> [1, 11, 2, 22, 3, 33]
# a = [1, 2, 3]
# b = [11, 22, 33]
# c = []
# print(c)
# c = a + b - такой вариант нам здесь не подходит
# print(c)
# []
# [1, 2, 3, 11, 22, 33]
# for i in range(len(a)):  # 3 - здесь диапазон ограничивается длиной списка (берется максимальный),
#     # поэтому здесь нам без разницы какой len(a) = len(b) любой
#     c.append(a[i])
#     c.append(b[i])
# print(c)
# [1, 11, 2, 22, 3, 33]


# Но здесь только при условии, что длина 2 списка больше, чем длина первого списка:
# a = [1, 2, 3]
# b = [11, 22, 33, 4, 5]  # Нужно добавить 2 последние цифры 4 и 5
# c = []
# print(c)
# for i in range(len(a)):  # 3
#     c.append(a[i])
#     c.append(b[i])
# for i in range(len(a), len(b)):  # range (3-5)
#     c.append(b[i])
# print(c)
# [1, 11, 2, 22, 3, 33, 4, 5]


# Версия учителя:
# Что делать, если мы не знаем, какой список будет длиннее.
# a = [1, 2, 3, 4, 5]
# b = [11, 22, 33]
# c = []
# if len(b) > len(a):
#     for i in range(len(a)):  # 0-3
#         c.append(a[i])
#         c.append(b[i])
#     for i in range(len(a), len(b)):  # range(3, 5)
#         c.append(b[i])
# else:
#     for i in range(len(b)):  # 0-3
#         c.append(a[i])
#         c.append(b[i])
#     for i in range(len(b), len(a)):  # range(3, 5)
#         c.append(a[i])
# print(c)
# [1, 11, 2, 22, 3, 33, 4, 5]


# a = [1, 2, 3]
# b = [11, 22, 33, 4, 5]
# c = []
# if len(a) > len(b):  # здесь делаем еще одно условие, чтобы не дублировать for из предыдущего примера
#     a, b = b, a
# for i in range(len(a)):  # 0-3
#     c.append(a[i])
#     c.append(b[i])
# for i in range(len(a), len(b)):  # range(3, 5)
#     c.append(b[i])
# print(c)
# [1, 11, 2, 22, 3, 33, 4, 5]


# ПРОДОЛЖАЕМ ТЕМУ - МЕТОДЫ *** МЕТОДЫ ***
# МЕТОДЫ СПИСКОВ ***

# Метод - REMOVE - remove()
# remove - удаляет первое попавшееся значение из списка
# a = [1, 3, 2, 3, 4, 3, 5]
# print(a)
# a.remove(3)  # удаляет само значение (только первое попавшееся значение, если их несколько)
# print(a)
# [1, 3, 2, 3, 4, 3, 5]
# [1, 2, 3, 4, 3, 5] - удалилась первая попавшаяся цифра 3
# Если у нас несколько цифр 3 в нашем списке и их всех нужно удалить, придется создавать цикл,
# в котором перебирать их и удалять


# a.remove(7)  # ValueError: list.remove(x): x not in list
# print(a)
# n = 7
# if n in a:
#     a.remove(n)  # выбрасывает исключение, если элемента не существует ValueError
# print(a)


# УДАЛИИИИИИИИИЛ !!!
# a = [1, 3, 2, 3, 4, 3, 5, 7]
# print(a)
# if 7 in a:
#     a.remove(7)
# print(a)
# [1, 3, 2, 3, 4, 3, 5, 7]
# [1, 3, 2, 3, 4, 3, 5]


# Метод - POP - pop()
# Этот метод удаляет по заданному индексу
# a = [1, 3, 2, 3, 4, 3, 5]
# print(a)
# last = a.pop()  # pop() - без параметров, без указания индекса, удаляет и выводит последний элемент списка!
# print(last)
# print(a)
# [1, 3, 2, 3, 4, 3, 5]
# 5
# [1, 3, 2, 3, 4, 3]

# second = a.pop(1)  # Удаляет элемент по заданному индексу! и возвращает! здесь по индексу [1]
# print(second)
# print(a)
# [1, 3, 2, 3, 4, 3]
# 3
# [1, 2, 3, 4, 3]

# second2 = a.pop(12)  # Удаляет элемент по заданному индексу! и возвращает!
# print(second2)  # IndexError: pop index out of range - вышли за предел индексации
# print(a)


# Метод - CLEAR - clear()
# Этот метод clear просто очищает список
# a = [1, 3, 2, 3, 4, 3, 5]
# print(a)
# a.clear()  # Просто очищает список
# print(a)
# [1, 3, 2, 3, 4, 3, 5]
# []


# Задача:
# Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с индексом k,
# сдвинув влево все элементы, стоящие правее элемента с индексом k.
# Введите количество чисел списка: 5
# -> 9
# -> 8
# -> 7
# -> 6
# -> 5
# Введите индекс: 1
# 8
# [9, 7, 6, 5]
# sp = [int(input("-> ")) for i in range(int(input("Введите количество чисел списка: ")))]
# x = int(input("Введите индекс: "))
# print(sp.pop(x))
# print(sp)


# Метод - COUNT - count()
# Метод count может посчитать нам количество заданных значений, к примеру, сколько раз встречается
# цифра 5 в нашем списке
# a = [1, 5, 3, 2, 3, 4, 3, 5]
# print(a)
# num = a.count(3)  # возвращает количество заданных значений 3 в списке (всего у нас 3 цифры 3)
# print(num)
# [1, 5, 3, 2, 3, 4, 3, 5]
# 3
# num = a.count(6)  # 0 - такого нет
# print(num)


# Метод - INDEX - index()
# a = [1, 5, 3, 2, 3, 4, 3, 5]
# print(a)
# ind = a.index(2)  # возвращает индекс располагаемого элемента # 3
# print(ind)
# ind = a.index(3)  # возвращает индекс, но только первого элемента # 2
# print(ind)
# ind = a.index(3, 2)  # 1 - значение, 2 - его индекс
# print(ind)
# ind = a.index(3, 3, -1)  # индекс 4
# print(ind)
# ind = a.index(7)  # ValueError: 7 is not in list
# print(ind)
# ind = a.index(2)  # Возвращает индекс заданного значения # 3
# print(ind)


# Метод - REVERSE - reverse()
# Метод reverse - дает возможность список развернуть назад в обратную сторону
# a = [1, 5, 3, 2, 3, 4, 3, 5]
# print(a)
# a.reverse()  # Перестраивает элементы списка в обратном порядке
# print(a)
# [1, 5, 3, 2, 3, 4, 3, 5]
# [5, 3, 4, 3, 2, 3, 5, 1]


# Метод - SORT - sort()
# Метод sort - дает возможность отсортировать элементы списка
# a = [1, 5, 3, 2, 3, 4, 3, 5]
# print(a)
# a.sort()  # Сортировка списка по возрастанию
# print(a)
# [1, 2, 3, 3, 3, 4, 5, 5]
# Метод sort() может принимать дополнительные параметры:
# a.sort(reverse=False)  # [1, 2, 3, 3, 3, 4, 5, 5] - по умолчанию, если reverse не указан, то стоит False.
# Как выводились элементы по возрастанию, так и выводятся. Поэтому его a.sort(reverse) обычно
# со значением False не пишут, потому что ничего при этом не меняется.
# print(a)
# a.sort(reverse=True)  # [5, 5, 4, 3, 3, 3, 2, 1] - В данном случае, мы сортировку сделаем по убыванию
# # от большего к меньшему
# print(a)


# Строковые значения у нас также сортируются по sort()
# s = ["Виталий", "Сергей", "Александр", "Анна"]
# print(s)
# # ['Виталий', 'Сергей', 'Александр', 'Анна']
# s.sort()
# print(s)
# ['Александр', 'Анна', 'Виталий', 'Сергей'] - слова выводятся в алфавитном порядке
# s.sort(reverse=True)  # Если reverse со значением True - слова отсортировались в обратном порядке,
# # то есть алфавитный порядок только наоборот
# print(s)
# ['Сергей', 'Виталий', 'Анна', 'Александр']
# Еще с sort() можно написать функцию и добавить другие параметры
# print(len("Александр"))  # возвращает, что в слове Александр - 9 символов
# s.sort(reverse=True, key=len)  # от большего к меньшему
# print(s)
# ['Александр', 'Виталий', 'Сергей', 'Анна'] - Теперь, основываясь на длине слов, самое длинное слово
# у нас в начале, а самое короткое в конце
# s.sort(key=len)  # без reverse по (key=len) наоборот, самое короткое в начале, самое длинное в конце
# print(s)


# Кроме метода sort(), в питоне есть еще встроенная функция, которая называется (sorted())
# a = [1, 5, 3, 2, 3, 4, 3, 5]
# print(a)
# n = a.sort()  # по возрастанию, он изменяет исходный список!
# print(sorted(a))
# print(n)  # None - метод sort() нам ничего не возвращает
# [1, 5, 3, 2, 3, 4, 3, 5]
# [1, 5, 3, 2, 3, 4, 3, 5]
# n = sorted(a, reverse=True)  # можно сохранить в переменную и вывести по убыванию, потому что reverse=True,
# # он не изменяет исходный список!
# print("n = ", n)
# print(a)
# n =  [5, 5, 4, 3, 3, 3, 2, 1]
# [1, 5, 3, 2, 3, 4, 3, 5]


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# Если a = b, то при добавлении к a, значения будут добавляться и к b
# Пример ниже
# Чтобы так не происходило, нужно использовать метод copy()
# a = [1, 2, 3]
# b = a
# print("a = ", a)
# print("b = ", b)
# a.append(20)
# b.append(120)
# a = [1, 2, 3]
# b = [1, 2, 3]
# print("a = ", a)
# print("b = ", b)
# a =  [1, 2, 3, 20, 120]
# b =  [1, 2, 3, 20, 120]


# Метод - COPY - copy()
# a = [1, 2, 3]
# b = a.copy()  # возвращает копию списка
# print("a = ", a)
# print("b = ", b)
# a.append(20)
# b.append(120)
# print("a = ", id(a))
# print("b = ", id(b))
# a =  [1, 2, 3, 20]
# b =  [1, 2, 3, 120]
# print("a = ", a, id(a))
# print("b = ", b, id(b))
# a =  3107995046272
# b =  3107995048320
# a =  [1, 2, 3, 20] 3107995046272
# b =  [1, 2, 3, 120] 3107995048320


# ГЕНЕРАЦИЯ СЛУЧАЙНЫХ ДАННЫХ
# их нельзя использовать просто так, нужно импортировать модуль random
# print()
# print(random.random())  # от 0 до 1 (не включая) - 0.517323349343888

# Теперь хотим получить целочисленное значение (случайных чисел)
# print(random.randint(0, 9))  # от 0 до 9 (включительно)

# Если хотим указать разные параметры диапазона, нужно использовать randrange()!
# print(random.randint(12, 9))  # ValueError: empty range in randrange(12, 10)
# print(random.randrange(9))  # randrange(start, stop, step) randrange(2, 9) - это значит,
# что берем диапазон от 0 до 9 (не включая 9)
# print(random.randrange(2, 9, 2))

# Можно генерировать не только целые числа, но и вещественные тоже:
# print(random.uniform(10.5, 25.5))  # 20.95334292794418
# print(round(random.uniform(10.5, 25.5), 2)) # 17.01


# RANDOM МОЖЕТ РАБОТАТЬ СО СПИСКАМИ ***
# Random работает со строковыми значениями
# city_list = ["Москва", "Новосибирск", "Воронеж", "Сочи", "Екатеринбург"]
# Можно выбрать 1 элемент из списка
# print(random.choice(city_list))  # 1 элемент - Сочи
# Но в choices можно указать параметр K - в котором можно указать количество выбора!
# print(random.choices(city_list, k=3))  # к примеру, нам нужно выбрать 3 города

# Random работает и с целочисленными значениями
# s = [20, 30, 40, 50, 60, 70, 80, 90]
# print(random.choice(s))  # 1 элемент - 30
# Екатеринбург
# ['Воронеж', 'Москва', 'Воронеж']
# 50
# print(random.choices(s, k=3))
# [50, 60, 40]

# random.shuffle(s) # [50, 40, 70, 90, 30, 20, 80, 60] - Перемешиваем случайным образом
# print(s)


# mas = [0 for i in range(10)]
# print(mas)  # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# mas = [input("->") for i in range(10)]
# print(mas)


# mas = [random.randint(0, 100) for i in range(10)]
# mas = ["a", "b", "c"]  # не работают sum
# print(mas)  # [69, 66, 61, 27, 96, 21, 20, 81, 58, 69]
# print(len(mas))
# print(min(mas))
# print(max(mas))
# print(sum(mas))  # сумма всех элементов в списке
# ['a', 'b', 'c']
# 3
# a
# c

# Получаем сумму чисел списка:
# mas = [random.randint(0, 100) for i in range(10)]
# print(sum(mas))
# s = 0
# for i in mas:
#     s += i  # s = s + i  # s = 0 + "a"
# print(s)
# 557
# 557


# Задача:
# Заполнить список из 10 элементов случайных чисел. Найти максимальный элемент списка
# и переместить его в начало списка.
# mas = [random.randint(0, 100) for i in range(10)]
# print(mas)
# print(max(mas))
# mas.insert(0, max(mas))
# print(mas)


# Отлично, но максимальный элемент еще нужно удалить с текущей позиции
# Поэтому, вначале мы сохраняем наше максим. значение в переменную,
# далее удаляем ее из списка, а потом добавляем на первую позицию в нашем списке,
# сдвигая другие цифры вправо
# mas = [random.randint(0, 100) for i in range(10)]
# print(mas)
# a = max(mas)  # Сохраняем макс значение в переменной a
# print(a)
# mas.remove(a)
# print(mas)
# mas.insert(0, a)
# print(mas)
# [74, 37, 67, 14, 9, 71, 93, 16, 29, 72]
# 93
# [74, 37, 67, 14, 9, 71, 16, 29, 72]
# [93, 74, 37, 67, 14, 9, 71, 16, 29, 72]


# Задача:
# Заполнить список из 10 элементов случайными числами как положительными, так и отрицательными.
# Изменить этот список таким образом, чтобы все отрицательные элементы оказались в конце.
# mas = [random.randint(-20, 20) for i in range(10)]
# print(mas)
# mas.sort(reverse=True)  # [19, 15, 15, 12, 10, -8, -8, -12, -16, -18] от большего к меньшему
# print(mas)


# Задача:
# Заполнить список из 10 элементов случайными числами. Удалить все элементы, расположенные перед
# минимальным элементом списка.
# mas = [random.randint(0, 100) for i in range(10)]
# print(mas)
# print(min(mas))
# index = mas.index(min(mas))
# print(index)
# print(mas[index:])  # какие нужно оставить! то есть показать числа из списка от index: -
# и до конца списка через срез *** Это Круть!
# Или можно по другому - путем удаления с помощью del!
# del mas[:index]  # то есть здесь удаление у нас идет от начала списка и до позиции индекса!
# print(mas)


# ----------------------------------------------------------------
# Урок №7 Python от 17.01.2024
# Урок №1
# ----------------------------------

# lst = [2]
# if lst:
#     print("Список не пустой")

# lst = []
# if len(lst) == 0:
#     print("Список пустой")

# lst = []
# if not lst:
#     print("Список пустой")
# print(bool(lst))  # False


# Здесь мы проверяем, существует ли элемент в списке
# lst = [5, 5, 8, 9, 7]
# print(5 not in lst)  # False - вопрос - Не существует ли цифра 5 в списке

# lst = [5, 5, 8, 9, 7]
# print(5 in lst)  # True - вопрос - Существует ли цифра 5 в списке


# Задача:
# Большое условие
# Два списка целых заполняются случайными числами. Необходимо:
# Сделать 3 список, содержащий элементы обоих списков.
# Сделать 3 список, содержащий элементы обоих списков без повторений.
# Сделать 3 список, содержащий элементы общие для двух списков.
# Сделать 3 список, содержащий только мин и макс значение каждого из списков.

# n1 = int(input("Введите размер первого списка: "))
# n2 = int(input("Введите размер второго списка: "))
# a = [random.randint(0, 10) for i in range(n1)]
# b = [random.randint(0, 10) for j in range(n2)]
# print("Первый список: ", a)
# print("Второй список: ", b)
# c = a + b
# print(c)
# c = []
# for i in range(len(a)):
#     if a[i] not in c:
#         c.append(a[i])
# for i in range(len(b)):
#     if b[i] not in c:
#         c.append(b[i])
# print("Элементы обоих списков без повторений: ", c)

# Сделать 3 список, содержащий элементы общие для двух списков.
# c = []
# for i in range(len(a)):
#     if a[i] in b and a[i] not in c:
#         c.append(a[i])
# print(c)

# Сделать 3 список, содержащий только мин и макс значение каждого из списков.
# c = [min(a), min(b), max(a), max(b)]
# print(c)


# МАТРИЦА В ПИТОНЕ
# Массив:
# m = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],  # нам нужна цифра 7 из этого списка
#     [9, 10, 11, 12]
# ]
# print(m)
# print(len(m))
# print(m[1][2])  # получили 7
# print()

# Попробуем вывести в виде таблицы
# Первый вариант с помощью range и длины списка
# for row in range(len(m)):
#     # print(row)  # попали индексы
#     # print(m[row])  # набор вложенных списков
#     for col in range(len(m[row])):
#         print(m[row][col], end="\t")
#     print()
# print()

# Второй вариант работа через имя нашего массива
# for row in m:
#     # print(row)
#     for x in row:
#         print(x, end="\t")
#     print()


# Таблица из нулей:
# w, h = 5, 3
# matrix = [[0 for x in range(w)] for y in range(h)]
# print(matrix)
# for row in matrix:
#     # print(row)
#     for x in row:
#         print(x, end="\t")
#     print()


# Расписываем подробнее, что такое - matrix = [[0 for x in range(w)] for y in range(h)]
# w, h = 5, 3
# matrix = [[0 for x in range(w)] for y in range(h)]
# print(matrix)  # [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
# # РАВНО =
# matrix = []
# for y in range(h):
#     new_row = []
#     for x in range(w):
#         new_row.append(0)
#     matrix.append(new_row)


# Задача:
# for x, y in [[1, 2], [3, 4], [5, 6], [7, 8]]:
#     print(x, "+", y, "=", x + y)
# 1 + 2 = 3
# 3 + 4 = 7
# 5 + 6 = 11
# 7 + 8 = 15


# Задача:
# Списки в виде таблицы
# w, h = 5, 3
# matrix = [[random.randint(1, 100) for x in range(w)] for y in range(h)]
# print(matrix)
# for row in matrix:
#     # print(row)
#     for x in row:
#         print(x, end="\t\t")
#     print()


# Задача:
# Написать программу, которая случайным образом заполняет двумерный список
# размерностью 3х4 цифрами от -20 до 10. Необходимо найти количество отрицательных элементов.
# w, h = 3, 4
# count = 0
# matrix = [[random.randint(-20, 20) for x in range(w)] for y in range(h)]
# for row in matrix:
#     # print(row)
#     for x in row:
#         print(x, end="\t\t")
#         if x < 0:
#             count += 1
#     print()
# print("Количество отрицательных элементов: ", count)


# Modules
# МОДУЛИ:

# print(math.sqrt(4))  # 2.0 - корень квадратный
# print(math.pi)  # 3.141592653589793
# print(math.ceil(3.2))  # 4 - потолок - округление в сторону увеличения
# print(math.floor(3.8))  # 3 - пол - округление в сторону уменьшения

# import math as m
# Теперь у нас модуль math идет под именем m
# print(m.ceil(3.2))
# print(m.floor(3.8))


# from math import ceil, floor
# print(ceil(3.2))
# print(floor(3.8))

# from math import *
# print(ceil(3.2))
# print(floor(3.8))


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Задача:
# Пользователь вводит радиус окружности. Найдите длину окружности.
# Умножьте число пи на два радиуса. O — искомая длина окружности. π (пи) — константа,
# равная 3,14. r — радиус окружности.
# from math import pi
# radius = int(input("Введите радиус окружности: "))
# print("Длина окружности: ", round(2 * pi * radius, 2))
# Введите радиус окружности: 5
# Длина окружности: 31.42


# Задача:
# Дано два числа a и b. Выведите гипотенузу треугольника с заданными катетами.
# Квадрат длины гипотенузы равен сумме квадратов длин катетов.
# from math import sqrt
# a = int(input("Введите первый катет: "))
# b = int(input("Введите второй катет: "))
# print(round(sqrt(a ** 2 + b ** 2), 2))


# locale.setlocale(locale.LC_ALL, "ru")  # Россия
# locale.setlocale(locale.LC_ALL, "bel")  # Беларусь

# seconds = time.time()
# print(seconds)  # 1705512506.5986948
# print(time.ctime())  # Wed Jan 17 20:28:26 2024
# print(time.ctime(551254))  # Wed Jan  7 12:07:34 1970
# res = time.localtime()
# print(res)  # Здесь появятся атрибуты - time.struct_time(tm_year=2024, tm_mon=1, tm_mday=17, tm_hour=20,
# # # tm_min=32, tm_sec=53, tm_wday=2, tm_yday=17, tm_isdst=0)
# print(res.tm_mday, ".0", res.tm_mon, ".", res.tm_year, sep="")  # 17.01.2024

# print(time.strftime("Today is %B %d, %Y"))  # Today is January 17, 2024
# print(time.strftime("%d/%m/%Y, %H:%M:%S"))  # 17/01/2024, 20:46:10

# print(time.strftime("Сегодня is %B %d, %Y"))  # Сегодня is Январь 17, 2024
# print(time.strftime("%B %d, %Y", time.localtime()))  # Январь 17, 2024
# print(time.strftime("%d/%m/%Y, %H:%M:%S"))  # 17/01/2024, 20:46:10

# Беларусь
# Сегодня is студзень 17, 2024
# студзень 17, 2024

# pause = 5
# print("Программа запущена")
# time.sleep(pause)
# print(pause, "секунд")


# start = time.time()
# start = time.monotonic()
# time.sleep(5)
# finish = time.monotonic()  # 5.0
# res = finish - start
# print(res)
# 5.000275135040283


# НОВАЯ ТЕМА:
# ФУНКЦИИ *** ФУНКЦИИ *** ФУНКЦИИ ***
# def hello(name):
#     print("Hello", name)
#
#
# hello("Irina")
# hello("Ivan")


# def get_sum(a, b):
#     return a + b
#     print("Hello")
#
#
# x = 2
# y = 5
# res = get_sum(x, y)
# print(res ** 2)
# n = 6
# m = 3
# get_sum(n, m)
# get_sum('abc', 'def')


# ----------------------------------------------------------------
# Урок №8 Python от 22.01.2024
# Урок №1
# ----------------------------------

# ПРОДОЛЖАЕМ ТЕМУ
# ФУНКЦИИ *** ФУНКЦИИ *** ФУНКЦИИ ***

# def get_sum(a, b):
#     return a + b
#     # print("Hello")
#
#
# x = 2
# y = 5
# res = get_sum(x, y)
# print(res ** 2)


# Задача:
# Определение максимального значения с помощью функции
# def maximum(one, two):
#     if one > two:
#         return one
#     else:
#         return two
#
#
# m = maximum(9, 6)
# print(m)


# Задача:
# Написать функцию нахождения разности, если a > b, или сумму, если a < b
# a и b - вводятся с клавиатуры
# Вначале задаем формулу в функции
# def foo(a, b):
#     if a > b:
#         return a - b
#     else:
#         return a + b
#
#
# c = foo(int(input()), int(input()))
# print(c)
# # или
# c = foo(int(input("Введите первое число: ")), int(input("Введите второе число: ")))
# print(c)


# Задача:
# Вывести куб всех чисел от 1 до 10 (функция, которая принимает один параметр и возвращает значение):
# def cube(a):
#     return a * a * a
#
#
# for i in range(1, 11):
#     print(i, "в кубе = ", cube(i))


# Задача:
# Напишите функцию change(lst), которая принимает список и меняет местами его первый и последний элемент.
# В исходном списке минимум 2 элемента.

# Вариант №1:
# def change(lst):
#     lst[0], lst[-1] = lst[-1], lst[0]
#     return lst
#
#
# print(change([1, 2, 3]))
# print(change([9, 12, 33, 54, 105]))
# print(change(["с", "л", "о", "н"]))


# Вариант №2:
# def change(lst):
#     # lst[0], lst[-1] = lst[-1], lst[0]
#     start = lst.pop()  # по умолчанию pop() удаляет элемент по последнему индексу
#     end = lst.pop(0)  # с указанием pop(0) удаляет элемент по заданному индексу
#     lst.append(end)  # добавим в конец списка
#     lst.insert(0, start)  # добавим теперь в начало списка по позиции и значению
#     # return start
#     # return end
#     return lst
#
#
# print(change([1, 2, 3]))
# print(change([9, 12, 33, 54, 105]))
# print(change(["с", "л", "о", "н"]))


# Вариант №3:
# Губарьков Денис Юрьевич (он молодец)
# lst_1 = [1, 2, 3]
# lst_2 = [9, 12, 33, 54, 105]
# lst_3 = ["c", "л", "о", "н"]
# def change(lst):
#     res = []
#     for i in range(len(lst)):
#         if i == 0:
#             res.append(lst[-1])
#         elif i == len(lst) - 1:
#             res.append(lst[0])
#         else:
#             res.append(lst[i])
#     return res
#
#
# print("Результат:")
# print(change(lst_1))
# print(change(lst_2))
# print(change(lst_3))


# Задача:
# Функции в питоне возвращают значения True и False
# def func(x, y):
#     if x > y:
#         return True
#     else:
#         return False
#
#
# print(func(10, 5))  # True
# print(func(5, 10))  # False
# a = 5
# b = 10
# if func(a, b):
#     print("Первое число больше второго")
# else:
#     print("Второе число больше первого")


# Задача:
# Проверяем надежность пароля, вводимого пользователем с клавиатуры
# def check_password(password):
#     has_upper = False  # задаем по умолчанию
#     has_lower = False
#     has_num = False
#
#     for ch in password:  # '1' строковые значения
#         if "A" <= ch <= "Z":  # 65 <= 97 <= 90
#             has_upper = True
#         if "a" <= ch <= "z":
#             has_lower = True
#         if "0" <= ch <= "9":
#             has_num = True
#
#     if len(password) >= 8 and has_upper and has_lower and has_num:
#         return True
#     return False
#
#
# p = input("Введите пароль: ")
# if check_password(p):  # если будет True
#     print("Это надежный пароль")
# else:
#     print("Это ненадежный пароль")


# ТИПЫ АРГУМЕНТОВ (2 вида):
# Позиционные и нумерованные аргументы
# def get_sum(a, b, c=0, d=1):  # писать нужно только справа налево
#     return a + b + c + d
#
#
# print(get_sum(1, 5, 2, 7))
# print(get_sum(1, 5, 2))  # 9 (d=1)
# print(get_sum(1, 5))  # 7 (c=0, d=1)
# print(get_sum(1, 5, d=2))  # 8 - именованный параметр


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# Задача:
# Написать функцию, которая имеет количество символов = 20 и символ "-" в качестве аргументов по умолчанию
# и выводит на экран набор произвольных символов заданной длины.
# def set_param(c=20, s="-"):  # 20 символов "-" минусов
#     print(s * c)
#
#
# set_param()
# set_param(7)  # 7 минусов
# set_param(10, "*")
# set_param(s="#")
# a = "#"
# set_param(s=a)


# Задача:
# Написать функцию, принимающую целое число и вычисляющую по умолчанию сумму его четных цифр.
# С возможностью вычисления суммы нечетных цифр.
# def digit_sum(n, even=True):  # 9874023
#     s = 0
#     while n > 0:
#         cur_digit = n % 10
#         if even and cur_digit % 2 == 0:
#             s += cur_digit
#         if not even and cur_digit % 2 != 0:
#             s += cur_digit
#         n //= 10
#     return s
#
#
# print("Сумма четных цифр: ")
# print(digit_sum(9874023))
# print(digit_sum(38271))
# print(digit_sum(123456789))
#
# print("Сумма нечетных цифр: ")
# print(digit_sum(9874023, even=False))
# print(digit_sum(38271, even=False))
# print(digit_sum(123456789, even=False))


# def display_info(name, age):
#     print("Name: ", name, "\nAge", age)
#
#
# display_info("Ira", 23)
# display_info(23, "Ira")  # попадет неправильно
# display_info(age=23, name="Ira")  # так попадет правильно
# display_info("Igor", age=23, name="Ira")  # TypeError: display_info() got multiple values for argument 'name'


# a = "Hello"
# b = "Hello"
# # b = b + "_new"
# print(a, id(a))
# print(b, id(b))
# print(a == b)  # True
# print(a is b)  # True
# lst1 = [1, 2, 3]
# lst2 = [1, 2, 3]
# print(lst1, id(lst1))
# print(lst2, id(lst2))
# print(lst1 == lst2)  # True
# print(lst1 is lst2)  # False


# НОВАЯ ТЕМА:
# Изменяемые объекты - list (списки), есть методы, с помощью которых мы изменяем
# Неизменяемые объекты - int, float, bool, str, tuple

# lst1 = [1, 2, 3]
# print(lst1, id(lst1))
# lst1.append(4)
# print(lst1, id(lst1))


# СЛЕДУЮЩИЙ ТИП ДАННЫХ - КОРТЕЖ
# Tuple - Кортеж
# lst = [10, 20, 30]  # - изменяемый тип данных
# tpl = (10, 20, 30)  # - неизменяемый тип данных
# print(lst)
# print(tpl)
# print(lst.__sizeof__())  # 72
# print(tpl.__sizeof__())  # 48


# a = "red", "blue", "green"  # ("red", "blue", "green")
# print(a)
# print(type(a))  # <class 'tuple'>

# a = 5,  # <class 'tuple'>
# print(a)
# print(type(a))  # <class 'int'>

# a = tuple()  # ()
# print(a)
# print(type(a))  # <class 'tuple'>

# a = tuple("Hello")  # ('H', 'e', 'l', 'l', 'o')
# print(a)
# print(type(a))

# a = tuple([1, 5, 8, 9, 6])  # (1, 5, 8, 9, 6)
# print(a)
# print(type(a))
# print(a[0])  # 1
# print(a[1:3])  # (5, 8)
# a[2] = 12  # TypeError: 'tuple' object does not support item assignment


# ----------------------------------------------------------------
# Урок №9 Python от 24.01.2024
# Урок №1
# ----------------------------------

# ГЕНЕРАТОР СПИСКА
# Как мы до этого создавали список
# s = [i for i in range(5)]
# print(s)  # [0, 1, 2, 3, 4]

# s = (i for i in range(5))  # Если просто поменять квадратные скобки на круглые, то так не сработает
# print(s)  # <generator object <genexpr> at 0x000001A54FB44B80>

# s = tuple([i for i in range(5)])  # Но здесь мы поместили [] в круглые и написали слово tuple
# print(s)  # (0, 1, 2, 3, 4) - И получили кортеж

# s = tuple(input("-> ") for i in range(5))
# print(s)

# from random import randint
# s = tuple(randint(20, 40) for i in range(5))
# print(s)  # (26, 22, 31, 23, 37)


# Задача:
# Заполните кортеж из 10 элементов степенями двойки от 1 до 12
# res = tuple(2 ** i for i in range(1, 13))
# print(res)  # (2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096)


# t1 = tuple("Hello")
# t2 = tuple("world")
# t3 = t1 + t2
# print(t3)  # ('H', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')

# t1 = tuple("Hello")
# t2 = tuple("world")
# t3 = t1 + t2
# print(t3 * 2)  # ('H', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd', 'H', 'e', 'l', 'l', 'o', 'w',
# 'o', 'r', 'l', 'd')


# Методы у кортежей
# count & index
# t1 = tuple("Hello")
# t2 = tuple("world")
# t3 = t1 + t2
# print(t3.count('l'))  # 3
# print(t3.count('a'))  # 0
# print(t3.index('l'))  # 2 - первое вхождение буквы l
# print(t3.index('l', 3))
# print(t3.index(ch))  # ValueError: tuple.index(x): x not in tuple

# ch = "a"
# try:
#     print(t3.index(ch))
# except ValueError:
#     print("Такого символа в кортеже не существует")
# 3
# 0
# 2
# Такого символа в кортеже не существует


# t1 = tuple("Hello")
# t2 = tuple("world")
# t3 = t1 + t2
# print(t3)
#
# for i in t3:
#     print(i, end=" ")
# ('H', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')
# H e l l o w o r l d


# Задача:
# Функция slicer() на вход принимает кортеж и случайный элемент. Требуется вернуть новый кортеж,
# начинающийся с первого появления элемента в нем и заканчивающийся вторым его появлением включительно. Если
# элемента нет, вернуть пустой кортеж. Если элемент только 1 раз, то вернуть кортеж,
# который начинается с него и идет до конца исходного.
# def slicer(tpl, el):
#     if el in tpl:
#         if tpl.count(el) > 1:
#             first = tpl.index(el)  # 1
#             second = tpl.index(el, first + 1)  # 4 или second = tpl.index(el, first + 1) + 1
#             return tpl[first:second + 1]
#         else:
#             a = tpl.index(el)
#             return tpl[a:]  # tpl[tpl.index(el):]
#     else:
#         return tuple()  # или просто ()
#
#
# print(slicer((1, 2, 3), 8))
# print(slicer((1, 8, 3, 4, 8, 8, 9, 2), 8))
# print(slicer((1, 2, 8, 5, 1, 2, 9), 8))


# Задача:
# Заполните один кортеж десятью случайными числами от 0 о 5 включительно. Также заполните
# второй кортеж числами от -5 до 0. Для этого напишите 1 функцию. Объедините два кортежа с помощью (+),
# создав третий кортеж. С помощью (count) определите в нем количество нулей. Выведите на экран.
# from random import randint
#
#
# def ran(a, b):
#     return tuple(randint(a, b) for i in range(10))  # здесь десятка - это количество элементов
#
#
# def foo(a, b):
#     res = a + b
#     c = res.count(0)
#     return res, c
#
#
# tpl1 = ran(0, 5)
# print(tpl1)
# tpl2 = ran(-5, 0)
# print(tpl2)
# print(foo(tpl1, tpl1))


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# t = (10, 11, [1, 2, 3], [4, 5, 6], ["hello", "world"])
# print(t, id(t))
# t[4][0] = "new"  # по 4 индексу, к значению там по 0 - ['new', 'world']
# t[4].append('hi')  # ['new', 'world', 'hi']
# print(t, id(t))


# Распаковка кортежей
# t = (1, 2, 3)
# x = t[0]
# y = t[1]
# z = t[2]
# print(x)
# print(y)
# print(z)

# t = (1, 2, 3)
# x = t[0]
# y = t[1]
# z = t[2]
# x, y, z = t  # распаковка кортежа - 1 2 3
# print(x, y, z)


# def get_user():
#     name = "Tom"
#     age = 22
#     is_married = False
#     return name, age, is_married
#
#
# user = get_user()
# # first_name, year, married = user
# first_name, year, married = get_user()
# print(first_name, year, married)
# print(user)
# print(user[0])
# print(user[1])
# print(user[2])


# def func(lst):
#     return sum(lst), len(lst)
#
#
# a, b = func([2, 9, 6, 5, 5, 2, 25, 5, 5, 5, 5, 5])
# print("Сумма: ", a)
# print("Количество: ", b)
# # Сумма:  79
# # Количество:  12


# for i in 1, 2, 5, 8, 9, 6, 3:  # кортеж
#     print(i)
#
# for i in "red", "blue", "green":   # кортеж
#     print(i)
#
# for i in "red":   # кортеж
#     print(i)


# lst = [1, 2, 3, 4, 5, 6]
# print(lst)
# tpl = tuple(lst)
# print(tpl)
# lst1 = list(tpl)
# print(lst1)


# countries = (
#     ("Германия", 80.2, (("Берлин", 3.326), ("Гамбург", 1.718))),
#     ("Франция", 80.2, (("Париж", 3.326), ("Марсель", 1.718)))
# )
# print(countries)
#
# for country in countries:
#     country_name, country_population, cities = country
#     # print(country)
#     print("\nСтрана: ", country_name, "население = ", country_population, sep="")
#     for city in cities:
#         city_name, city_population = city
#         print("\tГород: ", city_name, ", население = ", city_population, sep="")


# НОВАЯ ТЕМА
# МНОЖЕСТВА SET
# SET - изменяемый тип данных, неупорядоченная коллекция
# расставляет элементы в рандомном (случайном) порядке
# содержит только уникальные элементы

# s = {'banana', 'apple', 'orange', 'apple', 'banana'}
# print(s)
# print(len(s))  # 3
# print(type(s))  # <class 'set'>
# print(s[0])  # TypeError: 'set' object is not subscriptable
# не может индексироваться (не может быть обозначена индексом)
# for i in s:
#     print(i)


# s = ['banana', 'apple', 'orange', 'apple', 'banana']
# print(s)
# st = set(s)  # Запиши мне множество ! с помощью set
# print(st)
# s1 = list(st)  # верника мне назад список с помощью list
# print(s1)


# a = []
# print(type(a))  # <class 'list'>
# a = {}
# print(type(a))  # <class 'dict'>
# a = ()
# print(type(a))  # <class 'tuple'>

# a = set()
# print(type(a))  # <class 'set'>
# print(a)  # set()

# a = set("Hello")  # <class 'set'>
# print(type(a))  # {'H', 'e', 'o', 'l'}
# print(a)


# Генератор Множеств - set
# s = {i for i in range(5)}  # {0, 1, 2, 3, 4}
# print(s)

# s = {i * i for i in range(15)}  # {0, 1, 64, 121, 4, 36, 100, 196, 9, 169, 16, 49, 81, 144, 25}
# print(s)

# Можно и с random и с клавиатуры (input)
# s = {input("-> ") for i in range(5)}  # {'5', '2', '8'}
# print(s)


# Методы множеств - SET:
# a = set("Hello")
# print(a)
# print('o' in a)  # True
# print('a' in a)  # False
# a.add("a")  # добавляет букву a, рандомно
# print(a)
# a.remove("e")
# print(a)
# el = "el"
# if el in a:
#     a.remove(el)  # KeyError
# print(a)
# a.discard("o")  # указываем, какой элемент хотим удалить
# print(a)
# a.pop()
# print(a)
# a.clear()
# print(a)  # set()


# ----------------------------------------------------------------
# Урок №10 Python от 29.01.2024
# Урок №1
# ----------------------------------

# ЗАРЕГАЙСЯ НА ГИТХАБ ***

# print("Hello World")
# print("Hello World")

# print("Данные для добавления на GitHub")
# Ссылку на домашнее задание прислать
# Новое


# ----------------------------------------------------------------
# Урок №11 Python от 31.01.2024
# Урок №1
# ----------------------------------

# Генератор списков
# s = ['ab_1', 'ac_2', 'bc_1', 'bc_2']
# a = [x for x in s]
# print(a)

# s = ['ab_1', 'ac_2', 'bc_1', 'bc_2']
# a = [x for x in s if 'a' not in x]  # если 'a' нет не в самом списке, а нет в значении x
# print(a)

# Тернарное выражение q = True if условие else False
# Есть условие. Если выполняется условие и становится True, выполняется блок, который находится слева.
# Если не выполняется условие, то есть False, выполняется блок, который справа
# Вариант №1
# s = ['ab_1', 'ac_2', 'bc_1', 'bc_2']
# a = ['A' if x[0] == 'a' else 'B' for x in s]
# Здесь мы перебираем не сами значения х, а внутри каждый элемент по индексу 0
# Далее с помощью конкатенации, мы выводим 'A' на первом месте и присоединяем остаток значения от [1]:,
# то есть выводим все остальное
# a = ['A' + x[1:] if x[0] == 'a' else 'B' + x[1:] for x in s]  # ['Ab_1', 'Ac_2', 'Bc_1', 'Bc_2']
# a = ['A' + x[1:] if x[0] == 'a' else 'B' + x[1:] for x in s if x[1] == 'c']  # - Здесь добавим
# еще условие, чтобы выводились значения, у которых x[1] по 1 индексу равен с
# a = {'A' + x[1:] if x[0] == 'a' else 'B' + x[1:] for x in s if x[1] == 'c'}  # Set - в рамдомном порядке
# a = ['A' + x[1:] if x[0] == 'a' else 'B' + x[1:] for x in s if x[1] == 'c']
# print(a)

# Тернарное выражение q = True if условие else False
# Вариант №2
# lst = []
# for x in s:
#     if x[1] == 'c':
#         if x[0] == 'a':
#             lst.append('A' + x[1:])
#         else:
#             lst.append('B' + x[1:])
# print(lst)
# Получилось:
# ['Ac_2', 'Bc_1', 'Bc_2']
# ['Ac_2', 'Bc_1', 'Bc_2']


# Вариант №3
# s = ['ab_1', 'ac_2', 'bc_1', 'bc_2']
# print(['A' + x[1:] if x[0] == 'a' else 'B' + x[1:] for x in s if x[1] == 'c'])

# Вариант №4
# s = ['ab_1', 'ac_2', 'bc_1', 'bc_2']
# print(['A' + x[1:] if x[0] == 'a' else 'B' + x[1:] for x in ['ab_1', 'ac_2', 'bc_1', 'bc_2'] if x[1] == 'c'])
# Получилось:
# ['Ac_2', 'Bc_1', 'Bc_2']
# ['Ac_2', 'Bc_1', 'Bc_2']

# С кортежем тоже работает:
# print(tuple('A' + x[1:] if x[0] == 'a' else 'B' + x[1:] for x in ['ab_1', 'ac_2', 'bc_1', 'bc_2'] if x[1] == 'c'))


# SET - МНОЖЕСТВА
# Это изменяемый тип данных (set.add, set.remove, set.pop, set.discard. set.clear)
# то есть у нас есть методы просто для добавления и удаления элементов
# Еще есть методы для проведения операций с множествами:
# Папка № 10
# a = {0, 1, 2, 3}
# b = {4, 3, 2, 1}

# c = a | b  # объединение множеств (через оператор ровный слеш)
# print(c)  # добавилась только 4 - {0, 1, 2, 3, 4}
# еще такой же вариант объединения - это a |= b
# a |= b
# c = a.union(b)
# print(a)  # {0, 1, 2, 3, 4}

# c = a & b  # пересечение элементов {1, 2, 3} (через оператор амперсанд)
# a &= b  # {1, 2, 3} - Элементы повторяются в обоих списках
# c = a.intersection(b)
# print(a)

# c = a - b  # уникальный элемент (через оператор минус) - Элементы не повторяются
# a -= b
# c = a.difference(b)
# print(c)

# c = a ^ b  # {0, 4} элементы, которые входят и в [a] и [b], но не в оба одновременно
# # (через оператор домик - циркумфлекс)
# a ^= b
# c = a.symmetric_difference(b)
# print(c)


# Задача:
# Дан набор множеств. Найти количество уникальных элементов. Мин и Макс элементы среди них.
# s1 = {1, 2}
# s2 = {3}
# s3 = {4, 5}
# s4 = {3, 2, 6}
# s5 = {6}
# s6 = {7, 8}
# s7 = {9, 8}
# s = s1.union(s2, s3, s4, s5, s6, s7)  # {1, 2, 3, 4, 5, 6, 7, 8, 9}
# s = s1 | s2 | s3 | s4 | s5 | s6 | s7
# print(s)
# print(len(s))  # кол-во уникальных элементов, это просто кол-во элементов в полученном множестве
# print(min(s))
# print(max(s))


# Задача:
# Найдите общие буквы в двух разных строках:
# Пересечение элементов (через оператор амперсанд)
# s1 = "Hello"
# s2 = "How are you"
# s = set(s1) & set(s2)
# print(s)
# for i in s:
#     print(i, end="")

# Задача:
# Найдите все буквы в первой строчке, которые отсутствуют во второй:
# Ищем уникальные элементы (через оператор минус)
# s1 = "Python"
# s2 = "Programming language"
# s = set(s1) - set(s2)
# print(s)
# for i in s:
#     print(i, end=" ")

# Еще вариант:
# c1 = set("Python")
# c2 = set("Programming language")
# print(c1-c2)


# Задача:
# drawing = {'Марина', 'Женя', 'Света'}
# music = {'Костя', 'Женя', 'Илья'}
# one_hobby = drawing ^ music  # домик - те, кто есть в обоих списках, но не одновременно, т.е не повторяются
# print(one_hobby)
# both_hobby = drawing & music  # амперсанд - и там и там, в 2-х кружках {'Женя'}
# print(both_hobby)
# drawing = drawing - both_hobby  # Женя решил бросить рисование
# print(drawing)


# a = {0, 1, 2, 3, 4}
# b = {3, 2, 1}
# print(a <= b)  # False - a.issubset(b) - возвращает True, если а - подмножество b
# print(a >= b)  # True - a.issubset(b) - возвращает True, если b - подмножество a
# print(a < b)  # False - эквивалентно a <= b and a != b
# print(a > b)  # True - эквивалентно a >= b and a != b


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Список list[] - это изменяемый тип данных
# Кортеж tuple() - это неизменяемый тип данных
# Множество set{} - это (рандомно), но изменяемый тип данных c уникальными значениями
# Еще есть frozenset([]) - неизменяемый, чтобы сохранить данные в set
# Словарь dict{} - ключи не повторяются, это изменяемый тип данных, но как и set неупорядоченный


# FROZEN SET
# s = frozenset([1, 2, 3, 4, 5, 6])  # Это множество изменить нельзя
# print(s)  # frozenset({1, 2, 3, 4, 5, 6})

# s = frozenset("Hello")
# print(s)  # frozenset({'H', 'e', 'o', 'l'})


# НОВАЯ ТЕМА
# dictionary словарь
# DICT

# s = [1, 2, 3]
# d = {"one": 1, "two": 2, "three": 3}  # ключи и значения
# print(s)  # [1, 2, 3] - список
# print(d)  # {'one': 1, 'two': 2, 'three': 3} - словарь
# print(s[1])  # 2 - в списке мы обращаемся по индексу к элементу
# print(d["two"])  # 2 - в словаре мы обращаемся по ключу к элементу

# s1 = ["one", "two", "three"]
# d1 = {1: "one", 2: "two", 3: "three"}
# print(s1)  # ['one', 'two', 'three']
# print(d1)  # {1: 'one', 2: 'two', 3: 'three'}
# print(s1[1])
# print(d1[2])  # здесь ставим ключ (2)


# ЗНАЧЕНИЯМИ могут быть ВСЕ типы данных!
# A КЛЮЧАМИ - многие, но не все - нельзя "Списки[]" и "Множества{}" (то есть изменяемые типы данных)

# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1}  # Здесь все корректно
# # {0: 'test', 'one': 45, (1, 2.3): 'Кортеж', True: 1}
# print(d)

# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1, [2, 3, 6, 7]: 35}  # TypeError: на последнем элементе,
# # на списке - unhashable type: 'list'
# print(d)
# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1, {2, 3, 6, 7}: 35}  # TypeError: на последнем элементе,
# # на списке - unhashable type: 'set'
# print(d)

# Ключами нельзя делать "Списки" и "Множества" - то есть ИЗМЕНЯЕМЫЕ ТИПЫ ДАННЫХ


# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1, 35: {2, 3, 6, 7}, "one": "один"}  # в словаре
# # не может быть повторяющихся элементов {}
# print(d)

# Ключи повторяться не могут
# Dictionary contains duplicate keys 'one'

# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1, 35: [2, 3, 6, 7], False: "один"}  # TypeError:
# print(d)
# print(d[True])  # 1 - мы обращаемся по ключу

# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1, 35: [2, 3, 6, 7], False: "один"}
# print(d[True])  # 1
# print(d[1, 2.3])  # Кортеж
# d[1, 2.3] = 100
# print(d)


# СОЗДАНИЕ СЛОВАРЕЙ

# Изменяемые типы данных:
# List (списки), set(множества),dict (словари) и byte array (байтовый массив)


# СОЗДАНИЕ СЛОВАРЕЙ
# Вариант №1
# Через пустые скобки (потому что это изменяемый тип данных)
# d = {}
# print(d)
# print(type(d))  # {}  - <class 'dict'>

# Вариант №2
# Через функцию явного преобразования типов
# d1 = dict()
# print(d1)
# print(type(d1))  # {}  - <class 'dict'>


# d = {'one': 1, 'two': 2}
# print(d)
# print(type(d))  # {'one': 1, 'two': 2}  - <class 'dict'>


# d1 = dict('one': 1, 'two': 2)  # SyntaxError: invalid syntax - здесь с dict так нельзя делать !!
# Нельзя заполнять парами (ключ - значение) через функцию dict

# d1 = dict(one=1, two=2)  # Вот так правильно и ТОЛЬКО СТРОКА !!
# print(d1)
# print(type(d1))  # {'one': 1, 'two': 2}  - <class 'dict'>


# Преобразование другого типа данных в словарь С ПОМОЩЬЮ dict:
# С помощью пары в кортеже (список нельзя, он может быть изменен в любое время)
# d1 = dict([("one", 1), ("two", 2)]) # Здесь мы передаем список в кортеже, чтобы словарь
# # мог выявить, где ключи, а где значения - {'one': 1, 'two': 2}
# print(d1)


# d1 = dict(["on", ("two", 2)])  # {'one': 1, 'two': 2}
# print(d1)  # {'o': 'n', 'two': 2}


# Генератор словарей
# d = {x for x in range(7)}  # set - множество
# print(d)

# d = {x: x ** 2 for x in range(7)}  # Поставили x: x (типа пара: ключ - значение)
# print(d)  # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36}


# Задача:
# Можно проверить, есть ли элементы в словаре:
# d = {'one': 1, 'two': 2, "three": 3}
# print("two" in d)  # True - находится ли ключ "two" in d - ДА
# print(2 in d)  # False - находится ли ключ 2 in d - нет
# print(len(d))  # 3
# for key in d:  # перебираем ключи в цикле
#     print(key)  # получаем ключи
#     print(key, "->", d[key])  # а также значения по ключам


# d = {'one': 1, 'two': 2, "three": 3}
# # print("four" in d)  # False
# # print(d["four"])  # ошибка - KeyError: 'four'
# key = "four"
# if key in d:
#     print(d[key])
# try:
#     print(d[key])
# except KeyError:
#     print("Такого ключа не существует")


# Задача:
# Как удалить элемент в словаре с помощью del:
# d = {"one": 1, "two": 2, "three": 3}
# print(d)
# key = "one"
# # del d[key]
# del d["one"]
# print(d)


# Задача:
# Дан словарь с числовыми значениями. Необходимо их все перемножить и вывести на экран.
# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# res = 1
# for x in d:
#     res *= d[x]
# print(res)

# d = {"a": 5, "b": -10, "c": 7, "d": 109}
# mult = 1
# for key in d:
#     mult *= d[key]
# print(mult)


# Задача:
# Предложите пользователю ввести название 4 овощей и сохраните их в словаре с числовыми индексами,
# начиная с 1. Выведите содержимое словаря на экран. Спросите пользователя, какой элемент он хочет
# исключить и удалите его из списка.
# Вариант №1
# d = dict()
# d[1] = input("-> ")
# d[2] = input("-> ")
# d[3] = input("-> ")
# d[4] = input("-> ")
# print(d)


# Но лучше это сделать через генератор словарей (вдруг ввести нужно будет очень много input):
# d = {x: input("-> ") for x in range(1, 5)}
# print(d)
# try:
#     dislike = int(input("Какой элемент исключить: "))
#     del d[dislike]
# except (KeyError, ValueError):
#     print("Такого ключа не существует")
# print(d)


# ----------------------------------------------------------------

# ----------------------------------------------------------------
# Урок №12 Python от 05.02.2024
# Урок №1
# ----------------------------------


# Сколько ключей - столько и количество элементов в словаре
# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# print(len(d))  # то есть, длина словаря - это кол-во его ключей


# Задача:
# Написать программу, в которой хранятся данные о товарах, их количестве и цене.
# goods = {
#     "1": ['Core-i3-4330', 9, 4500],
#     "2": ['Core-i5-4670K', 3, 8500],
#     "3": ['AMD-FX-6300', 6, 3700],
#     "4": ['Pentium G3220', 8, 2100],
#     "5": ['Core i5-3450', 5, 6400],
# }
#
# for key in goods:  # key - здесь хранятся ключи
#     print(key, ") ", goods[key][0], " - ", goods[key][1], " шт. по ", goods[key][2], " руб.", sep="")
#
# while True:
#     n = input("№: ")
#     if n != "0":
#         if n in goods:
#             while True:
#                 try:
#                     count = int(input("Кол-во: "))
#                     goods[n][1] += count
#                     break
#                 except ValueError:
#                     print("Значение некорректное. Введите целое число: ")
#         else:
#             print("Такого ключа не существует")
#     else:
#         break
#
# for key in goods:
#     print(key, ") ", goods[key][0], " - ", goods[key][1], " шт. по ", goods[key][2], " руб.", sep="")
#


# Мы можем удалить по ключу и добавить по ключу элементы в словаре:
# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# print(d)
# del d['x1']  # Удаляем по ключу 'x1'
# d["x4"] = 10  # Можно добавить пару (ключ - значение)
# print(d)


# dir(dict)
# 'clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop', 'popitem', 'setdefault',
# 'update', 'values']


# ----------------------------------
# МЕТОДЫ СЛОВАРЕЙ
# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# for key in d:  # Здесь мы получаем только ключи!
#     print(key)

# Метод получения значений словаря
# print(d.values())  # Здесь мы получаем значения (список из значений) - dict_values([3, 7, 5, -1])
# for key in d.values():  # значения
#     print(key)

# Метод получения ключей
# print(d.keys())  # Здесь мы получаем список из ключей - dict_keys(['x1', 'x2', 'x3', 'x4'])
# for key in d.keys():
#     print(key)

# Метод получения пар элементов (кортежей) из ключа и значения
# print(d.items())  # Список пар элементов (кортежей) - dict_items([('x1', 3), ('x2', 7), ('x3', 5), ('x4', -1)])
# for key in d.items():
#     print(key)

# Метод распаковки таких кортежей
# Если у нас в кортеже 2 элемента, мы можем их распаковать:
# for key, value in d.items():  # x1 -> 3, x2 -> 7, x3 -> 5, x4 -> -1
#     print(key, "->", value)

# print(list(d))  # ! но мы получаем список из ключей - ['x1', 'x2', 'x3', 'x4']
# print(list(d.values()))  # получаем список из значений - [3, 7, 5, -1]
# print(list(d.items()))  # получаем список кортежей (из ключей и значений) -
# # [('x1', 3), ('x2', 7), ('x3', 5), ('x4', -1)]
# print(tuple(d.items()))  # приводим к кортежу - (('x1', 3), ('x2', 7), ('x3', 5), ('x4', -1))
# print(set(d.items()))  # к множеству set{} - рандомное расположение -
# {('x4', -1), ('x2', 7), ('x3', 5), ('x1', 3)}


# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# # d2 = d
# d2 = d.copy()
#
# print("d =", d)
# print("d2 =", d2)
#
# d2['x4'] = 10
# d['x1'] = 100
#
# print("d =", d)
# print("d2 =", d2)


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# Метод обращения к значению по ключу
# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# print(d["x1"])
# value = d.get("x1")  # метод получения значения по ключу - 3
# print(value)
# value = d.get("x9")  # ввели ключ, которого нет - None
# print(value)
# value = d.get("x", "Такого ключа не существует")  # добавили вторым параметром надпись
# print(value)
# value = d.get("x", 0)  # можно добавить вторым параметром и другой элемент
# print(value)


# Метод удаления элементов (pop) по ключу, удаляет всю пару
# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# item = d.pop("x1")
# print(item)
# print(d)

# Если удаляем несуществующий элемент, будет ошибка, нужен второй параметр
# item = d.pop("x6", "Такого ключа не существует")
# print(item)
# print(d)

# Есть метод popitem - он удаляет последнюю пару из словаря, возвращая и ключ и значение
# item2 = d.popitem()
# print(item2)
# print(d)

# Метод очищения всего словаря clear {}
# d.clear()
# print(d)


# Есть необычный метод setdefault, задается он по ключу, если ключ есть, он выводит значение,
# если ключа нет, он добавляет его вместе со значением None
# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# item = d.setdefault("x1")
# item2 = d.setdefault("x6")
# print(item)  # 3
# print(item2)  # None
# print(d)  # {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1, 'x6': None}

# item2 = d.setdefault("x8", 10)  # если вторым параметром указать цифру, None перезапишется на цифру
# print(item2)  # 10
# print(d)  # {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1, 'x8': 10}


# Метод update - используется, чтобы объединить словари
# d = {'x1': 3, 'x2': 7, 'x3': 5, 'x4': -1}
# a = {"one": 1, "two": 2, 'x1': 10}  # одинаковые ключи 'x1', поэтому взял значение из 2 словаря
# d.update(a)
# print(d)

# a = list(a.items())  # [('one', 1), ('two', 2), ('x1', 10)]
# print(a)
# d.update(a)
# print(d)

# a = tuple(a.items())  # (('one', 1), ('two', 2), ('x1', 10))
# print(a)
# d.update(a)
# print(d)


# Объединяем 2 словаря в третий словарь:
# x = {'a': 1, 'b': 2}
# y = {'b': 3, 'c': 4}
# z = x.copy()
# z.update(y)  # {'a': 1, 'b': 3, 'c': 4}
# print(z)

# Можно иначе с помощью оператора ровный слеш (|):
# Он также объединяет 2 словаря вместе, убирая повторяющиеся пары (ключ-значение), и перезаписывает
# последним повторяющимся ключом
# x = {'a': 1, 'b': 2}
# y = {'b': 3, 'c': 4}
# z = x | y
# print(z)  # {'a': 1, 'b': 3, 'c': 4}


# Метод fromkeys
# d = dict.fromkeys(['a', 'b', 'c'])
# print(d)  # {'a': None, 'b': None, 'c': None}
# d = dict.fromkeys(['a', 'b', 'c'], 100)  # 100 - добавили вторым параметром
# print(d)  # {'a': 100, 'b': 100, 'c': 100}


# Задача:
# Дан словарь, нужно создать словарь, который будет содержать только имя и зарплату сотрудника,
# а затем удалить эти значения из исходного словаря
# d = {'name': 'Kelly', 'age': 25, 'salary': 8000, 'city': 'New York'}
# d2 = dict()
# d2['name'] = d.pop("name")  # {'name': 'Kelly'}
# d2['salary'] = d.pop("salary")
# print(d)  # {'age': 25, 'city': 'New York'}
# print(d2)  # {'name': 'Kelly', 'salary': 8000}


# Задача:
# Дан словарь, нужно переименовать ключ 'city' в 'location'.
# d = {'name': 'Kelly', 'age': 25, 'salary': 8000, 'city': 'New York'}
# d['location'] = d.pop('city')
# print(d)  # {'name': 'Kelly', 'age': 25, 'salary': 8000, 'location': 'New York'}


# Задача:
# В словаре бывают вложенные элементы
# d = {
#     'first': {
#         1: "one",
#         2: "two",
#         3: "three"
#     },
#     'second': {
#         4: "four",
#         5: "five"
#     }
# }
# print(d)
# for x in d:
#     print(x)  # получаем ключи первого уровня
#     for y in d[x]:  # получаем ключи из вложенных элементов (то есть второго уровня)
#         print("\t", y, ":", d[x][y])  # получаем значения вложенных элементов


# Задача:
# Усложняем предыдущую задачу
# d = {
#     'first': {
#         1: {
#             11: "abc",
#             12: "abc",
#             13: "abc"
#         },
#         2: {
#             11: "abc"
#         },
#         3: {
#             11: "abc"
#         }
#     },
#     'second': {
#         4: {
#             11: "abc"
#         },
#         5: {
#             11: "abc"
#         }
#     }
# }
# print(d)
# for x in d:
#     print(x)
#     for y in d[x]:
#         print("\t", y)
#         for z in d[x][y]:
#             print("\t\t", z, ":", d[x][y][z])


# Задача:
# Генератор словарей
# d = {'один': 1, 'два': 2, 'три': 3, 'четыре': 4}
# d2 = {key for key in d}  # создали множество - {'три', 'четыре', 'один', 'два'}
# print(d2)

# d2 = {key: key for key in d}  # создали словарь - {'один': 'один', 'два': 'два', 'три': 'три', 'четыре': 'четыре'}
# print(d2)

# d2 = {key: key for key in d.items()}  # теперь мы в key получили кортеж
# print(d2)

# d2 = {key: value for key, value in d.items()}  # распакуем его, получилось!
# # {'один': 1, 'два': 2, 'три': 3, 'четыре': 4}
# print(d2)

# d2 = {value: key for key, value in d.items()}  # поменяли значения и ключи местами
# print(d2)


# Задача:
# Из исходного словаря надо вывести только два первых ключа и значения
# d = {'один': 1, 'два': 2, 'три': 3, 'четыре': 4}
# d2 = {key: value for key, value in d.items() if value <= 2}
# print(d2)
# В данном случае так можно решить: {'один': 1, 'два': 2}

# Задача:
# Но если на первом месте словаря будут стоять большие значения, к примеру,
# d = {'три': 3, 'два': 2, 'один': 1, 'четыре': 4}
# d2 = {key: value for key, value in d.items() if value <= 2}
# print(d2)
# Так не сработает!


# Задача:
# Преобразовать список в словарь так, чтобы строковые значения были ключами, а числовые - значениями
# a = ['one', 1, 2, 3, 'two', 10, 20, 'three', 15, 36, 60, 'four', -20]
# d = dict()
# s = None
# print(type(s))  # <class 'NoneType'>
# for i in a:
#     if type(i) == str:
#         d[i] = []  # d['one'] = []
#         s = i  # s = 'one'
#     else:
#         d[s].append(i)  # d[1].append(1)
# print(d)
# Сработало! - {'one': [1, 2, 3], 'two': [10, 20], 'three': [15, 36, 60], 'four': [-20]}


# ----------------------------------------------------------------

# ----------------------------------------------------------------
# Урок №13 Python от 07.02.2024
# Урок №1
# -----------------------------------------------

# ДОМАШКА за 05.07.2024
# sales = {'John': {'N': 3056, 'S': 8463, 'E': 8441, 'W': 2694},
#          'Tom': {'N': 4832, 'S': 6786, 'E': 4737, 'W': 3612},
#          'Anne': {'N': 5239, 'S': 4802, 'E': 5820, 'W': 1859},
#          'Fiona': {'N': 3904, 'S': 3645, 'E': 8821, 'W': 2451}}
#
# for x in sales:
#     print(x)
#     for y in sales[x]:
#         print("\t", y, ":", sales[x][y])
#
# person = input("Имя: ")
# region = input("Регион: ")
# print(sales[person][region])
# new_data = int(input("Новое значение: "))
# sales[person][region] = new_data
# print(sales[person])


# -----------------------------------------------

# Встроенная функция zip() - создать словарь
# У нас есть списки и нам нужно создать из них словарь
# one = [1, 2, 3]
# two = ["one", "two", "three"]
# three = [2.5, 4.6, 8.9]  #

# d = dict(zip(one, two))  # Можем передать только из 2 списков !! чтобы получить пары (ключ - значение)
# получили словарь, значения 1 списка используются в качестве ключей,
# значения 2-го - в качестве значений - {1: 'one', 2: 'two', 3: 'three'}
# print(d)

# lst = list(zip(one, two))  # делаем список (из двух списков), получили список кортежей -
# # [(1, 'one', 2.5), (2, 'two', 4.6), (3, 'three', 8.9)]
# print(lst)

# lst1 = list(zip(one, two, three))  # вывел список из 3-х списков -
# # [(1, 'one', 2.5), (2, 'two', 4.6), (3, 'three', 8.9)]
# print(lst1)

# lst2 = list(zip(one))  # Здесь можно и 1 параметр - [(1,), (2,), (3,)]
# print(lst2)


# Другой вариант, как создать словарь с помощью генератора словаря
# one = [1, 2, 3]
# two = ["one", "two", "three"]
# three = [2.5, 4.6, 8.9]  #
# f = {k: v for k, v in zip(two, one)}  # генератор словаря
# print(f)  # {'one': 1, 'two': 2, 'three': 3}


# Задача:
# Сделаем два словаря, выведем данные этих пользователей с помощью цикла с zip:
# one = {"name": "Igor", "surname": "Doe", "job": "Consultant"}
# two = {"name": "Irina", "surname": "Smith", "job": "Manager"}

# for k, v in one.items():  # Таким образом мы выведем данные 1 словаря
#     print(k, "->", v)

# for k, v in zip(one.items(), two.items()):  # Таким образом мы выводим данные из двух словарей
#     print(k, "->", v)
# В виде кортежей! Кортежи мы можем распаковать!

# Сделаем кортежи и распакуем:
# for (k1, v1), (k2, v2) in zip(one.items(), two.items()):
#     print(k1, "->", v1)
#     print(k2, "->", v2)

# Но можно и списком:
# for [k1, v1], [k2, v2] in zip(one.items(), two.items()):
#     print(k1, "->", v1)
#     print(k2, "->", v2)


# Задача:
# С помощью zip мы делаем сейчас обратное действие, раскладываем этот список кортежей на два
# отдельных кортежа
# lst = [(1, 'one'), (2, 'two'), (3, 'three')]
# a, b = zip(*lst)  # (*) - распаковка последовательностей
# print(a)  # (1, 2, 3)
# print(b)  # ('one', 'two', 'three')


# Как с помощью (**) объединить словари!
# a = {"one": 1, "two": 2}
# b = {"three": 3, "four": 4}
# print({**a, **b})  # Мы объединили словари с один третий словарь - {'one': 1, 'two': 2, 'three': 3, 'four': 4}
#
# for k, v in {**a, **b}.items():
#     print(k, "->", v)

# Результат:
# {'one': 1, 'two': 2, 'three': 3, 'four': 4}
# one -> 1
# two -> 2
# three -> 3
# four -> 4


# Небольшая темка - enumerate (нумерация), здесь можно добавлять дополнительный параметр
# Вариант №1
# data = [5, 7, 9, 4, 1, 3, 5, 8, 6, 4]
# j = 0
# for i in data:
#     print(j, ") ", i, sep="")
#     j += 1

# Вариант №2
# data = [5, 7, 9, 4, 1, 3, 5, 8, 6, 4]
# for j, i in enumerate(data, 1):  # (data, 1) если здесь добавить 1, то нумерация будет начинаться с 1
#     print(j, ") ", i, sep="")


# date = ["red", "green", "blue"]
# for num, color in enumerate(date, 1):
#     print(num, ") ", color, sep="")
# Результат:
# 1) red
# 2) green
# 3) blue


# Темка - звездочка *
# a = [1, 2, 3]
# b = [a, 4, 5, 6]  # [[1, 2, 3], 4, 5, 6]
# print(b)

# a = [1, 2, 3]
# b = [*a, 4, 5, 6]  # У нас пропали квадратные скобки []
# print(b)


# КАК РАБОТАЮТ ФУНКЦИИ:

# def func(*args):
#     print(*args)  # 5 6 7 abc
#     return args  # получили кортеж
#
#
# print(func(5))
# print(func(5, 6, 7, "abc"))  # чтобы передавать больше 1 числа, нужно использовать * перед args
# print(func())


# def summa(*args):
#     res = 0
#     for i in args:  # будем перебирать i в кортеже (args)
#         res += i
#     return res
#
#
# print(summa(1, 8, 5, 2, 6, 9, 8, 5, 14, 5, 2, 5))
# print(summa(1, 8, 5, 2, 6, 9, 8))
# print(summa(2, 5, 8))


# Задача:
# Напишите функцию, которая принимает произвольное кол-во аргументов. И возвращает словарь,
# в котором каждый элемент списка являться и ключом и значением
# Вариант учителя
# def to_dict(*di):
#     return {i: i for i in di}
#     # return dict(zip(di, di))
#
#
# print(to_dict(1, 2, 3, 4))
# print(to_dict("green", (2, 17), 3.11, -4))


# Вариант №1
# def a(*did):
#     return {i: i for i in did}
#
#
# print(a(1, 5, 2, 6, 3, 56, 888, 2, 25, 55, 22, 2))


# Вариант №2
# def a(*did):
#     dict = {}
#     for i in did:
#         dict.update({i: i})
#
#     return dict
#
#
# print(a(1, 5, 2, 6, 3, 56, 888, 2, 25, 55, 22, 2))


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# Задача:
# Написать функцию, которая принимает произвольное число чисел. Вычисляет их среднее арифметическое
# и возвращает только те числа, которые меньше полученного среднего арифметического
# def ch(*args):
#     average = sum(args) / len(args)
#     print(average)
#     res = []
#     for num in args:
#         if average > num:
#             res.append(num)
#     return res
#
#
# print(ch(1, 2, 3, 4, 5, 6, 7, 8, 9))
# print(ch(3, 6, 1, 9, 5))


# Задача:
# def func(a, *args):
#     return a, args
#
#
# print(func(5))  # (5, ())
# print(func(5, 9, 6, 5, 26, 5, 4))  # (5, (9, 6, 5, 26, 5, 4))


# Задача:
# Распечатаем оценки студентов
# def print_scores(student, *scores):
#     print("Name:", student)
#     for score in scores:
#         print(score, end=" ")
#     print()
#
#
# print_scores("Roman", 4, 5, 3, 3, 4, 5, 5, 4, 5)
# print_scores("Nikita", 5, 5, 3, 4)


# def func(**kwargs):
#     return kwargs
#
#
# print(func(a=1, b=2, c=3))
# print(func())
# print(func(name="Python"))


# Задача:
# Одна звездочка * (*args) - со всеми параметрами, там где нет ключей, две звездочки ** (**kwargs)
# со словарями и ключами
# Пользователь вводит данные, некоторые поля обязательные для заполнения, другие нет
# def intro(**kwargs):
#     for k, v in kwargs.items():
#         print(k, "is", v)
#     print()
#
#
# intro(name="Irina", surname="Sharma", age=22)
# intro(name="Igor", surname="Wood", email="igor@mail.com", age=22, phone="987654321")


#
# У нас могут быть позиционный аргумент и аргумент с одной звездочкой (*) и с (**)
# def func(a, b, *args, dd=5, cc=7, **kwargs):  # Порядок только такой
#     return a, b, args, kwargs, dd, cc
#
#
# print(func(1, 2, 3, 4, 5, 6, aaa=1, bb=2, cc=3))  # А здесь порядок только такой, вначале цифры,
# потом именованные параметры


# Задача:
# Написать функцию, которая принимает неограниченное количество параметров ключ-значение
# def db(**kwargs):
#     my_dict.update(**kwargs)  # обновляем словарь новыми ключами и значениями
#
#
# my_dict = {"one": "first"}
# db(k1=22, k2=31, k3=11, k4=91)
# db(name="Bob", age=31, weight=61, eyes_color="grey")
# print(my_dict)
# # {'one': 'first', 'k1': 22, 'k2': 31, 'k3': 11, 'k4': 91, 'name': 'Bob', 'age': 31, 'weight': 61,
# 'eyes_color': 'grey'}


# ---------------------------------
# *** ОБЛАСТИ ВИДИМОСТИ ***
# В Питоне 4 области видимости !!!
# ---------------------------------
# Приоритет от Local (L)
# 1) Локальная (в середине функции) - Local (L)
# 2) Объемлющая - локальная объемлющих функций - Enclosed (E)
# 3) Глобальная (на уровне модуля) - Global (G)
# 4) Встроенная (на уровне языка Питон) - Built-in (B)


# name = "Tom"  # Глобальная переменная
# surname = ""  # задали здесь кавычками
#
#
# def hi():
#     global name, surname  # Мы локальную переменную сделали глобальной с помощью global
#     name = "Sam"  # Локальная переменная
#     surname = "Johnson"
#     print("Hello", name, surname)
#
#
# def bye():
#     print("Good bye", name)
#
#
# print(name)
# hi()
# bye()
# print(name)  # Tom, потому что переменная-Tom находится в глобальной области видимости
# print(surname)


# Еще одна особенность питона:
# i = 5  # глобальная
# i = 6
#
#
# def func(arg=i):
#     print(arg)
#
#
# i = 6  # глобальная
# func()


# def func(a):
#     x = 2
#
#     def inner():
#         print("x:", x)
#         return a + x
#
#     return inner()
#
#
# print(func(3))


# ----------------------------------------------------------------
# Урок №14 Python от 12.02.2024
# Урок №1
# -----------------------------------------------


# ДОМАШКА от 07.02.2024

# students = {}
# n = int(input("Количество студентов: "))
# s = 0
# for key in range(n):
#     # print(key + 1, "-й студент: ", sep="")
#     name = input(str(key + 1) + "-й студент: ")
#     point = int(input("Балл: "))
#     students[name] = point
#     s += point
#
# average = s / n
# print("Средний балл: ", average)
# for key in students:
#     if students[key] > average:
#         print(key)


# -----------------------------------------------

# ОБЛАСТИ ВИДИМОСТИ В ПИТОН:

# Ctrl + Alt + левой кнопкой мыши = открывается файл (builtins) (встроенные функции)
# ---------------------------------
# *** ОБЛАСТИ ВИДИМОСТИ ***
# В Питоне 4 области видимости !!!
# ---------------------------------
# Приоритет от Local (L)
# 1) Локальная (в середине функции) - Local (L)
# 2) Объемлющая - локальная объемлющих функций - Enclosed (E)
# 3) Глобальная (на уровне модуля) - Global (G)
# 4) Встроенная (на уровне языка Питон) - Built-in (B)

#
# input = 5
#
# print(input)
# x = input("Введите")
# print(x)  # TypeError: 'int' object is not callable
#
# lst = [1, 2, 3, 4, 5, 6]
# print(sum(lst))


# def outer(who):
#     def inner():  # к вложенным функциям просто так мы не можем обратиться
#         print("Hello,", who)
#
#     inner()
#
#
# outer("World!")


# Последовательность действий для вложенных функций:
# def fun1():
#     a = 6  # 2
#
#     def fun2(b):
#         a = 4  # 5
#         print(a + b)  # 6
#
#     print("a: ", a)  # 3
#     fun2(4)  # 4
#
#
# fun1()  # 1


# x = 25
# t = 0
#
#
# def fn():
#     global t  # пока мы t не сделаем глобальной (она сама по себе локальная), она не будет видна
#     a = 30
#
#     def inner():
#         nonlocal a  # перезапишет переменную (a) на уровень выше
#         a = 35
#
#     inner()
#     t = a  # 35
#
#
# fn()
# q = x + t
# print(q)  # 55


# x = 5
#
#
# def fn1():
#     x = 25
#
#     def fn2():
#         x = 33
#
#         def fn3():
#             nonlocal x
#             x = 55
#
#         fn3()
#         print("fn2.x =", x)
#
#     fn2()
#     print("fn1.x =", x)
#
#
# fn1()
# Результат:
# fn2.x = 33
# fn1.x = 25


# def outer(a1, b1, a2, b2):
#     a = 0
#     b = 0
#
#     def inner():
#         nonlocal a, b
#         a = a1 + a2
#         b = b1 + b2
#         print("a: ", a)
#         print("b: ", b)
#
#     inner()
#     return [a, b]
#
#
# print(outer(2, 3, -1, 4))
# Результат:
# a:  1
# b:  7
# [1, 7]


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# ЗАМЫКАНИЕ
# через return

# def outer(n):
#     def inner(x):
#         return n + x
#
#     return inner
#
#
# a = outer(5)  # здесь мы вызвали наружнюю функцию - outer(), то есть def inner(x): return n + x
# print(a(10))  # то, что принимает вложенная функция, то есть здесь мы обратились к внутренней функции
# # inner с помощью out1(10)
#
# b = outer(6)
# print(b(4))
#
# print(outer(5)(10))  # это 2 вариант, получим тот же результат 15, но это с замыканием не работает


# a = outer(5)
# Или  a = def inner(x): return n + x
# Это тоже самое


# def func(a):
#     return a + 2
#
#
# var = func(5)  # вызываем функцию func(5) - в переменную var мы сохраняем результат выполнения функции,
# # то есть цифру 7
# print(var)  # печатаем ее
# Но где мы ее сохраняем? пока нигде, нужна переменная, к примеру, var, и потом эту переменную (var)
# мы выводим


# def func1():
#     a = 1
#     b = "line"
#     c = [1, 2, 3]
#
#     def func2():
#         return a, b, c
#
#     return func2
#
#
# func = func1()
# print(func())
# Результат: (1, 'line', [1, 2, 3]) - вернули кортеж


# def func1():
#     a = 1
#     b = "line"
#     c = [1, 2, 3]
#
#     def func2():
#         nonlocal a, b
#         c.append(4)  # c - это список, это изменяемый тип данных, ему nonlocal не нужен
#         a = a + 1  # здесь a - целое число, nonlocal нужен
#         b = b + "_new"  # здесь b - строка, nonlocal нужен
#         return a, b, c
#
#     return func2
#
#
# func = func1()
# print(func())


# Задача:
# Напишите функцию, ведущую подсчет количества посещений указанного города. Функция должна принимать в
# качестве аргумента название города и возвращать некоторую внутреннюю функцию, которая каждый раз при ее
# вызове будет увеличивать счетчик посещений на 1.
# Использовать нелокальную область видимости.
# def func(city):
#     count = 0  # неизменяемый тип данных
#
#     def inner():
#         nonlocal count  # без этой надписи nonlocal ни одна локальная переменная снаружи видна не будет
#         count += 1
#         print(city, count)
#
#     return inner
#
#
# res1 = func("Москва")
# res1()
# res1()
# res2 = func("Сочи")
# res2()
# res2()
# res1()


# -------------------------------------------------------
# *** НОВАЯ ТЕМА  ***
# LAMBDA ВЫРАЖЕНИЕ

# lambda - функция (выражение)
# функция в одну строку

# Вариант №1
# def func(x, y):  # 5
#     return x + y
#
#
# print(func(2, 3))

# Вариант №2
# print((lambda x, y: x + y)(2, 3))  # 5


# variable = (lambda x, y: x + y)  # скобочки
# print(variable(2, 3))
#
#
# print((lambda x, y: x + y)(2, 3))
# print((lambda x, y: x + y)(12, 3))


# Задача:
# Создать лямбда-выражение, которое находит сумму квадратов двух чисел:
# print((lambda x, y: x ** 2 + y ** 2)(2, 5))

# print((lambda x, y: x ** 2 + y ** 2)(2, 5))


# Задача:
# Присваивание значений
# print((lambda a, b, c: a + b + c)(10, 20, 30))
# print((lambda a, b, c=3: a + b + c)(10, 20))
# print((lambda a, b=2, c=3: a + b + c)(10))
# print((lambda a=1, b=2, c=3: a + b + c)())


# Принимаемые аргументы
# print((lambda *args: sum(args))(1, 2, 3, 4, 5, 6))
# print((lambda *args: args)("a", "b", "c"))


# Особенность лямбда выражения, что мы не могли делать с обычными функциями
# c = (
#     lambda x: x * 2,
#     lambda x: x * 3,
#     lambda x: x * 4,
# )
#
# print(c)
# print(c[0](5))  # вызвали лямбда выражение по [0] индексу с числом 5
# for t in c:
#     print(t("abc_"))


# Вариант №1
# def outer(n):
#     def inner(x):
#         return n + x
#
#     return inner
#
#
# f = outer(5)
# print(f(10))


# Вариант №2
# def outer1(n):
#     return lambda x: n + x
#
#
# f = outer1(5)
# print(f(10))


# Вариант №3
# outer2 = lambda n: lambda x: n + x
# f2 = outer2(5)
# print(f2(10))

# Вариант №4
# print((lambda n: lambda x: n + x)(5)(10))


# Задача:
# Создать лямбда-выражение для вычисления суммы трех чисел, с использованием вложенных лямбда-выражений
# print((lambda n: lambda x: lambda y: n + x + y)(2)(4)(6))

# print((lambda a: lambda b: lambda c: a + b + c)(2)(4)(6))

# print((lambda n: lambda x: lambda y: n + x + y)
#       (int(input("Введите 1 число: ")))
#       (int(input("Введите 2 число: ")))
#       (int(input("Введите 3 число: "))))


# def func(i):
#     return i[1]


# d = {"b": 15, "a": 7, "c": 3}  # делаем словарь
# print(d)  # выводим словарь
# lst = list(d.items())  # делаем список, который разлагается на список кортежей
# print(lst)
# lst.sort()  # отсортировать список по алфавиту (сортируются только ключи)
# print(lst)
# print(dict(lst))  # переведем в словарь, но сортировка только по ключам
#
# lst.sort(key=lambda i: i[1])  # сортировка по возрастанию по значениям
# lst.sort(key=func)
# print(lst)
# print(dict(lst))


# -----------------------------------------------
# ----------------------------------------------------------------
# Урок №15 Python от 14.02.2024
# Урок №1
# -----------------------------------------------

# ДОМАШКА от 07.02.2024

# Самая простая версия с помощью локальной переменной
# Вариант №1
# def outer(a, b, c):
#     def inner(i, j):
#         return i * j
#
#     s = 2 * (inner(a, b) + inner(a, c) + inner(b, c))
#     return s
#
#
# print(outer(2, 4, 6))
# print(outer(5, 8, 2))
# print(outer(1, 6, 8))
# -----------------------------------------------

# Вариант №2
# s = 0
#
#
# def outer(a, b, c):
#     def inner(i, j):
#         return i * j
#
#     global s
#     s = 2 * (inner(a, b) + inner(a, c) + inner(b, c))
#     return s
#
#
# outer(2, 4, 6)
# print(s)
# outer(5, 8, 2)
# print(s)
# outer(1, 6, 8)
# print(s)
# # -----------------------------------------------

# Вариант №3
# def outer(a, b, c):  # Вначале, здесь
#     s = 0
#
#     def inner(i, j):  # Последнее действие
#         nonlocal s
#         s = s + i * j  # s += i * j
#
#     inner(a, b)  # Потом, здесь
#     inner(a, c)
#     inner(b, c)
#     return 2 * s
#
#
# print(outer(2, 4, 6))
# print(outer(5, 8, 2))
# print(outer(1, 6, 8))
# -----------------------------------------------


# def func(i):
#     return i[1]
#
#
# d = {"b": 15, "a": 7, "c": 3}
# print(d)
# lst = list(d.items())
# print(lst)
# # lst.sort(key=lambda i: i[1])
# lst.sort(key=func)
# print(lst)


# Задача:
# Дан список игроков команды, причем для каждого игрока указаны его имя, фамилия и игровой рейтинг
# players = [
#     {'name': 'Антон', 'last_name': 'Бирюков', 'rating': 9},
#     {'name': 'Алексей', 'last_name': 'Бодня', 'rating': 10},
#     {'name': 'Федор', 'last_name': 'Сидоров', 'rating': 4},
#     {'name': 'Михаил', 'last_name': 'Семенов', 'rating': 6},
# ]
#
# res1 = sorted(players, key=lambda item: item['last_name'])
# print(res1)
# res2 = sorted(players, key=lambda item: item['rating'])
# print(res2)
# res3 = sorted(players, reverse=True, key=lambda item: item['rating'])
# print(res3)


# Задача:
# a = [lambda x, y: x + y, lambda x, y: x - y, lambda x, y: x * y]
# b = a[1](5, 3)  # обращение к lambda по индексу [1] - это (lambda x, y: x - y)
# print(b)


# Задача:
# d = {
#     1: lambda: print("Понедельник"),
#     2: lambda: print("Вторник"),
#     3: lambda: print("Среда"),
#     4: lambda: print("Четверг"),
# }
# d[3]()  # Среда


# Задача:
# print((lambda a, b: a if a > b else b)(5, 3))


# Задача:
# Создать лямбда-выражение нахождения минимального значения между тремя числами 9, 8, 5
# Вариант №1
# print((lambda a, b, c: a if a < b else b if b < c else c)(9, 7, 15))
# Вариант №2
# print((lambda a, b, c: a if (a < b) and (b < c) else b if b < c else c)(9, 7, 15))

# Вариант №3
# print((lambda a, b, c: a if (a < b) and ((b < c) or (b > c)) else b if b < c else c)(905, 12, 15))

# print((lambda a, b, c: a if (a < b) and (a < c) else b if (b < c) and (b < a) else c if (c < a) and (
#         c < b) else "Ну тут уже всё:)")(11, 12, 3))

# Последний учительский вариант
# print((lambda a, b, c: a if (a < b) and (a < c) else b if (b < c) and (b < a) else c)(12, 36, 15))


# print((lambda *args: min(args))(2, 5, 6))  # самый классный вариант ***
#
# print((lambda a, b, c: a if min(a, b, c) == a else b if min(a, b, c) == b else c if
# min(a, b, c) == c else "Несколько равных")(11, 2, 111))
#
# print((lambda *args: min(args))(2, 5, 6))


# print((lambda *args: sorted(list(args))[0])(2, 5, 6))  # отсортировали по возрастанию (min)
# print((lambda *args: sorted(args)[-1])(2, 5, 6))  # [-1] здесь мы нашли самый маленький элемент (max)


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Сейчас мы посмотрим циклы, которые записываются в одну строку
# ФУНКЦИИ (map & filter) вместе с lambda - выражением
# map(func, iterable), filter(func, iterable)
# Они все принимают какую-нибудь функцию и итерируемый объект


# Функция (map) проходится по всем элементам итерируемого объекта и к каждому применяет действие функции
# Map - заменяет цикл
# def mult(t):
#     return t * 2
#
#
# lst = [2, 8, 12, -5, -10]
#
# lt = list(map(mult, lst))
# print(lt)
#
# lt1 = list(map(lambda t: t * 2, lst))
# print(lt1)
#
# lt1 = list(map(lambda t: t * 2, [2, 8, 12, -5, -10]))


# lst = ['1', '2', '3', '4', '5']
# print(lst)
# print(list(map(lambda x: int(x), lst)))
# print(list(map(int, lst)))
# print([int(i) for i in lst])


# st = ['a', 'b', 'c', 'd', 'e'] # пар должно быть одинаковое количество
# num = [1, 2, 3, 4, 5]
# print(list(map(lambda x, y: (x, y), st, num))) # хотим получить кортеж ()
# # [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]
# print(list(map(lambda x, y: {x, y}, st, num))) # хотим получить словарь, а можно и список []
# [{1, 'a'}, {2, 'b'}, {3, 'c'}, {'d', 4}, {5, 'e'}]


# st = [9, 8, 7, 6, 5]
# num = [1, 2, 3, 4, 5]
# print(list(map(lambda x, y: x + y, st, num)))


# Функция (filter) проходится по всем элементам итерируемого объекта и выводит только те,
# которые выполняют условие функции, то есть отфильтровывает элементы (ФИЛЬТР)
# Filter - фильтр

# t = ('abcd', 'abc', 'hfhffj', 'deftr', 'tyu')
# t2 = tuple(filter(lambda s: len(s) == 3, t))
# print(t2)
# выводит только те значения, длина которых является 3 элемента - ('abc', 'tyu')


# t = ('abcd', 'abc', 'hfhffj', 'deftr', 'tyu', '', False)
# t2 = list(filter(lambda s: s * 3, t))
# print(t2)
# не сработает, результат - ['abcd', 'abc', 'hfhffj', 'deftr', 'tyu']


# b = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]
# print(list(filter(lambda s: s > 75, b)))
# [90, 76, 88, 81]


# Задача:
# Сгенерировать список из 10 элементов случайным образом. Из него выбрать только в диапазоне от 10 до 20
# (включительно)
# from random import randint
#
# arr = [randint(0, 40) for i in range(10)]
# print(arr)
# print(list(filter(lambda a: 10 <= a <= 20, arr)))


# Попробуем совместить map и filter, обычно они работают в качестве вложенных списков
# Вывести на экран квадраты нечетных чисел от 1 до 10
# print(list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(1, 10)))))
# # [1, 9, 25, 49, 81]
# print(list(map(lambda x: x ** 2, filter(lambda x: x % 2, [1, 2, 3, 4, 5, 6, 7, 8, 9]))))  # нечетные
# print(list(map(lambda x: x ** 2, [1, 3, 5, 7, 9])))
# print([x ** 2 for x in range(1, 10) if x % 2])  # нечетные
# print([x ** 2 for x in range(1, 10) if x % 2 != 0])  # нечетные
# print([x ** 2 for x in range(1, 10) if x % 2 == 0])  # четные


# ВЛОЖЕННЫЕ ФУНКЦИИ
# ЗАМЫКАНИЕ
# ДЕКОРАТОРЫ - декораторы строятся на основе замыкания (декорирование функций)

# def hello():
#     return 'Hello, I am func "hello"'
#
#
# def super_func(func):
#     print('Hello, I am func "super_func"')
#     print(func())  # сюда попадает (Hello, I am func "hello")
#
#
# super_func(hello)  # передали сюда имя другой функции hello, просто имя


# def summa(a, b):
#     return a + b
#
#
# n = 5
# m = 10
# print(summa(n, m))  # разные имена (параметры)


# def hello():
#     return 'Hello, I am func "hello"'
#
#
# test = hello  # в переменную test сохранили имя функции hello
# print(id(test))
# print(id(hello))
# print(test())
# print(id(test))


# Как записывается декоратор - пока записываем без декоратора:
# def my_decorator(func):
#     def inner():
#         print('Code before')
#         func()
#         print('Code after')
#
#     return inner
#
#
# def func_test():
#     print('Hello, I am func "func_test"')
#
#
# test = my_decorator(func_test)
# test()


# Теперь с декоратором @my_decorator
# def my_decorator(func):  # декорирующая функция
#     def inner():
#         print('Code before')
#         func()
#         print('Code after')
#
#     return inner
#
#
# @my_decorator  # декоратор
# def func_test():  # декорируемая функция
#     print('Hello, I am func "func_test"')
#
#
# func_test()


# def my_decorator(func):  # декорирующая функция
#     def inner():
#         print('@' * 50)
#         func()
#         print('*' * 50)
#
#     return inner
#
#
# @my_decorator  # декоратор
# def func_test():  # декорируемая функция
#     print('Hello, I am func "func_test"')
#
#
# @my_decorator
# def hello():
#     print('Hello, I am func "hello"')
#
#
# func_test()
# hello()


# Слова - палиндромы
# m = "Hello"
# print(m[::-1])


# ----------------------------------------------------------------
# Урок №16 Python от 19.02.2024
# Урок №1
# -----------------------------------------------

# ДЕКОРАТОРЫ

# def bold(fn):
#     def wrap():
#         return "<b>" + fn() + "</b>"
#
#     return wrap
#
#
# def italic(fn):
#     def wrap():
#         return "<i>" + fn() + "</i>"
#
#     return wrap
#
#
# @bold
# @italic
# def hello():
#     return "text"
#
#
# print(hello())


# Задача
# Создайте декоратор, который будет выводить количество вызовов декорирующей функции и ее содержимое

# def cnt(fn):
#     count = 0
#
#     def wrap():
#         nonlocal count
#         count += 1
#         fn()
#         print("Вызов функции: ", count)
#
#     return wrap
#
#
# @cnt
# def hello():
#     print("Hello")
#
#
# hello()
# count = "Python"
# hello()
# hello()


# def args_decorator(fn):
#     def wrap(arg1, arg2):
#         print("Данные:", arg1, arg2)
#         fn(arg1, arg2)
#
#     return wrap
#
#
# @args_decorator
# def print_full_name(first, last):
#     print("Меня зовут: ", first, last)
#
#
# print_full_name("Ирина", "Мумладзе")


# def args_decorator(fn):
#     def wrap(*args, **kwargs):
#         print("args", args)
#         print("kwargs", kwargs)
#         fn(*args, **kwargs)
#
#     return wrap
#
#
# @args_decorator
# def func(a, b, c, study="Python"):
#     print(a, b, c, "изучают", study, end="\n\n")
#
#
# @args_decorator
# def func1(study):
#     print("Мне нравится", study)
#
#
# func("Борис", "Елизавета", "Светлана", study="JavaScript")  # это для словаря study="JavaScript" -
# # ключ значение
# func("Владимир", "Екатерина", "Виктор")
# func1(study="HTML")


#
# Вариант №1
# def decor_args(arg1):
#     def decor(fn):
#         def wrap(x, y):
#             print(arg1, x, "и", y, "=", end=" ")
#             fn(x, y)
#
#         return wrap
#
#     return decor
#
#
# @decor_args("Сумма:")
# def summa(a, b):
#     print(a + b)
#
#
# @decor_args("Разность:")
# def sub(a, b):
#     print(a - b)
#
#
# summa(5, 2)
# sub(5, 2)


# Вариант №2
# def decor_args(arg1, arg2):
#     def decor(fn):
#         def wrap(x, y):
#             print(arg1, x, arg2, y, "=", end=" ")
#             fn(x, y)
#
#         return wrap
#
#     return decor
#
#
# @decor_args("Сумма:", "+")
# def summa(a, b):
#     print(a + b)
#
#
# @decor_args("Разность:", "-")
# def sub(a, b):
#     print(a - b)
#
#
# summa(5, 2)
# sub(5, 2)
#
# summa(10, 2)
# sub(10, 2)


# Задача:
# Создать декоратор, который будет принимать в виде аргумента число. Это число будет
# умножаться на число принимаемой функцией
# def decor_args(arg1):
#     def decor(fn):
#         def wrap(x):
#             return arg1 * fn(x)
#
#         return wrap
#
#     return decor
#
#
# @decor_args(3)
# def return_num(num):
#     return num
#
#
# print(return_num(5))


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# *** СТРОКИ ***
# Питон - это десятичная система исчисления (10)
# print(int("19"))
# print(int("19.5"))
# print(int(19.5))


# print(int("100", 2))  # 4 - 2 параметр - это система исчисления, то есть в двоичной системе исчисления 100
# # - перевелось в десятичную (у нас это цифра 4)
# print(int("100", 10))  # 100
# print(int("100", 8))  # 64
# print(int("100", 16))  # 256

# print(bin(18))  # 0b10010 - bin - преобразовывает в двоичную систему
# print(oct(18))  # 0o22 - oct - преобразовывает в восьмеричную систему
# print(hex(18))  # 0x12 - hex - в шестнадцатеричную систему

# print(0b10010)  # 18
# print(0o22)  # 18
# print(0x12)  # 18
# print(0b10010 + 0x12)  # 36 - питону без разницы в какой системе исчисления мы работаем


# q = 'Pyt'
# w = "hon"
# e = q + w  # Python
# print(e)
# print(e * 2)  # PythonPython
# print(e * -2)  # можем, но будет пробел
# print(e)  # ! но строки неизменяемый тип данных, поэтому - print(e) - будет Python
# a = e * 2  # Если мы сохраним результат в переменную a и выведем ее, то все будет ок!
# print(a)
# print("y" in e)  # True
# print("y1" in e)  # False
# print(e)  # Python
# print(e[0])  # срезы прекрасно работают - P
# print(e[1:3])  # yt


# s = "Python"  # Строки - это неизменяемый тип данных
# # s[3] = "t" # Так нельзя
# s = s[:3] + 't' + s[4:]  # Мы перезаписываем строку заново, если хотим там что изменить
# print(s)  # Pytton


# Задача:
# Заменить символ в строке
# def change_char_to_str(s, old, new):  # (строка, старый символ, новый символ)
#     s2 = ""  # мы создали новую строку s2 и инициализировали пустой строкой ""
#     i = 0  # вспомогательная переменная (i) для цикла while
#
#     while i < len(s):
#         if s[i] == old:
#             s2 = s2 + new
#         else:
#             s2 = s2 + s[i]
#         i += 1
#
#     return s2
#
#
# str1 = "Я изучаю Nython. Мне нравится Nython. Nython очень интересный язык программирования."  # эта строка
# # будет приходить в параметр (s)
# str2 = change_char_to_str(str1, "N", "P")  # изменить символ в строке (change_char_to_str)
# print("str1 =", str1)
# print("str2 =", str2)


# НОВОЕ ***
# У СТРОК ЕСТЬ ПРЕФИКСЫ
# print("Привет")
# print(u"Привет")  # u - unicode

# r (R) - подавляет экранирование, r - чтобы в задачах не экранировать каждый элемент
# print("C:\folder\files.txt")  # C:olderiles.txt
# print(r"C:\folder\files.txt")  # C:\folder\files.txt
# print("C:\\folder\\files.txt")

# print("C:\\folder\\fil\\nes.txt\\")
# print("C:\\folder\\files.txt\\"[:-1])
# print(r"C:\folder\files" + "\\")  # в конце добавили через конкатенацию два бэк слеша "\\"

# b (B) - байтовые строки
# f (F) - конкатенация
# name = "Дмитрий"
# age = 25
# print("Меня зовут " + name + ". Мне " + str(age) + " лет.")
# print(f"Меня зовут {name}. Мне {age} лет.")


# ch = 5.26987412
#
# print(f"Число: {round(ch, 3)}")
# print(f"Число: {ch:.3f}")


# x = 10
# y = 5
# print(f"{x = }, {y = }")
# print(f"{x} x {y} / 2 = {x * y / 2}")

# num = 74
# print(f"{num}")  # 74
# print(f"{{num}}")  # {num}
# print(f"{{{num}}}") # {74}
# print(f"{{{{{num}}}}}")  # {{74}}
# print("C: \\\\text")  # C: \\text
# print("C: \\\text")  # C: \	ext


# dir_name = 'my_doc'
# file_name = "data.txt"
# print(fr"home\{dir_name}\{file_name}")
# print("home\\" + dir_name + "\\" + file_name)


# ----------------------------------------------------------------
# Урок №17 Python от 21.02.2024
# Урок №1
# -----------------------------------------------

# *****************************************
# Домашнее задание (последнее)

# Задача
# Вариант №1
# def avg(fn):
#     def wrap(*arg):
#         print("Среднее арифметическое: ", *arg, "=", fn(*arg) / len(arg))
#
#     return wrap
#
#
# @avg
# def summa(*args):
#     print("Сумма чисел: ", *args, "=", sum(args))  # *args - распаковали кортеж
#     return sum(args)
#
#
# summa(2, 3, 3, 4)


# Задача
# Вариант №2
# def avg(fn):
#     def wrap(*arg):
#         a = ""
#         for i in arg:
#             a += str(i) + ", "
#         print("Среднее арифметическое: ", a[:-2], "=", fn(*arg) / len(arg))
#
#     return wrap
#
#
# @avg
# def summa(*args):
#     print("Сумма чисел: ", *args, "=", sum(args))
#     return sum(args)
#
#
# summa(2, 3, 3, 4)

# *****************************************

# НОВАЯ ТЕМА
# *** МЕТОДЫ СТРОК ***

# s = """  # кавычки поддерживают многострочный текст, используются для документирования функций
# Несколько
# строк
# """
# print(s)
#
#
# s1 = '''
# Несколько
# строк
# '''
# print(s1)
#
#
# s2 = "Нес  колько" \
#
# "Несколько строк"
# print(s2)


# def square(n):
#     """Принимает число n, возвращает квадрат числа n"""
#     print()
#     return n ** 2
#
#
# print(square(5))  # наводим курсор на (square), получим наше описание - Принимает число n,
# # возвращает квадрат числа n
# print(square.__doc__)  # посмотреть документацию любой функции через __doc__
#
# # max(5, 5)
# # len()
# print(len.__doc__)


# from math import pi


# def cylinder(r, h):
#     """
#     Вычисляет площадь цилиндра.
#
#     Вычисляет площадь цилиндра на основании заданной высоты и радиуса основания
#
#     :param r: положительное число, радиус основания цилиндра
#     :param h: положительное число, высота цилиндра
#     :return: положительное число, площадь цилиндра
#     """
#     return 2 * pi * r * (r * h)
#
#
# print(cylinder(2, 4))
# print(cylinder.__doc__)
# print(min.__doc__)
# print(max.__doc__)
# print(zip.__doc__)
# print(dict.__doc__)


# print(ord('a'))  # Returns the Unicode code point for a one-character string
# print(ord('#'))
# print(ord('н'))
#
#
# while True:
#     n = input("-> ")
#     if n != "-1":  # условие выхода (-1)
#         print(ord(n))
#     else:
#         break


# Задача:
# Дана строка "Test string for me"
# s = "Test string for met"
# arr = [ord(x) for x in s]
# print("ASCII коды: ", arr)
# arr = [int(sum(arr) / len(arr))] + arr  # round & int - округлит до целого числа
# print("Среднее арифметическое: ", arr)
# arr += [ord(x) for x in input("-> ")[:3] if ord(x) not in arr]
# print(arr)
# print(arr.count(arr[-1]) - 1)
# arr.sort(reverse=True)
# print(arr)


# Задача:
# Есть функция, которая делает обратные действия, мы можем получить из кода ASCII - сам символ
# print(chr(97))  # Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
# print(chr(1567))
# print(chr(8364))
# print(chr(89654))


# Задача:
# Два числа с кодами символов. Вывести все символы, ASCII коды которых лежат между a и b включительно
# по возрастанию кодов
# a = 122
# b = 97
# for i in range(b, a + 1):
#     print(chr(i), end=" ")
# a b c d e f g h i j k l m n o p q r s t u v w x y z


# a = 197
# b = 122
# if a < b:
#     a, b = b, a
#
# for i in range(b, a + 1):
#     print(chr(i), end=" ")
# z { | } ~                          
#          ¡ ¢ £ ¤ ¥ ¦ § ¨ © ª « ¬ ­ ® ¯ ° ± ² ³ ´ µ ¶ · ¸ ¹ º» ¼ ½ ¾ ¿ À Á Â Ã Ä Å


# print("apple" == "Apple")  # False
# print("apple" > "Apple")  # True
# print("apple" > "aPple")  # True


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# from random import randint
#
# # Задача:
#
# # Диапазон. Указываем, какой будет генерироваться мин символ и какой мах
# # Подготовим 4 глобальных переменных
# shortest = 7
# longest = 10
# min_ascii = 33
# max_ascii = 126
#
#
# def random_password():
#     res = ""
#     for i in range(randint(shortest, longest)):
#         rand_char = chr(randint(min_ascii, max_ascii))
#         res += rand_char
#
#     return res
#
#
# print("Ваш случайный пароль: ", random_password())


# *** МЕТОДЫ СТРОК ***

# Методы, влияющие на регистр строк (маленькие или большие буквы):
# s = "hello, WORLD! I am learning Python."
# print(s.capitalize())  # Hello, world! i am learning python. - capitalize - 1 букву в строке сделал
# # большой, остальные все сделал маленькими (в нижнем регистре)
# print(s.lower())  # hello, world! i am learning python. - lower - все символы в нижний регистр
# print(s.upper())  # HELLO, WORLD! I AM LEARNING PYTHON. - upper - все в верхний регистр
# print(s.swapcase())  # HELLO, world! i AM LEARNING pYTHON. - swapcase - все меняет местами
# print(s.title())  # Hello, World! I Am Learning Python. - title - преобразовывает каждую букву,
# # с которой начинается каждое новое слово в большую
# print(s)


# Метод count - считает, сколько и каких символов в строке
# s = "hello, WORLD! I am learning Python."
# print(s.count("h"))  # 2 буквы h
# print(s.count("l"))  # 3 буквы l
# print(s.count("l", 3))  # l - поиск, начиная с 3го символа (2-ым параметром)
# print(s.count("l", 3, 10)) # помимо буквы, еще 2 параметра (начало и конец поиска)


# Метод find - поиск и похожих методов несколько
# s = "hello, WORLD! I am learning Python."
# print(s.find("Python"))  # возвращает индекс первого вхождения подстроки в строку - 28 индекс
# print(s.find("l"))  # 2 индекс первого вхождения буквы l
# print(s.find("l", 4))  # если я укажу 4 индекс, питон выведет 19 индекс, он нашел в слове
# # learning (после 4 индекса)
# print(s.find("l", 4, 20))  # 19 - диапазон с 4 по 20
# print(s.find("Python1"))  # Если символа нет, выведет (-1)
# print(s.rfind("l"))  # поиск с правой стороны r (right) - 19 индекс


# Метод index - также возвращает индекс при первом вхождении в строку, но в отличие от find, он
# при не обнаружении элемента, выбрасывает ошибку - ValueError: substring not found
# s = "hello, WORLD! I am learning Python."
# print(s.index("l"))
# print(s.rindex("l"))
# print(s.index("l1"))  # если элемента нет - ValueError: substring not found
# print(s.rindex("l1"))


# Задача:
# Строка из 2 слов. Переставьте эти слова местами. Результат запишите в одну строку и выведите результат.
# st = input("Введите два слова через пробел: ")
# first = st[:st.find(" ")]  # получаем слово от начала строки до пробельного символа (" ")
# second = st[st.find(" ") + 1:]
# print(first)
# print(second)
# print(second + " " + first)


# Метод startswith - endswith - это с чего строка начинается и чем заканчивается
# s = "hello, WORLD! I am learning Python."
# print(s.startswith("hello"))  # True
# print(s.startswith("I am"))  # False
# print(s.startswith("I am", 14))  # True
# print(s.index("I am"))  # 14
# print(s.endswith("on."))  # True


# Метод int - преобразуем строку в число
# print(int("45"))
# print(int("ffffff")) # Но здесь будет ошибка


# Методы isdigit, isalpha, isalnum
# print('123'.isdigit())  # True - isdigit - проверяет, есть ли в строке только числа
# print('ййй'.isalpha())  # True - isalpha - проверяет, есть ли в строке только буквы
# print('ййй6'.isalpha())  # False
# print('ййй6896'.isalnum())  # True - isalnum - и буквы и числа (кроме спец символов)
# print('ййй6896!*'.isalnum())  # False - спецсимволы нельзя


# Методы, которые проверяют в каком регистре у нас находятся символы
# print('abc'.islower())  # True - islower - проверяет, находятся ли буквы только в нижнем регистре
# print('abc125'.islower())  # True тоже (не проверяет наличие цифр и спец символов)
# print('abc125"#'.isupper())  # False - isupper - проверяет, находятся ли буквы только в верхнем регистре
# print('GHTR125"#'.isupper())  # True (но также не проверяет наличие других символов)


# n = input("Введите число: ")
# print(n * 2)
# n = int(input("Введите число: "))
# print(n * 2)

# Альтернатива работы с исключениями
# n = input("Введите число: ")
# if n.isdigit():
#     n = int(n)
#     print(n * 2)


# Метод форматирования - center - по центру
# print('py'.center(10))  # выравнивание по центру с отступом, так чтобы в общей сложности
# # получилось 10 символов вместе с (py)
# print('py'.center(10, "-"))  # может быть 2 параметра (ширина и вид заполнителя) ----py----


# Метод strip - убирание лишних пробельных символов
# print('   py'.lstrip())  # с левой стороны
# print('   py'.rstrip())  # с правой стороны
# print('   py       '.strip()) # по умолчанию удаляет пробелы с обоих сторон
# но здесь в скобочки после strip() можно поставить и любой другой символ, который мы хотим убрать


# print('https://www.python.org'.lstrip('/:pths'))  # www.python.org
# print('https://www.python.org'.strip('/:pths.org'))  # www.python
# print('https://www.python.org'.lstrip('/:pths').rstrip('.org'))

# www.python.org
# www.python
# www.python


# Метод replace - поиск и замена целых слов и отдельных букв
# str1 = "Я изучаю Nython. Мне нравится Nython. Nython очень интересный язык программирования. New"
# print(str1.replace("Nython", "Python"))
# print(str1.replace("N", "P"))


# Метод join - объединение строк (итерируемого объекта и элементов другой строки)
# s = "-"
# seq = ('a', 'b', 'c')
# print(s.join(seq))  # a-b-c вместе с разделителем - объединителем "-"
#
# print("..".join(['1', '99']))  # 1..99
# print(":".join("Hello"))  # H:e:l:l:o
# print(",".join("Hello"))  # H,e,l,l,o


# *****************************************
# Задача
# Вариант №3
# Теперь решаем с помощью метода join и map
# def avg(fn):
#     def wrap(*arg):
#         a = ""
#         for i in arg:
#             a += str(i) + ", "
#         print("Среднее арифметическое: ", a[:-2], "=", fn(*arg) / len(arg))
#
#     return wrap
#
#
# @avg
# def summa(*args):
#     a = ", ".join(map(str, args))  # с помощью join и map
#     print("Сумма чисел: ", a, "=", sum(args))
#     return sum(args)
#
#
# summa(2, 3, 3, 4)
# *****************************************


# Метод split - разбивает строку по пробелам, делает список
# print("Строка разделенная пробелами".split())  # ['Строка', 'разделенная', 'пробелами']
# print('www.python.org.ru'.split("."))  # разбивает по точкам "." - ['www', 'python', 'org', 'ru']
# print('www.python.org.'.split(".", 4)) # на 4 элемента - ['www', 'python', 'org', '']
# print('www.python.org.ru'.rsplit(".", 2))  # взял 2 элемента с правой стороны


# a = input("-> ").split()
# b = list(map(int, a))
# print(b)


#
# ----------------------------------------------------------------
# Урок №18 Python от 26.02.2024
# Урок №1
# -----------------------------------------------
# ***********************************************

# Домашнее задание:
# fio = input("Введите ФИО: ").split()
# print(fio)
# print(f"{fio[0]} {fio[1][0]}. {fio[2][0]}.")

# -----------------------------------------------

# НОВАЯ ТЕМА
# Работа с регулярными выражениями


# import re


# s = "Я ищу совпадение в 2024 году. И я их найду в 2 счета я."  # строка
# reg = "я"  # шаблон регулярного выражения, с которым будем работать

# Здесь мы берем - re. модуль, который мы импортировали, метод findall, 1 параметром - мы передадим
# reg (шаблон регулярного выражения), 2 параметром - мы будем передавать саму строку (s), где мы будем
# производить поиск
# еще может быть 3 параметр - флаг
# print(re.findall(reg, s))  # все совпадения с шаблоном ['я']
# findall - возвращает список, содержащий все совпадения по шаблону регулярного выражения
# ['я']

# search - поиск
# print(re.search(reg, s))  # возвращает только 1 расположение объекта (индекс)
# <re.Match object; span=(32, 33), match='я'>

# print(re.search(reg, s).span())  # (32, 33) - индекс, от какого до какого идет совпадение в шаблоне
# print(re.search(reg, s).start())  # начало
# print(re.search(reg, s).end())  # конец
# print(re.search(reg, s).group())  # само совпадение - я


# print(re.match(reg, s))  # поиск совпадения с шаблоном только от начала строки

# print(re.split(reg, s))  # возвращает список, в котором строка разбита по шаблону, то есть по символу,
# который мы указали в reg (по я)

# print(re.sub(reg, "!", s))  # поиск и замена! (то есть мы меняем (я) на (!)) восклицательный знак
# Я ищу совпадение в 2024 году. И ! их найду в 2 счета !.
# но можно установить и количество замен

import re

#  Будем использовать  - findall, search, split и sub !!

# s = "Я ищу совпадение в 2024 году. И я их найду в 2 счета. 98765 Hello"
# reg = "[2024]" # эти скобки [] обозначают поиск одного из заданных символов, можно и [204] написать
# print(re.findall(reg, s))
# ['2', '0', '2', '4', '2']

# reg = "[ищу]"
# print(re.findall(reg, s))
# ['и', 'щ', 'у', 'и', 'у', 'и', 'у']

# reg = "[0-9]"
# print(re.findall(reg, s))
# ['2', '0', '2', '4', '2', '9', '8', '7', '6', '5']

# reg = "[6-9]"  # ['9', '8', '7', '6']
# print(re.findall(reg, s))

# reg = "[0-9][0-9]"  # ['20', '24', '98', '76'] - Одна квадратная скобка [0-9] это одна любая цифра, вторая
# квадратная скобка [0-9] это тоже одна любая цифра
# Возвращает совпадение с любыми двузначными числами от 0 до 99
# print(re.findall(reg, s))

# reg = "[0-9][0-9][0-9][0-9]"
# Возвращает совпадение с любыми четырехзначными числами от 0 до 9999
# print(re.findall(reg, s))
# ['2024', '9876']


# Как взять только год (который начинается или с 1 или с 2)
# reg = "[12][0-9][0-9][0-9]"  # ['2024']
# print(re.findall(reg, s))

# reg = "[а-я]"
# print(re.findall(reg, s))
# ['и', 'щ', 'у', 'с', 'о', 'в', 'п', 'а', 'д', 'е', 'н', 'и', 'е', 'в', 'г', 'о', 'д', 'у',
# 'я', 'и', 'х', 'н', 'а', 'й', 'д', 'у', 'в', 'с', 'ч', 'е', 'т', 'а']


# reg = "[а-яё]" # добавили ё (или перед или после диапазона)
# reg = "[а-яА-ЯёЁ]"
# reg = "[a-z]"  # ['e', 'l', 'l', 'o']
# reg = "[A-Z]"  # ['H']
# reg = "[A-Za-z]"  # ['H', 'e', 'l', 'l', 'o']
# print(re.findall(reg, s))


# print(re.findall(reg, s))
# print(ord('я')) # 1103
# print(ord('ё')) # 1105
# print(ord('Я')) # 1071
# print(ord('а')) # 1072


# Поиск спец символов !!
# s = "Я ищу совпадение в 2024 году. И я их найду в 2 сче-та. 98765 Hello"
# reg = "." # Точка (.) это спц символ, он возвращает любой символ, его надо экранировать,
# чтобы получить точку
# print(re.findall(reg, s))

# reg = "\\."  # ['.', '.']
# print(re.findall(reg, s))
# # *** r-строка (Подавление экранирования элементов)
# reg = r"\."  # ['.', '.']
# print(re.findall(reg, s))
# reg = r"[.]"  # ['.', '.']
# print(re.findall(reg, s))


# reg = r"[a-zA-Z-]" # и дефис (-) будет ['-', 'H', 'e', 'l', 'l', 'o']
# print(re.findall(reg, s))
# reg = r"[a-z-A-Z?-!]" # Если дефис (-) между спецсимволов - будет ошибка
# print(re.findall(reg, s))


# reg = r"[A-Za-z?-!]"  # ошибка
# reg = r"[A-Za-z\[\]-]"  # Здесь мы все квадратные скобки внутри заэкранировали
# print(re.findall(reg, s))


# reg = r"[^0-9]"  # указывает ^ все выведется, кроме диапазона цифр [0-9]
# Циркумфлекс ^ (все кроме)
# print(re.findall(reg, s))
# reg = "[^А-яЁёФ]"
# reg = r"[^А-яЁёФ]" # r - это можно и без него
# print(re.findall(reg, s))
# reg = r"[0-9^]"  # в конце - выводит цифры
# print(re.findall(reg, s))


# Задача:
# Найдите время в формате: [16:25]
# st = "Час в 24 формате от 00 до 23. 2021-06-15T21:45. Минуты в диапазоне от 00 до 59. 2021-06-15T01:09."
# pattern = "[0-9][0-9]:[0-9][0-9]"  # Две точки (:) помогут найти точные часы
# print(re.findall(pattern, st))

# pattern = "[0-2][0-9]:[0-9][0-9]" # хотим, чтобы первая цифра в часах была от 0 до 2
# print(re.findall(pattern, st))

# pattern = "[0-2][0-9]:[0-5][0-9]" # хотим, чтобы минуты были от 0 до 59
# print(re.findall(pattern, st))


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# import re

# s = "Я ищу совпадение в 2024 году. И я их найду в 2 счета. 98765 He_llo"
# reg = r"\." - точка
# print(re.findall(reg, s))

# reg = r"\d"  # [0-9] - совпадения от 0 до 9
# reg = r"\D"  # [^0-9] - там где нет вообще цифр
# print(re.findall(reg, s))

# reg = r"\s"  # пробельные символы
# reg = r"\S"  # там где нет пробелов
# print(re.findall(reg, s))

# reg = r"\w"  # не только буквы, но и цифры и символы подчеркивания_
# reg = r"\W"  # где этого нет
# print(re.findall(reg, s))


# reg = r"\A"  # ищет символы в начале строки
# reg = r"\Z"  # ищет символы в конце строки
# print(re.findall(reg, s))


# reg = r"\AЯ ищу"  # ['Я ищу']
# reg = r"\AИ я"  # []
# reg = r"lo\Z"
# reg = r"\bсов"
# reg = r"\bние"
# reg = r"\Bние"
# print(re.findall(reg, s))


# s = "Я ищу совпадение в 2024 году. И я их найду в 2 счета. 98765 He_llo 2000000000000000000000"
# reg = "."
# print(re.findall(reg, s))

# reg = r"\d+"  # от 1 до бесконечности повторений цифр
# print(re.findall(reg, s))

# reg = r"\w+" # от 1 до бесконечности повторений букв, цифр и символов с подчеркиванием
# print(re.findall(reg, s))

# reg = r"20*"  # от 0 до бесконечности
# print(re.findall(reg, s))

# reg = r"[20]*"  # если есть скобки [] то * относится к любому символу
# print(re.findall(reg, s))


# КОЛИЕЧСТВО ПОВТОРЕНИЙ:
# + - от 1 до бесконечности
# * - от 0 до бесконечности
# ? - от 0 до 1


# d = "Цифры: 7, +17, --42, 0013, 0.3"
# reg = r'\d'  # ищет цифры - ['7', '1', '7', '4', '2', '0', '0', '1', '3', '0', '3']
# reg = r'\d+'  # с плюсом (+) от 1 до бесконечности - ['7', '17', '42', '0013', '0', '3']
# reg = r'[+-]\d+'  # ['+17', '-42']
# reg = r'[+-]?\d+'  # ['7', '+17', '-42', '0013', '0', '3']
# reg = r'[+-]*\d+'  # ['7', '+17', '--42', '0013', '0', '3']
# reg = r'[+-]?\d+\.?\d?'  # Чтобы появилась точка в 0.3
# ['7', '+17', '-42', '0013', '0.3']
# reg = r'[+-]?[\d.]+'  # А это более простой вариант
# # ['7', '+17', '-42', '0013', '0.3']
# print(re.findall(reg, d))


# s = "05-03-1987 # Дата рождения"
# print("Дата рождения:", re.sub(r"\s#.*", "", s))  # Избавились от (# Дата рождения)
# print(re.sub('-', '.', s))
# print("Дата рождения:", re.sub('-', '.', re.sub(r"\s#.*", "", s)))
# # print("Дата рождения:", "05.03.1987")
# # Дата рождения: 05.03.1987
# print("Дата рождения", re.sub("-", ".", re.sub("\\s#.*", "", s)))


# Задача:
# Написать регулярное выражение для нахождения всех ключей и значений
# s = "author=Пушкин А.С.; title  = Евгений Онегин; price =200; year= 1831"
# # reg = r'\w+\s*=\s*[^;]+' # в конце [^;]+ - все что не является (;) от 1 и более
# reg = r'[^;]+'  # Все кроме точки с запятой (;)
# print(re.findall(reg, s))


# s = "12 сентября 2024 года 56987414123"
# reg = r"\d"
# reg = r"\d{4}" # в {} количество повторений 4 (хотим найти по 4 цифры)
# reg = r"\d{2,4}" # указываем диапазон повторений от 2 до 4 (по 2, 3, 4 цифры)
# reg = r"\d{2,}" # не менее 2х повторений (от 2х и до бесконечности)
# reg = r"\d{,4}"  # от 0 и до 4 (элемент может быть, а может и не быть)
# ['12', '', '', '', '', '', '', '', '', '', '', '2024', '', '', '', '', '', '', '5698', '7414', '123', '']
# print(re.findall(reg, s))


# s = "Я ищу совпадение в 2024 году. И я их [найду] в 2 сче_та. 98765 He_llo. 2 сче_та."
# # reg = r"^\w+\s\w+"  # ['Я ищу'] - ^ строка начинается
# reg = r"\w+\.$"  # ['сче_та.'] - $ в конце - строка заканчивается
# print(re.findall(reg, s))


# def validate_login(login):
#     return re.findall(r"[A-Za-z0-9-]{3,16}", login)
#
#
# print(validate_login("Python-master"))  # ['Python-master']
# print(validate_login("Pyth@on-master"))  # ['Pyth', 'on-master']
#


# ----------------------------------------------------------------
# Урок №19 Python от 28.02.2024
# Урок №1
# -----------------------------------------------

# *************************************

# Домашняя работа
# Задача:
# Найти номер телефона в формате +7хххххххххх или 7хххххххххх

# s = "+7 499 456-45-78, +74994564578, 7 (499) 456 45 78, 74994564578, +24994564578"
# reg = r"\+?7\d{10}"
# print(re.findall(reg, s))

# *************************************


import re

# ФЛАГИ

# print(re.findall(r"\w+", "12 + й YYY RRR"))  # ['12', 'й', 'YYY', 'RRR']
# print(re.findall(r"\w+", "12 + й", flags=re.ASCII))  # ['12'] без букв

# text = "Hello world"
# print(re.findall(r"\w\+", text, re.DEBUG))


# s = "Я ищу совпадение в 2024 году. И я их найду в 2 счёта."
# reg = "я"
#
# print(re.findall(reg, s, re.IGNORECASE))  # игнорирование регистра
# print(re.findall(reg, s, re.I))


# text = """
# one
# two
# """

# print(re.findall(r"one.\w+", text))
# print(re.findall(r"one.\w+", text, re.DOTALL))  # ['one\ntwo'] # DOTALL - точка (.) принимает перенос
# на новую строку
# print(re.findall(r"one$", text))
# print(re.findall(r"one$", text, re.MULTILINE))  # ['one']  # MULTILINE - многострочный текст

# print(re.findall("""
# [A-Za-z0-9._-]+  # part 1
# @  # @@
# [A-Za-z0.-]+  # part 1
# """, 'test@mail.ru', re.VERBOSE))  # позволяет использовать пробелы, переносы и комментарии

# ФЛАГИ:
# a = re.ASCII
# i = re.IGNORECASE
# m = re.MULTILINE - мультилиния; линия из нескольких параллельных линий
# s = re.DOTALL
# x = re.VERBOSE


# text = """Python,
# python,
# PYTHON"""
#
# reg = "(?im)^python"
# print(re.findall(reg, text))


# text = "<body>Пример жадного соответствия регулярных выражений</body>"
# print(re.findall("<.*?>", text))  # ленивое выражение с (?)

# +?, *?, ?? - все значения по минимуму
# {m,n}?, {,n}?, {m,}?
# s = "12 сентября 2024 года 568789456"
# reg = r"\d{2,4}?"  # (?) - взял по минимуму (по 2)
# print(re.findall(reg, s))

# s = "Ольга и Виталий отлично учатся!"
# reg = "Петр|Ольга|Виталий"  # | - значит ИЛИ (or)
# print(re.findall(reg, s))


# s = "int = 4, float = 4.0f, double = 8.0"
# reg = r"\w+\s*=\s*\d[.\w+]*"
# reg = r"\w*\s*=\s*\d\.*\w*"  # МОЙ ВАРИАНТ (*-*)
# print(re.findall(reg, s))

# reg = r"int\s*=\s*\d[.\w]*|float\s*=\s*\d[.\w]*"  # теперь найдем только int и float
# reg = r"(int|float)\s*=\s*\d[.\w]*"
# print(re.findall(reg, s))
# Результат - ['int = 4', 'float = 4.0f', 'double = 8.0']

# reg = r"(?:int|float)\s*=\s*\d[.\w]*"  # чтобы скобку сделать несохраняющей, нам надо поставить перед ней (?:)
# # print(re.findall(reg, s))
# # # print(re.findall(reg, s))
# # print(re.search(reg, s))


# (?: ....) - группирующая скобка не является сохраняющей


# s = "5 + 7*2 - 4"
# reg = r"\s*([+*-])\s*"  # А что же значат скобки [] - для поиска символов, () - включает ВСЕ символы
# print(re.split(reg, s))


# Задача:
# Попросите пользователя ввести текущую дату по заданному шаблону и проверьте данные на соответствие
# s = "28-02-2024"
# reg = "(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-2])-(19[0-9][0-9]|20[0-9][0-9])"
# print(re.findall(reg, s))
# print(re.search(reg, s).group())
# [('28', '02', '2024')]


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# s = "28-02-2024"
# reg = "(0[1-9]|[1-2][0-9]|3[0-1])-(0[1-9]|1[0-2])-(19[0-9][0-9]|20[0-9][0-9])"
# print(re.findall(reg, s))
# print(re.search(reg, s).group())
# m = re.search(reg, s)
# print(m[0])  # 28-02-2024 - по нулевому индексу совпадение со всем нашим шаблоном
# print(m[1])  # 28
# print(m[2])  # 02
# print(m[3])  # 2024

# print(re.search(reg, s).group(0))  # это полное совпадение
# print(re.search(reg, s).group(1))
# print(re.search(reg, s).group(2))
# print(re.search(reg, s).group(3))


# text = """
# Самара
# Москва
# Тверь
# Цфа
# Казань
# """
# count = 0
#
#
# def replace_find(m):
#     global count
#     count += 1
#     return f"<option value='{count}'>{m.group(1)}</option>\n"
#
#
# print(re.sub(r"\s*(\w+)\s*", replace_find, text))


# s = "Самолет прилетает 10/23/2024. Будем рады вас видеть после 10/24/2024." # 23.10.2024  24.10.2024
# reg = r"(\d{2})/(\d{2})/(\d{4})"
# print(re.sub(reg, r"\2.\1.\3", s))  # sub - поиск и замена элемента (substitute)


# s = "yandex.com and yandex.ru"
# reg = r"([a-z0-9-]{2,}\.[a-z]{2,4})"
# print(re.sub(reg, r"http://\1", s))  # http://


# *** НОВАЯ ТЕМА ***
# ПАПКА № 17
# Рекурсия
# Функция вызывает саму себя!

# def elevator(n):
#     if n == 0:  # базовый случай, выход из функции (0)
#         print("Вы в подвале")
#         return
#     print("=>", n)
#     elevator(n - 1)
#     print(n, end=" ")  # все данные из стека
#
#
# n1 = int(input("На каком этаже вы сейчас находитесь? "))
# elevator(n1)


# Задача:
# Надо написать функцию, выводящую сумму элементов списка
# Вариант №1 - с помощью цикла
# def sum_list(lst):
#     res = 0
#     for i in lst:
#         res += i
#     return res
#
#
# print(sum_list([1, 3, 5, 7, 9]))


# Вариант №2 - с помощью рекурсии
# def sum_list(lst):
#     if len(lst) == 1:
#         return lst[0]
#     else:
#         return lst[0] + sum_list(lst[1:])
#
#
# print(sum_list([1, 3, 5, 7, 9]))


# def func(n):
#     return n * 2
#
#
# print(func(5))  # 10


# Более наглядное представление со стрелочкой
# def sum_list(lst):  # [9]
#     if len(lst) == 1:
#         print(lst, "=> lst[0]:", lst[0])
#         return lst[0]  # 9
#     else:
#         print(lst, "=> lst[0]:", lst[0])
#         return lst[0] + sum_list(lst[1:])  # 1 + 3 + 5 + 7 +
#
#
# print(sum_list([1, 3, 5, 7, 9]))  # 25
#


# ----------------------------------------------------------------
# Урок №20 Python от 04.03.2024
# Урок №1
# -----------------------------------------------


# Задачка:
# Функция, которая будет нам переводить число в любую систему исчисления
# def to_str(n, base):  # (2, 10) n - число, base - основание системы исчисления
#     convert = "0123456789ABCDEF"
#     if n < base:
#         return convert[n]  # convert[15] = 'F'
#     else:
#         return to_str(n // base, base) + convert[n % base]  # convert[14] = 'E'
#
#
# print(to_str(254, 10))  # to_str(254, 16) => FE


# Задача:
# Массив и несколько уровней вложенности
# names = ["Adam", ["Bob", ["Chet", "Cat", ["1", ["2", ["3"]]]], "Bard", "Bert"], "Alex", ["Bea", "Bill"], "Ann"]
# print(len(names))

# print(names[0]) # Adam (str)
# print(isinstance(names[0], list))  # isinstance - каким типом данных является элемент, list? - False
# print(names[1])  # ['Bob', ['Chet', 'Cat', ['1', ['2', ['3']]]], 'Bard', 'Bert']
# print(isinstance(names[1], list))  # list? - True
# print(names[1][1])
# print(isinstance(names[1][1], list))


# names = ["Adam", ["Bob", ["Chet", "Cat", ["1", ["2", ["3"]]]], "Bard", "Bert"], "Alex", ["Bea", "Bill"], "Ann"]

# def count_items(item_list):
#     count = 0  # 10
#     for item in item_list:
#         if isinstance(item, list):
#             count += count_items(item)  # count += 2
#         else:
#             count += 1
#     return count
#
#
# print(count_items(names))


# def remove_t(text):  # ""
#     if not text:  # text = ""
#         return ""
#     if text[0] == "\n" or text[0] == " ":
#         return remove_t(text[1:])  # "" remove_t - это просто название нашей функции, мы сами в начале ее так назвали
#     else:
#         return text[0] + remove_t(text[1:])  # "HelloWorld" + "" - здесь идет сохранение в стек
#
#
# print(remove_t("  Hel lo\nWorld "))


# *** НОВАЯ ТЕМА ***
# ФАЙЛЫ

# f = open("test.txt", "r", encoding="utf-8")  # open - открывает файл, 1 парам - сам файл, 2 парам -
# режим открытия (r для чтения, w - для записи)
# print(f)  # информация для чтения
# <_io.TextIOWrapper name='test.txt' mode='r' encoding='cp1251'>
# print(*f)  # распаковали сам объект - Hello!
# f.close() # когда мы с файлом поработали, мы должны его закрыть

# Атрибуты файлового объекта:
# print(f.closed) # до закрытия атрибут f.closed - False
# f.close()
# print(f.closed) # Теперь - True

# print(f.mode)  # r
# print(f.name)  # test.txt
# print(f.encoding)  # utf-8


# f = open("test.txt", "r", encoding="utf-8")
# # print(f.read())  # считывает всю информацию
# print(f.read(3)) # если 3, то выведет только первые 3 символа
# print(f.read())  # повторно print(f.read()) - почитал до конца, не беря в расчет первые 3 символа
# f.close()


# f = open(r"C:\Python3.12\test.txt", "r", encoding="utf-8")
# print(f.read())
# f = open(r"D:\Python317\317\test.txt", "r")  # такого документа нет
# print(f.read())


# f = open("test2.txt", "r")
# # print(f.read())  # считывает всю информацию
# print(f.readline())  # считывает построчно - This is line 1.
# print(f.readline(8))
# print(f.readline())
# f.close()


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# f = open("test2.txt", "r")
# print(f.readlines(16))  # возвращает список из заданного количества строк
# print(f.readlines())
# f.close()


# f = open("test2.txt", "r")
# for line in f:
#     print(line, end="")
# f.close()


# Задача:
# Определите количество строк в файле
# Вариант №1
# f = open("test2.txt", "r")
# print(len(f.readlines()))
# f.close()

# Вариант №2
# f = open("test2.txt", "r")
# count = 0
# for line in f:
#     print(line, end="")
#     count += 1
# f.close()
# print(count)


# Режим записи - w
# w - если файл существует, он будет очищен, если нет, будет создан
# f = open("xyz.txt", "w")  # пишем несуществующий файл
# f.write("Hello\nWorld!\n")
# f.close()

# Режим дозаписи - a
# a - если файл существует, то данные добавляются в конец файла, данные не затираются
# f = open("xyz.txt", "a")
# f.write("New text.\n")
# f.close()

# f = open("xyz1.txt", "a")  # если файла не было, a - создаст
# f.close()

# f = open("xyz.txt", "a")
# lines = ['\nThis is line 1', '\nThis is line 2']  # добавили записи в "xyz.txt" ниже
# f.writelines(lines)
# f.close()


# f = open("xyz.txt", "w")
# lst = [str(i) + " " for i in range(1, 20)]
# print(lst)
# # for index in lst:
# #     f.write(index + "\t")
# f.writelines(lst)
# f.close()


# Задача:
# Замените строку в текстовом файле
# f = open("test3.txt", "w")
# f.write("Замена строки в текстовом файле;\nизменить строку в списке;\nзаписать список в файл\n")
# f.close()
#
# f = open('test3.txt', 'r')  # открыли файл на чтение, данные считались, мы их изменили, но не сохранили
# read_file = f.readlines()
# print(read_file) # список из 3х строк
# read_file[1] = "Hello world!\n"  # read_file[1] - это 2ая строка у нас в списке
# print(read_file)
# f.close()
#
# f = open("test3.txt", "w")  # теперь нужно эти данные записать и сохранить
# f.writelines(read_file)
# f.close()


# Задача:
# Удалите строки из файла по ее индексу
# f = open("test3.txt", "w")
# f.write("Замена строки в текстовом файле;\nизменить строку в списке;\nзаписать список в файл\n")
# f.close()
#
# f = open("test3.txt", 'r')
# read_file = f.readlines()
# pos = int(input("Введите индекс строки для удаления: "))
# if 0 <= pos < len(read_file):
#     del_pos = read_file.pop(pos)
# else:
#     print("Индекс введен неверно")
# f.close()
#
# f = open("test3.txt", 'w')
# f.writelines(read_file)
# f.close()


# f = open("test.txt", "r", encoding="utf-8")
# print(f.read(3))
# print(f.tell())  # возвращает (говорит) текущую позицию условного курсора в файле
# print(f.seek(1))  # перемещает (находит) условный курсор в заданную позицию
# print(f.read())
# print(f.tell())
# f.close()

# f = open("test.txt", "r+")  # (+) это обновление, чтение и запись
# "r+" - затер данные
# print(f.write("I am learning Python\n"))
# print(f.seek(3))
# print(f.write("-new string-"))
# print(f.tell())
# f.close()


# f = open("test2.txt", "a+")
# print(f.write("1111 I am learning Python 1111"))
# print(f.read())
# f.close()

# with open("test2.txt", 'w+') as f:
#     print(f.write('01234\n56789'))
# print(f.closed)


# with open("test2.txt", 'r') as f:
#     for line in f:
#         print(line[:3])


#
# ----------------------------------------------------------------
# Урок №21 Python от 06.03.2024
# Урок №1
# -----------------------------------------------

# **********************************

# Домашка за 04.03.2024:

# def negative_numbers(n):
#     if not n:
#         return 0
#     count = 0
#     if n[0] < 0:
#         count += 1
#     return count + negative_numbers(n[1:])
#
#
# lst = [-2, 3, 8, -11, -4, 6]
# print(negative_numbers(lst))

# lst = [-2, 3, 8, -11, -4, 6]
# print(bool(lst))  # True


# **********************************


# Возвращаемся к файлам:
# file_name = "res.txt"
# lst = [4.5, 2.8, 3.9, 1.0, 0.3, 4.33, 7.777]
# # print(str(lst))
#
#
# def get_line(lt):
#     lt = list(map(str, lt))  # ['4.5', '2.8', '3.9', '1.0', '0.3', '4.33', '7.777']
#     return ' '.join(lt)
#
#
# with open(file_name, 'w') as f:
#     f.write(get_line(lst))
#     # f.write(str(lst))
#     # f.write(get_line(lst))
#     # print(get_line(lst))
#
# with open(file_name, 'r') as f:
#     st = f.read()
#
# print(st)
# print(type(st))  # <class 'str'>
#
# nums = list(map(float, st.split()))
# print(nums)
# print(type(nums[0]))


#  В Питоне область видимости закрывается только на уровне функций
# a = 5
#
# if a == 5:
#     b = 10
#
#
# # for i in range(12):
# #     b = 10
#
# def func():
#     b = 10
#
#
# func()
# print(b)


# Задача:
# Написать функцию, которая выводит слово из файла, имеющего максимальную длину

# def longest_worlds(file):
#     with open(file, 'r', encoding="utf-8") as text:  # , encoding="utf-8" - если русский текст
#         w = text.read().split()  # .split - метод для создания списка из строковых значений
#         print(w)
#         max_length = len(max(w, key=len))
#         print(max_length)
#         res = [i for i in w if len(i) == max_length]
#         if len(res) == 1:
#             return res[0]
#         return res
#
#
# print(longest_worlds('test.txt'))


# f = open("test2.txt", "w")  # wb - бинарный, не можем на него посмотреть
# print(f.write("1111 I am learning Python 1111"))
# f.close()


# Задачка:
# ***  ***  ***
# text = ("Строка №1\nСтрока №2\nСтрока №3\nСтрока №4\nСтрока №5\nСтрока №6\nСтрока №7\n"
#         "Строка №8\nСтрока №9\nСтрока №10\n")
#
# with open('one.txt', 'w', encoding="utf-8") as f:
#     f.write(text)
#
#
# with open('one.txt', 'r', encoding="utf-8") as fr, open('two.txt', 'w', encoding="utf-8") as fw:
#     for line in fr:
#         line = line.replace("Строка", "Линия -")
#         fw.write(line)


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Модуль OS, OS.PATH
import os.path

# print(os.getcwd())  # возвращает текущую директорию - cwd - current working directory (папку) - C:\Python3.12
# print(os.listdir())  # список директорий и файлов - listdir - Returns a list containing the names of the files
# in the directory
# ['.git', '.gitignore', '.idea', '.venv', 'Domashka', 'Folder', 'Main.py', 'nested1', 'Newwork.py',
# 'one.txt', 'readme.md', 'res.txt', 'Selfwork.py', 'test.txt', 'test2.txt', 'test3.txt', 'Text1.txt',
# 'two.txt', 'Work', 'xyz.txt', 'xyz1.txt']
# print(os.listdir(".."))  # на шаг выше, что лежит на папку выше


# os.mkdir("folder1")  # придумываем и запускаем папку (1 раз создается папка, не документ)
# mkdir - make dir - Create a directory.
# FileExistsError: [WinError 183] Невозможно создать файл, так как он уже существует: 'folder1'
# os.mkdir("nested1/nested2/nested3") # здесь не может создать много папок
# os.makedirs("nested1/nested2/nested3")  # makedirs - а он может создасть и конечную и промежуточные директории


# os.rmdir("folder1") # удаление пустой папки - rmdir - Remove a directory.
# os.rmdir("nested1/nested2/nested3")
# os.rmdir("folder")  # OSError: [WinError 145] Папка не пуста: 'folder'

# os.remove("xyz1.txt")  # удаление файла


# os.rename("xyz.txt", "new.txt")  # переименование файла и папки (2 параметра, что на что)
# os.rename("folder", "new")

# os.rename("two.txt", "nested1/two1.txt")  # можно не только переименовать, но и переместить!
# os.renames("test.txt", "nested1/nested3/two.txt")  # переименование файла и папки, перемещает документы,
# создавая промежуточные директории


# Метод - walk - Directory tree generator.
# walk - возвращает кортеж из 3 элементов
# for root, dirs, files in os.walk("nested1", topdown=True):  # nested1 - папка, по которой мы хотим пройтись
#     # , topdown=False - обход дерева наоборот
#     # папка (nested1) находится на том же уровне
#     print("Root: ", root)
#     print("\tSubdirs: ", dirs)
#     print("\tFiles: ", files)

# for root, dirs, files in os.walk("../Python3.12", topdown=True):  # "../Python3.12" - поднимаемся на уровень выше
#     print("Root: ", root)
#     print("\tSubdirs: ", dirs)
#     print("\tFiles: ", files)


# Задача:
# Удаление пустых директорий в ветви Work
# def remove_empty_dirs(root_tree):  # remove_empty_dirs - просто название функции
#     print(f"Удаление пустых директорий в ветви {root_tree}")
#     print('-' * 50)
#     for root, dirs, files in os.walk(root_tree):
#         if not os.listdir(root):  # Return a list containing the names of the files in the directory. -
#             # если список пустой, то папку можно удалять
#             os.rmdir(root)
#             print(f"Директория {root} удалена.")
#
#     print('-' * 50)
#
#
# remove_empty_dirs("nested1")  # передали сюда - в root_tree - папку nested1


# УДАЛИЛИ ВСЕ ПУСТЫЕ ПАПКИ
# Удаление пустых директорий в ветви nested1
# --------------------------------------------------
# Директория nested1\folder1 удалена.
# Директория nested1\nested2\folder2 удалена.
# Директория nested1\nested3\folder3 удалена.
# Директория nested1\nested4\folder4 удалена.
# Директория nested1\new\folder5 удалена.
# --------------------------------------------------

import os

# import os.path


# print(os.path.split(r"C:\Python3.12\nested1\nested4\text.txt"))  # [1] split - вернул кортеж из 2 элементов
# ('C:\\Python3.12\\nested1\\nested4', 'text.txt')

# print(os.path.join(r"C:\Python3.12", "nested1", "nested4", "text.txt"))  # join - путь
# создает по частям
# C:\Python3.12\nested1\nested4\text.txt


# Задача:
# Нужна программа, которая создаст приведенное на рисунке дерево директорий и файлов

# dirs = [r'Work\F1', r'Work\F2\F21']
# for d in dirs:
#     os.makedirs(d)

# files = {
#     'Work': ['w.txt'],
#     r'Work\F1': ['f11.txt', 'f12.txt', 'f13.txt'],
#     r'Work\F2\F21': ['f211.txt', 'f212.txt']
# }
#
# for dir1, files in files.items():
#     for file in files:
#         file_path = os.path.join(dir1, file)
#         open(file_path, 'w').close()
#
#
# file_with_text = [r'Work\w.txt', r'Work\F1\f12.txt', r'Work\F2\F21\f211.txt', r'Work\F2\F21\f212.txt']
#
# for file in file_with_text:
#     with open(file, 'w') as f:
#         f.write(f"Текст в файле {file}")


# Результат:
# Work\w.txt
# Work\F1\f11.txt
# Work\F1\f12.txt
# Work\F1\f13.txt
# Work\F2\F21\f211.txt
# Work\F2\F21\f212.txt

# import os
# import os.path


# ----------------------------------------------------------------
# Урок №22 Python от 11.03.2024
# Урок №1

# -----------------------------------------------

# **********************************

# Домашка за 06.03.2024:
# Вариант №1
# root = r"nested1\nested2"
# objs = os.listdir(root)
# print(objs)
# print(sorted(objs, reverse=True))
# print(sorted(os.listdir("Work"), reverse=True))


# Вариант №2
# root = r'nested1\nested2'
# objs = os.listdir(root)
# print(objs)
# objs = list(map(lambda i: os.path.join(root, i), objs))  # создались полные пути к элементам относительно корня
# print(objs)
#
# obj_sort = sorted(objs, key=os.path.isfile, reverse=True)
# print(obj_sort)
# **********************************


# print(os.path.isfile(r"nested1\nested2\res.txt"))  # возвращает True, если путь является файлом
# print(os.path.isdir(r"nested1\nested2"))  # возвращает True, если путь является директорией


# print(os.path.exists(r'nested1\nested2'))  # проверка на существование пути
# print(os.path.getsize(r'nested1\nested2'))  # размер документа в байтах
#
# root = r'nested1\nested2'
# if os.path.exists(root):
#     print(os.path.getsize(root))


# b = os.path.getsize(r"Main.py")
# print(b, "байт")
# print(b // 1024, "килобайт")


# import time
#
#
# path = "Main.py"
# print(os.path.getctime(path))  # возвращает время создания файла
# print(os.path.getatime(path))  # возвращает время последнего доступа к файлу
# print(os.path.getmtime(path))  # возвращает время последнего изменения файла (в секундах)
#
# print(time.strftime("%d.%m.%Y, %H:%M:%S", time.localtime(os.path.getctime(path))))
# print(time.strftime("%d.%m.%Y, %H:%M:%S", time.localtime(os.path.getatime(path))))
# print(time.strftime("%d.%m.%Y, %H:%M:%S", time.localtime(os.path.getmtime(path))))


# *** НОВАЯ ТЕМА ***  НОВАЯ ТЕМА ***
# ОБЪЕКТНО - ОРИЕНТИРОВАННОЕ ПРОГРАММИРОВАНИЕ
# КЛАССЫ И ОБЪЕКТЫ

# инкапсуляция
# наследование
# полиморфизм

# Классы - это шаблоны, на основании которых мы можем создавать объекты
# Эти объекты еще называют экземплярами класса, объекты в питоне - это любые типы данных
# class Point:  # название класса всегда с большой буквы
#     """Класс для предоставления координат на плоскости"""
#     x = 1  # свойства и методы
#     y = 1


# свойства - поля, это обычные переменные
# методы - это обычные функции, которые находятся внутри класса
# свойства + методы = атрибуты
# к переменной (x) - мы просто так не можем получить доступ, можем создать экземпляр класса

# p1 = Point()
# print(p1.x)  # получаем доступ к (x) через экземпляр класса, через (p1.x)
# print(type(p1))  # <class '__main__.Point'>
# print(Point.__doc__)  # смотрим документацию - (Класс для предоставления координат на плоскости)
# print(Point.__name__)  # имя класса - Point
# print(dir(Point))  # dir -
# dir - Встроенная функция dir() при вызове без аргумента, возвращает список переменных, доступных
# в локальной области. Если передать функции объект, она вернет список атрибутов указанного объекта.


# class Point:
#     x = 1
#     y = 1
#
#
# p1 = Point()  # экземпляр класса Point()
# print(p1)  # <__main__.Point object at 0x0000023D4A20D430>
# print(p1.x, p1.y)  # 1 1
# p1.x = 10
# p1.y = 20
# p1.z = 30
# print(p1.x, p1.y, p1.z)  # 10 20 30 - перезаписались
# print(p1.__dict__)  # dict - смотрим, что туда входит - {'x': 10, 'y': 20, 'z': 30} - в виде словаря
#
#
# p2 = Point()  # экземпляр класса Point()
# print(p2.x, p2.y)  # 1 1
# print(p2.__dict__)  # {} - dict - возвращает нам словарь со свойствами и значениями, здесь пустой, потому что,
# # у экземпляра класса (p2) мф эти значения не перезаписали
#
# print(id(Point))
# print(id(p1))
# print(id(p2))


# class Point:
#     x = 1
#     y = 1
#
#     def set_coord(self, a, b):  # метод - это обычная функция, только внутри класса
#         # set_coord - установить координаты
#         # self - это ссылка на экземпляр класса
#         self.x = a
#         self.y = b
#         print(self.__dict__)
#
#
# p1 = Point()
# # p1.x = 5
# # p1.y = 10
# p1.set_coord(5, 10)  # {'x': 5, 'y': 10}
# # Point.set_coord(p1)
#
# p2 = Point()
# # p2.x = 50
# # p2.y = 100
# p2.set_coord(50, 100)  # {'x': 50, 'y': 100}
# # Point.set_coord(p2)


# Задача:
# Реализуйте класс "Человек"

# class Human:
#     name = "name"
#     birthday = "00.00.0000"
#     phone = "00-00-00"
#     country = "country"
#     city = "city"
#     address = "street, house"
#
#     def print_info(self):
#         print(" Персональные данные ".center(40, "*"))
#         print(f"Имя: {self.name}\nДата рождения: {self.birthday}\nНомер телефона: {self.phone}\nСтрана: "
#               f"{self.country}\nГород: {self.city}\nДомашний адрес: {self.address}")
#         print("=" * 40)
#
#     def input_info(self, first_name, birthday, phone, country, city, address):
#         self.name = first_name
#         self.birthday = birthday
#         self.phone = phone
#         self.country = country
#         self.city = city
#         self.address = address
#
#     def set_name(self, name):  # установить имя
#         self.name = name
#
#     def get_name(self):  # получить имя и вывести
#         return self.name
#
#     def set_birthday(self, birthday):  # будет принимать новую дату рождения
#         self.birthday = birthday
#
#     def get_birthday(self):
#         return self.birthday
#
#
# h1 = Human()
# h1.print_info()
# h1.input_info("Юля", "23.05.1986", "45-46-98", "Россия", "Москва", "Чистопрудный бульвар, 1А")
# h1.print_info()
# h1.set_name("Юлия")
# h1.print_info()
# print(h1.get_name())
# h1.set_birthday("23.12.1990")
# print(h1.get_birthday())
# h1.print_info()


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# Задача:
# Реализуйте класс "Person" с данными о сотруднике (имя, фамилия) и двумя методами.
# Вариант №1
# class Person:
#     skill = 10  # начальные данные, точка отсчета
#     name = ""
#     surname = ""
#
#     def print_info(self, name, surname):
#         self.name = name
#         self.surname = surname
#         print("Данные сотрудника:", self.name, self.surname)
#
#     def add_skill(self, k):
#         self.skill += k
#         print("Квалификация сотрудника:", self.skill, end="\n\n")
#
#
# p1 = Person()
# p1.print_info("Виктор", "Резник")
# p1.add_skill(3)  # первому сотруднику увеличиваем коэфф на 3, чтобы получить 13
#
# p2 = Person()
# p2.print_info("Анна", "Долгих")
# p2.add_skill(2)  # второму сотруднику увеличиваем коэфф на 2, чтобы получить 12


# Вариант №2
# class Person:
#     skill = 10  # статическое свойство, поэтому оно осталось за пределами __init__
#     count = 0  # 2
#
#     def __init__(self, name, surname):  # Инициализатор
#         self.name = name  # динамические свойства, поэтому они написаны внутри __init__
#         self.surname = surname
#         print("Инициализатор")
#         Person.count += 1
#
#     def __del__(self):  # финализатор (деструктор)
#         print("Удаление экземпляра:", self.__class__.__name__)
#
#     def print_info(self):
#         print("Данные сотрудника:", self.name, self.surname)
#
#     def add_skill(self, k):
#         self.skill += k
#         print("Квалификация сотрудника:", self.skill, end="\n\n")
#
#
# p1 = Person("Виктор", "Резник")
# p1.print_info()
# p1.add_skill(3)  # первому сотруднику увеличиваем коэфф на 3, чтобы получить 13
# # del p1  # разорвали ссылку на p1
# # p1 = 5
#
# p2 = Person("Анна", "Долгих")
# p2.print_info()
# p2.add_skill(2) # второму сотруднику увеличиваем коэфф на 2, чтобы получить 12
#
# # p3 = Person("Анна", "Долгих")
# print(p1.count)
# print(p2.count)
# print(Person.count)


# ****************************************
# ----------------------------------------------------------------
# Урок №23 Python от 13.03.2024
# Урок №1
# -----------------------------------------------

# Задача:
# Необходимо создать класс "Робот"

# class Robot:
#     k = 0
#
#     def __init__(self, name):
#         self.name = name
#         print("Инициализация робота:", self.name)
#         Robot.k += 1  # обращаемся к статистическому значению по имени класса и переменной (k)
#
#     def __del__(self):  # здесь мы будем выключать роботов
#         print(self.name, "выключается!")
#         Robot.k -= 1
#         if Robot.k == 0:
#             print(self.name, "был последним")
#         else:
#             print("Работающих роботов осталось:", Robot.k)
#
#     def say_hi(self):
#         print("Приветствую! Меня зовут:", self.name)
#
#
# droid1 = Robot('R2-D2')
# droid1.say_hi()
# print("Численность роботов:", Robot.k)
#
# droid2 = Robot('C-3PO')
# droid2.say_hi()
# print("Численность роботов:", Robot.k)
#
# droid3 = Robot('P-2CO')
# droid3.say_hi()
# print("Численность роботов:", Robot.k)
#
# print("\nЗдесь роботы могут проделать какую-то работу\n")
# print("Роботы закончили свою работу. Давайте их выключим")
#
# del droid1  # del - удаляем ссылку на экземпляр класса (droid1)
# del droid2
# del droid3
# # droid3 = 5
# print("Численность роботов:", Robot.k)


# ************************************

# Задача:
# Необходимо создать класс "Point"
# Вариант №1 - исходный

# class Point:
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# p1 = Point(5, 10)
# print(p1.x, p1.y)
# p1.x = 100  # передали и числа, но числа и строки вместе нельзя, поэтому создаем защиту
# p1.y = "abc"
# print(p1.x, p1.y)
# print(p1.__dict__)  # {'x': 100, 'y': 'abc'}


# ***  ***  ***
# НОВАЯ ТЕМА - МОДИФИКАТОРЫ ДОСТУПА
# Модификаторы доступа:
# public - self.name (открытое общедоступное свойство)
# protected - self._name (при наследовании защищенное свойство)
# private - self.__name (закрытое свойство) - это значит, что доступ извне к этому свойству запрещен

# Задача:
# Инкапсуляция - это сокрытие данных, чтобы мы не могли написать в переменную все что угодно
# Вариант №2 - закрытые переменные

# Необходимо создать класс "Point"
# class Point:
#     def __init__(self, x, y):
#         self.__x = x  # _Point__x - не можем обратиться к self.__x, потому что имена поменялись на _Point__x
#         self.__y = y  # _Point__y
#
# # В сеттере мы можем поставить защиту, указать условие
#     def set_coord(self, x, y):  # создаем функцию и заново перезаписываем переменные
#         if (isinstance(x, int) or isinstance(x, float)) and (isinstance(y, int) or isinstance(y, float)):
#             self.__x = x
#             self.__y = y
#         else:
#             print("Координаты должны быть числами")
#
#     def get_coord(self):
#         return self.__x, self.__y
#
#
# p1 = Point(5, 10)
# print(p1.get_coord())
# p1.set_coord(500, 200)
# print(p1.get_coord())
# print(p1.__dict__)


# ************************************

# Вариант №3 - у нас и методы могут быть закрытыми с двумя нижними подчеркиваниями
# class Point:
#     def __init__(self, x, y):
#         self.__x = self.__y = 0  # допустим
#         if Point.__check_value(x) and Point.__check_value(y):
#             self.__x = x  # _Point__x
#             self.__y = y  # _Point__y
#
#     def __check_value(a):  # _Point__check_value - закрытые методы
#         if isinstance(a, int) or isinstance(a, float):
#             return True
#         return False
#
#     def set_coord(self, x, y):
#         if Point.__check_value(x) and Point.__check_value(y):
#             self.__x = x
#             self.__y = y
#         else:
#             print("Координаты должны быть числами")
#
#     def get_coord(self):
#         return self.__x, self.__y
#
#     def set_x(self, x):
#         if Point.__check_value(x):
#             self.__x = x
#         else:
#             print("Координата X должны быть числом")
#
#     def set_y(self, y):
#         if Point.__check_value(y):
#             self.__y = y
#         else:
#             print("Координата Y должны быть числом")
#
#     def get_x(self):
#         return self.__x
#
#     def get_y(self):
#         return self.__y
#
#
# p1 = Point(5, 10)
# print(p1.get_coord())
# # p1.set_coord("100", 200)
# # print(p1.get_coord())
# # print(p1.__dict__)
# # print(Point.__dict__)
#
# p1.set_x(50)
# print(p1.get_x())
# p1.set_y(30)
# print(p1.get_y())
# print(p1.__dict__)  # {'_Point__x': 50, '_Point__y': 30}
# p1._Point__x = 111
# print(p1.__dict__)
# print(p1._Point__x)


# ----------------------------------------------------------------
# Урок №2
# ----------------------------
# import math
#
#
# # Задача:
# # Создать класс Rectangle, описывающий прямоугольник.
# class Rectangle:
#     __slots__ = ("__length", "__width", "x")  # сюда добавляем свойства, которые мы можем использовать
#     # у нас в классе Rectangle, остальные мы запретили добавлять
#
#     def __init__(self, length, width):  # мы параметры (длина и ширина) инициализировали и закрыли
#         # с помощью двойного нижнего подчеркивания
#         self.__length = length
#         self.__width = width
#
#     def __check_value(a):  # ставим защиту, чтобы не вводили буквы, строки
#         if isinstance(a, int) or isinstance(a, float):
#             return True
#         return False
#
#     def set_length(self, length):  # создаем сетты по отдельности на каждую из координат,
#         # чтобы потом их можно было менять
#         if Rectangle.__check_value(length):  # если класс Rectangle соответствует проверке (__check_value)
#             # для длины, то сетт - выполняется
#             self.__length = length
#
#     def set_width(self, width):
#         if Rectangle.__check_value(width):
#             self.__width = width
#
#     def get_length(self):
#         return self.__length
#
#     def get_width(self):
#         return self.__width
#
#     def get_area(self):  # Метод вычисляет площадь - с помощью (get)
#         return self.__length * self.__width
#
#     def get_perimeter(self):  # Метод вычисляет периметр - с помощью (get)
#         return 2 * (self.__length + self.__width)
#
#     def get_hypotenuse(self):  # Метод вычисляет гипотенузу прямоугольника - с помощью (get)
#         return round(math.sqrt(self.__length ** 2 + self.__width ** 2), 2)
#
#     def get_draw(self):  # нарисуем звездочки
#         print(("*" * self.__width + "\n") * self.__length)
#
#
# rect = Rectangle(4, 12)
# print(rect.__dict__)  # {'_Rectangle__length': 4, '_Rectangle__width': 12}
#
# # rect.set_length(3)
# # rect.set_width(9)
# # print(rect.__dict__)  # {'_Rectangle__length': 3, '_Rectangle__width': 9}
#
# print("Длина прямоугольника:", rect.get_length())  # Длина прямоугольника: 3
# print("Ширина прямоугольника:", rect.get_width())  # Ширина прямоугольника: 9
#
# print("Площадь прямоугольника:", rect.get_area())  # Площадь прямоугольника: 27
# print("Периметр прямоугольника:", rect.get_perimeter())  # Периметр прямоугольника: 24
# print("Гипотенуза прямоугольника:", rect.get_hypotenuse())  # Гипотенуза прямоугольника: 9.49
#
# rect.get_draw()
#
# rect.x = 20
# print(rect.x)  # все добавляется, давайте попробуем сделать так, чтобы добавлять было нельзя с помощью (__slots__)
# print(rect.__dict__)


# Задача:
# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __get_x(self):  # геттер мы закрыли
#         print("Геттер")
#         return self.__x
#
#     def __set_x(self, x):  # сеттер мы закрыли
#         self.__x = x
#         print("Сеттер")
#
#     def __del_x(self):
#         print("Удаление свойства")
#         del self.__x
#
#     x = property(__get_x, __set_x, __del_x)
#
#
# p1 = Point(5, 10)
# p1.x = 100
# print(p1.x)
# del p1.x
# print(p1.__dict__)


# Задача:
# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __check_value(a):
#         if isinstance(a, int) or isinstance(a, float):
#             return True
#         return False
#
#     @property
#     def x(self):
#         return self.__x
#
#     @x.setter
#     def x(self, x):
#         if Point.__check_value(x):
#             self.__x = x
#
#     @x.deleter
#     def x(self):
#         del self.__x
#
#     # x = property(__get_x, __set_x, __del_x)
#
#
# p1 = Point(5, 10)
# p1.x = 100
# print(p1.x)
# del p1.x
# print(p1.__dict__)


# Задача:
# Создать класс для преобразования килограмм в фунты
# class KgToPounds:
#     def __init__(self, kg):
#         self.__kg = kg
#
#     @property
#     def kg(self):
#         return self.__kg
#
#     @kg.setter
#     def kg(self, new_kg):
#         if isinstance(new_kg, (int, float)):
#             self.__kg = new_kg
#         else:
#             print("Килограммы задаются только числами")
#
#     def to_pound(self):
#         return self.__kg * 2.205
#
#
# weight = KgToPounds(12)
# print(weight.kg, "кг =>", weight.to_pound(), "фунтов")  # 12 кг => 26.46 фунтов
# weight.kg = 41
# print(weight.kg, "кг =>", weight.to_pound(), "фунтов")  # 41 кг => 90.405 фунтов
# weight.kg = "два"  # Килограммы задаются только числами


#
# СТАТИЧЕСКИЕ МЕТОДЫ:
# def method() - метод и пустые скобки

# class Point:
#     __count = 0
#
#     def __init__(self, x=0, y=0):
#         self.__x = x
#         self.__y = y
#         Point.__count += 1
#
#     @staticmethod
#     def get_count():
#         return Point.__count
#
#
# p1 = Point()
# p2 = Point()
# p3 = Point()
# p4 = Point()
# p5 = Point()
#
# print(Point.get_count())


#
# ****************************************
# ----------------------------------------------------------------
# Урок №24 Python от 18.03.2024
# Урок №1
# -----------------------------------------------

# 01 июня 2023 г. Статический метод в Python — это метод, который связан с классом, а не с его экземплярами.
# Чтобы быть вызванным, он не требует создания экземпляра класса и не имеет доступа к экземпляру.
# Статические методы в Python объявляются с использованием декоратора @staticmethod.

# Остановились мы на статических методах - def method() - метод и пустые скобки
# class Change:
#     @staticmethod
#     def inc(x):
#         return x + 1
#
#     @staticmethod
#     def dec(x):
#         return x - 1
#
#
# print(Change.inc(10), Change.dec(10))  # 11 9 - обращение через класс
# ch = Change()
# print(ch.inc(10), Change.dec(10))


# Задача:
# Создайте класс, статические методы.
# Создайте класс для подсчета максимума из четырех аргументов (3, 5, 7, 9), минимума из четырех аргументов.
# Среднеарифметического из четырех аргументов, факториала аргумента (5). Через статические методы.
# class Fact:
#
#     @staticmethod
#     def max(*args):
#         return max(args)
#
#     @staticmethod
#     def min(*args):
#         return min(args)
#
#     @staticmethod
#     def fact(arg):
#         factor = 1
#         for i in range(1, arg + 1):
#             # 5! = 1 * 2 * 3 * 4 * 5
#             factor *= i
#         return factor
#
#     @staticmethod
#     def avg(*args):
#         avg = sum(args) / len(args)
#         return avg
#
#
# print(Fact.max(3, 5, 7, 9))  # обращаемся к def max(*args)
# print(Fact.min(3, 5, 7, 9))
# print(Fact.fact(5))
# print(Fact.avg(3, 5, 7, 9))


# НОВАЯ ТЕМА - методы класса - def method(cls) - @classmethod
# Самые непонятные для восприятия

# В Python есть три типа методов: методы экземпляра, методы класса и статические методы.
# Методы экземпляра класса — это методы, которые работают с отдельными экземплярами класса. Эти методы
# имеют доступ к данным, связанным с конкретным экземпляром класса, и могут изменять эти данные.

# Метод класса - как можно заметить, метод класса вместо того, чтобы принимать аргумент (self),
# принимает аргумент (cls). При вызове метода этот аргумент указывает на сам класс, а не на экземпляр класса.
# Эти методы меняют не сам класс, а свойства внутри класса.


# Задача:
# Проверка дат на валидность
# class Date:
#     def __init__(self, day, month, year):
#         self.day = day
#         self.month = month
#         self.year = year
#
#     @classmethod
#     def from_string(cls, string_date):
#         day, month, year = map(int, string_date.split("."))
#         # date1 = cls(day, month, year)  # эта строка создает нам экземпляр класса
#         return cls(day, month, year)
#
#     @staticmethod  # проверка на валидность с помощью статического метода
#     def is_date_valid(date_as_string):
#         if date_as_string.count('.') == 2:
#             day, month, year = map(int, date_as_string.split("."))
#             return day <= 31 and month <= 12 and year <= 3999
#
#     def string_to_db(self):  # обычный метод, метод экземпляра класса
#         return f"{self.year}-{self.month}-{self.day}"  # здесь задали формат
#
#
# dates = [
#     "15.12.2024",
#     "23-10-2023",
#     "01.01.2021",
#     "12.31.2020"
# ]
#
# for d in dates:
#     if Date.is_date_valid(d):
#         date = Date.from_string(d)
#         print(date.string_to_db())
#     else:
#         print("Неправильная дата или формат строки с датой")
#
#
# date2 = Date.from_string("23.10.2023")  # Обратились к имени класса (Date) и вызываем метод класса .from_string
# print(date2.string_to_db())  # 2023-10-23
#
# date3 = Date.from_string("15.15.2024")
# print(date3.string_to_db()) # 2024-15-15
#
# string_date = "23.10.2023"
# day, month, year = map(int, string_date.split("."))  # 23 10 2023 - парсинг строки
# date = Date(day, month, year)
# print(day, month, year)
# # print(date.string_to_db())


# Задача:
# *** Новая большая задача ***
# Создать класс "Account", представляющий собой банковский счет

# class Account:
#     rate_usd = 0.013  # статические переменные, статические свойства
#     rate_eur = 0.011
#     suffix = "RUB"
#     suffix_usd = "USD"
#     suffix_eur = "EUR"
#
#     def __init__(self, surname, num, percent, value):  # что принимает инициализатор, это динамические свойства,
#         # которые будем менять и их можно изменить
#         self.surname = surname
#         self.num = num
#         self.percent = percent
#         self.value = value
#         print(f"Счет #{self.num} принадлежащий {self.surname} был открыт.")
#         print("*" * 50)
#
#     def __del__(self):
#         print("*" * 50)
#         print(f"Счет #{self.num} принадлежащий {self.surname} был закрыт.")
#
#     @classmethod  # метод класса
#     def set_usd_rate(cls, rate):
#         cls.rate_usd = rate
#
#     @classmethod
#     def set_eur_rate(cls, rate):
#         cls.rate_eur = rate
#
#     @staticmethod  # статический метод
#     def convert(value, rate):  # приниматься будет новый курс (rate)
#         return value * rate
#
#     def covert_to_usd(self):
#         usd_val = Account.convert(self.value, Account.rate_usd)  # сюда передаем существующее динамическое
#         # свойство (self.value) и существующее статическое свойство (Account.rate_usd)
#         print(f"Состояние счета: {usd_val} {Account.suffix_usd}.")
#
#     def covert_to_eur(self):
#         eur_val = Account.convert(self.value, Account.rate_eur)
#         print(f"Состояние счета: {eur_val} {Account.suffix_eur}.")
#
#     def edit_owner(self, surname):
#         self.surname = surname
#
#     def add_percents(self):
#         self.value += self.value * self.percent
#         print("Проценты были успешно начислены!")
#         self.print_balance()
#
#     def withdraw_money(self, val):
#         if val > self.value:
#             print(f"К сожалению, у вас нет {val} {Account.suffix}")
#         else:
#             self.value -= val
#             print(f"{val} {Account.suffix} было успешно снято!")
#         self.print_balance()
#
#     def add_money(self, val):
#         self.value += val
#         print(f"{val} {Account.suffix} было успешно добавлено!")
#         self.print_balance()
#
#     def print_balance(self):  # обращение к экземпляру класса
#         print(f"Текущий баланс {self.value} {Account.suffix}")
#
#     def print_info(self):  # обращение к экземпляру класса
#         print("Информация о счете:")
#         print("-" * 30)
#         print(f"#{self.num}")
#         print(f"Владелец: {self.surname}")
#         self.print_balance()
#         print(f"Проценты: {self.percent:.0%}")
#         print("-" * 30)
#
#
# acc = Account("Долгих", "12345", 0.03, 1000)
# acc.print_balance()
# acc.print_info()
# acc.covert_to_usd()
# acc.covert_to_eur()
# print()
#
# Account.set_usd_rate(2)
# acc.covert_to_usd()
# Account.set_eur_rate(3)
# acc.covert_to_eur()
# print()
#
# acc.edit_owner("Дюма")
# acc.print_info()
# print()
#
# acc.add_percents()
# print()
#
# acc.withdraw_money(3000)
# print()
#
# acc.withdraw_money(100)
# print()
#
# acc.add_money(5000)
# print()
#
# acc.withdraw_money(3000)
# print()


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Задача:
# *** Наша же задача *** меняем местами расположение методов

# Задача:
# class UserDate:
#     def __init__(self, fio, old, ps, weight):
#         # self.verify_fio(fio)
#         # self.verify_old(old)
#         # self.verify_ps(ps)
#         # self.verify_weight(weight)
#
#         self.fio = fio
#         self.old = old
#         self.password = ps
#         self.weight = weight
#
#     @staticmethod
#     def verify_fio(fio):
#         if not isinstance(fio, str):
#             raise TypeError("ФИО должно быть строкой")
#         f = fio.split()  # ['Волков', 'Игорь', 'Николаевич'] - Метод split() в Python разделяет
#         # строку на список подстрок по разделителю.
#         if len(f) != 3:  # если кол-во элементов не 3
#             raise TypeError("Неверный формат ФИО")
#         letters = "".join(re.findall('[a-zа-яё-]', fio, re.IGNORECASE))  # ВолковИгорьНиколаевич -
#         # re.IGNORECASE - поиск без учета регистра
#         # В Python, когда перед методом join() стоят кавычки и точка, например, "".join(), это означает, что
#         # строка между кавычками будет использована в качестве разделителя между элементами,
#         # которые объединяются.
#         for s in f:
#             if len(s.strip(letters)) != 0:  # Метод strip() — удаляет символы, как слева так и справа,
#                 # на основе переданного аргумента
#                 raise TypeError("В ФИО можно использовать только буквы и дефис")
#
#     @staticmethod
#     def verify_old(old):
#         if not isinstance(old, int) or old < 14 or old > 120:
#             raise TypeError("Возраст должен быть числом в диапазоне от 14 до 120 лет")
#
#     @staticmethod
#     def verify_weight(w):
#         if not isinstance(w, float) or w < 30:
#             raise TypeError("Вес должен быть вещественным числом от 30 кг и выше")
#
#     @staticmethod
#     def verify_ps(ps):
#         if not isinstance(ps, str):
#             raise TypeError("Паспорт должен быть строкой")
#         s = ps.split()  # ['1234', '567890']
#         if len(s) != 2 or len(s[0]) != 4 or len(s[1]) != 6:
#             raise TypeError("Неверный формат паспорта")
#         for p in s:
#             if not p.isdigit():
#                 raise TypeError("Серия и номер паспорта должны быть числами")
#
#     @property
#     def fio(self):
#         return self.__fio
#
#     @fio.setter
#     def fio(self, fio):
#         self.verify_fio(fio)
#         self.__fio = fio
#
#     @property
#     def old(self):
#         return self.old
#
#     @old.setter
#     def old(self, old):
#         self.verify_old(old)
#         self.__old = old
#
#     @property
#     def password(self):
#         return self.__password
#
#     @password.setter
#     def password(self, value):
#         self.verify_ps(value)
#         self.__password = value
#
#     @property
#     def weight(self):
#         return self.__weight
#
#     @weight.setter
#     def weight(self, value):
#         self.verify_weight(value)
#         self.__weight = value
#
#
# p1 = UserDate("Волков Игорь Николаевич", 26, "1234 567890", 80.8)
# # "Волков Игорь Николаевич"
#
# p1.fio = "Соболев Игорь Николаевич"  # здесь отрабатывает сеттер
# print(p1.fio)  # здесь отрабатывает геттер - получить
# print(p1.__dict__)


# ****************************************
# ----------------------------------------------------------------
# Урок №25 Python от 20.03.2024
# Урок №1
# -----------------------------------------------

# НАСЛЕДОВАНИЕ
# Задача:
# Начальная стадия, повторяется (__init__) инициализатор, принцип DRY (do not repeat yourself)
# Пока создаем просто отдельные классы

# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):  # Returns str(self)
#         # return "(" + str(self.__x) + ", " + str(self.__y) + ")"
#         return f"({self.__x}, {self.__y})"  # f - строка по умолчанию нам возвращает строковое представление
#
#
# class Line:  # линия
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#     def draw_line(self) -> None:
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# class Rect:  # прямоугольник
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#     def draw_rect(self):  # -> None
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# line = Line(Point(1, 2), Point(10, 20))
# # line = Line(45, Point(10, 20), "yellow", 5)
# line.draw_line()
#
# rect = Rect(Point(30, 40), Point(70, 80))
# rect.draw_rect()


# Задача:
# Та же задача, но с добавлением класса родительского класса (Prop), будем создавать родительский класс и
# дочерние (Line) и (Rect)
# Родительский класс (Prop), от него будут заимствования в другие классы

# (object) - это один общий родитель для всех!  является базовым классом для всех объектов в Python.

# class Point:  # класс (Point) наследуется от класса (object)
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):  # Returns str(self)
#         # return "(" + str(self.__x) + ", " + str(self.__y) + ")"
#         return f"({self.__x}, {self.__y})"
#
#
# print(issubclass(Point, object))  # True - ответы на вопросы, наследуется ли класс (Point) от класса (object), да
# print(issubclass(Point, str))  # False - наследуется ли класс (Point) от класса (str), нет
#
#
# class Prop:  # Prop(object) - Родительский класс (Prop), можно и без (object) - сюда переносим наш общий
#     # инициализатор со всеми сходными данными
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#
# class Line(Prop):  # Дочерний класс - Line(Prop)
#     def draw_line(self):  # -> None
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# class Rect(Prop):  # Дочерний класс - Rect(Prop)
#     def draw_rect(self):  # -> None
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# line = Line(Point(1, 2), Point(10, 20), "yellow", 5)
# line.draw_line()
#
# rect = Rect(Point(30, 40), Point(70, 80))
# rect.draw_rect()
#
# print(issubclass(Line, Prop))  # True - наследуется ли класс (Line) от класса (Prop), да
# print(issubclass(Line, Rect))  # False - наследуется ли класс (Line) от класса (Rect), нет
#
# print(Point.__dict__)
# print(Line.__dict__)
# print(Prop.__dict__)


# Новенькое ***
# Это мы все работали с переменными с одним нижним подчеркиванием (protected) в инициализаторе родительского
# класса, а чтобы работать с двумя нижними подчеркиваниями при наследовании, нам нужны геттеры и сеттеры

# Та же задача, с добавлением геттеров и сеттеров

# class Point:  # класс (Point) наследуется от класса (object)
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):  # Returns str(self)
#         # return "(" + str(self.__x) + ", " + str(self.__y) + ")"
#         return f"({self.__x}, {self.__y})"
#
#
# class Prop:  # Prop(object) - Родительский класс (Prop), можно и без (object) - сюда переносим наш общий
#     # инициализатор со всеми сходными данными
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):  # при наследовании,
#         # чтобы не использовать геттеры, лучше использовать одно нижнее подчеркивание
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self.__width = width  # здесь добавили второе нижнее подчеркивание
#         print("Переопределенный инициализатор Prop")
#
#     def get_width(self):  # геттер на получение ширины
#         return self.__width
#
#
# class Line(Prop):  # Дочерний класс - Line(Prop), если в дочернем укажем инициализатор
#     def __init__(self, *args):
#         super().__init__(*args)  # вместо нижнего добавили super() и (self) не передаем
#         print("Переопределенный инициализатор Line")
#         # Prop.__init__(self, *args)  # после этого инита Line, мы внутри этого инициализатора вызываем инициализатор
#         # родительского класса (Prop)
#
#     def draw_line(self):  # -> None
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self.get_width()}")  # и здесь!
#
#
# # class Rect(Prop):  # Дочерний класс - Rect(Prop)
# #     def draw_rect(self):  # -> None
# #         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# line = Line(Point(1, 2), Point(10, 20), "yellow", 5)
# line.draw_line()
#
# # rect = Rect(Point(30, 40), Point(70, 80))
# # rect.draw_rect()


# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Новая задача:
# class Figure:  # мы на основе этого класса (Фигур) будем делать дочерние классы (прямоугольники)
#     def __init__(self, color):  # общее свойство для всех фигур - это цвет, и все классы, которые будут
#         # наследоваться у этого класса (Figure), будут брать это свойство (color) у родительского класса
#         self.color = color
#
#
# class Rectangle(Figure):  # дочерний класс
#     def __init__(self, width, height, color):
#         self.__width = width  # тут свойства мы сделаем закрытыми и сделаем проверку, чтобы не передавали
#         # строки и негативные числа
#         self.__height = height
#         super().__init__(color)
#
#     @property  # делаем property, геттеры и сеттеры только на __width и __height, потому что они у нас закрытые
#     def width(self):
#         return self.__width
#
#     @width.setter
#     def width(self, w):
#         if w > 0:
#             self.__width = w
#         else:
#             raise ValueError("Ширина должны быть положительным числом")
#
#     @property
#     def height(self):
#         return self.__height
#
#     @height.setter
#     def height(self, h):
#         if h > 0:
#             self.__height = h
#         else:
#             raise ValueError("Высота должны быть положительным числом")
#
#
#     def area(self):  # находим площадь фигуры
#         print(f"Площадь {self.color} прямоугольника", end=" ")
#         return self.__width * self.__height
#
#
# rect = Rectangle(10, 20, "green")
# print(rect.color)
#
# # rect.width = 50
# # print(rect.width)
# print(rect.area())  # Площадь green прямоугольника 200


# Задача:
# class Rect:
#     def __init__(self, width, height):
#         self.width = width
#         self.height = height
#
#     def show_rect(self):  # метод рисует (показывает нам) прямоугольник, его ширину и высоту
#         print(f"Прямоугольник:\nШирина: {self.width}\nВысота: {self.height}")
#
#
# class RectFon(Rect):  # цвет фона
#     def __init__(self, width, height, background):  # сюда добавили ширину и высоту из родительского класса,
#         # и плюс цвет фона (background)
#         super().__init__(width, height)  # синхронизировали с родительским классом, передали ширину и высоту
#         self.background = background  # дополнительное свойство - background
#
#     def show_rect(self):
#         super().show_rect()  # одинаковые названия -  def show_rect(self), поэтому мы используем super(), чтобы
#         # получить данные из родительского класса
#         print("Фон: ", self.background)
#
#
# class RectBorder(Rect):
#     def __init__(self, width, height, px, solid, red):
#         super().__init__(width, height)
#         self.px = px
#         self.solid = solid
#         self.red = red
#
#     def show_rect(self):
#         super().show_rect()
#         print(f"Рамка: {self.px} {self.solid} {self.red}")
#
#
# shape1 = RectFon(400, 200, "yellow")
# shape1.show_rect()
# print()
#
# shape2 = RectBorder(600, 300, "1px", "solid", "red")
# shape2.show_rect()


# Результат:
# Прямоугольник:
# Ширина: 400
# Высота: 200
# Фон: yellow
#
# Прямоугольник:
# Ширина: 600
# Высота: 300
# Рамка: 1px solid red


# Задача:
# Наследование от встроенных элементов
# class Vector(list):  # от list - списка
#     def __str__(self):  # мы сейчас получили строковое представление list - 1 2 3
#         return " ".join(map(str, self))  # метод .join не будет работать с числами, работает только со строками,
#         # поэтому мы вначале преобразовали все в строки с помощью map(str, self), а потом только применили метод
#         # (.join)
#
#
# v = Vector([1, 2, 3])
# print(v)
# print(type(v))


# Задача:
# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"
#
#
# class Prop:
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#
# class Line(Prop):
#     def draw_line(self):
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#     def set_coord(self, sp: Point = None, ep: Point = None):  # Перегрузка методов
#         if ep is None:
#             self._sp = sp
#         elif sp is None:
#             self._ep = ep
#         else:
#             self._sp = sp
#             self._ep = ep
#
#
# line = Line(Point(1, 2), Point(10, 20))
# line.draw_line()
#
# line.set_coord(Point(12, 18), Point(100, 200))
# line.draw_line()
#
# line.set_coord(Point(-10, -20))  # здесь мы передали только первую координату, которая придет в (sp), а (ep) примет
# # на себя значение (None), как несуществующая
# line.draw_line()
#
# line.set_coord(ep=Point(500, 700))  # теперь мы хотим, чтобы перезаписалось второе значение, то есть (ep), и
# # его сразу же в условии и запишем ep=Point
# line.draw_line()


#
# ****************************************
# ----------------------------------------------------------------
# Урок №26 Python от 25.03.2024
# Урок №1
# -----------------------------------------------

# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"
#
#
# class Prop:
#     def __init__(self, sp: Point, ep: Point, color: str = "red", width: int = 1):
#         self._sp = sp
#         self._ep = ep
#         self._color = color
#         self._width = width
#
#     def draw(self):  # это абстрактный метод (без реализации) и он теперь должен быть реализован и во всех
#         # других дочерних классах, наследуемых от (Prop)
#         raise NotImplementedError("В дочернем классе должен быть реализован метод draw()")  # Нереализованная ошибка
#
#
# class Line(Prop):
#     def draw(self):
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# class Rect(Prop):
#     def draw(self):
#         print(f"Рисование прямоугольника: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# class Ellipse(Prop):
#     def draw(self):
#         print(f"Рисование эллипса: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# figs = list()
# figs.append(Line(Point(0, 0), Point(10, 10)))
# figs.append(Line(Point(10, 10), Point(10, 20)))
# figs.append(Rect(Point(50, 50), Point(100, 100)))
# figs.append(Ellipse(Point(-10, -10), Point(30, 30)))
#
#
# for f in figs:
#     f.draw()


# НОВАЯ ТЕМА ***
# Абстрактные методы - это методы без реализации
# Абстрактные классы

# Абстрактным называется класс, который содержит один и более абстрактных методов. Абстрактным называется
# объявленный, но не реализованный метод. Абстрактные классы не могут быть инстанциированы, от них нужно
# унаследовать, реализовать все их абстрактные методы и только тогда можно создать экземпляр такого класса.
#
# from abc import ABC, abstractmethod
#
#
# class Chess(ABC):  # абстрактный класс
#     def draw(self):
#         print("Нарисовал шахматную фигуру")
#
#     @abstractmethod
#     def move(self):  # абстрактный метод
#         print("Метод move() в базовом классе")
#
#
# class Queen(Chess):  # класс Queen наследуется от родительского класса (Chess), он должен реализовать все
#     # абстрактные методы своего родительского класса
#     def move(self):
#         super().move()
#         print("Ферзь перемещен на e2e4")
#
#
# # q = Chess()  # К абстрактному классу мы не можем создать экземпляр класса
# q = Queen()
# q.draw()
# q.move()


# from math import pi
#
#
#
# # Задача:
# # Создайте базовый класс "Стол" с использованием абстрактного метода
#
# class Table:
#     def __init__(self, width=None, length=None, radius=None):  # radius=None - чтобы не передавать третий элемент
#         if radius is None:  # если у нас радиус имеет значение None, то тогда мы будем инициализировать только
#             # self._width и self._length
#             if length is None:
#                 self._width = self._length = width
#             else:
#                 self._width = width
#                 self._length = length
#         else:  # а иначе, мы будем инициализировать только значение радиус
#             self._radius = radius
#
#     def calc_area(self):  # абстрактный метод без декоратора и создания абстрактного класса
#         raise NotImplementedError("В дочернем классе должен быть определен метод calc_area()")
#
#
# class SqTable(Table):  # наследуется от класса (Table)
#     def calc_area(self):  # здесь находим площадь прямоугольного стола
#         return self._width * self._length
#
#
# class RoundTable(Table):  # наследуется от класса (Table)
#     def calc_area(self):  # здесь находим площадь круглого стола
#         return round(pi * self._radius ** 2, 2)
#
#
# t = SqTable(20, 10)
# print(t.__dict__)  # {'_width': 20, '_length': 10, '_radius': None}
# print(t.calc_area())  # 200
#
# t1 = SqTable(20)
# print(t1.__dict__)  #
# print(t1.calc_area())  #
#
# t2 = RoundTable(radius=20)
# print(t2.__dict__)
# print(t2.calc_area())


# from abc import ABC, abstractmethod

# Задача:
# Создайте базовый абстрактный класс "Валюта" c @abstractmethod

# from abc import ABC, abstractmethod
#
#
# class Currency(ABC):
#     suffix = "RUB"
#
#     def __init__(self, value):
#         self.value = value
#
#     @abstractmethod
#     def convert_to_rub(self):
#         pass
#
#     @abstractmethod
#     def print_value(self):
#         print(self.value, end=" ")
#
#     def show(self):
#         print(f"= {self.convert_to_rub():.2f} {Currency.suffix}")
#
#
# class Dollar(Currency):
#     rate_to_rub = 74.16
#     suffix = "USD"
#
#     def convert_to_rub(self):
#         return self.value * Dollar.rate_to_rub
#
#     def print_value(self):
#         super().print_value()
#         print(Dollar.suffix, end=" ")
#
#
# class Euro(Currency):
#     rate_to_rub = 90.14
#     suffix = "EUR"
#
#     def convert_to_rub(self):
#         return self.value * Euro.rate_to_rub
#
#     def print_value(self):
#         super().print_value()
#         print(Euro.suffix, end=" ")
#
#
# d = [Dollar(5), Dollar(10), Dollar(50), Dollar(100)]
# e = [Euro(5), Euro(10), Euro(50), Euro(100)]
# print("*" * 50)
# for elem in d:
#     elem.print_value()
#     elem.show()
#
# print("*" * 50)
# for elem in e:
#     elem.print_value()
#     elem.show()


# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# НОВАЯ ТЕМА ***
# Интерфейсы.
# Интерфейсы - это какой-то класс, в котором есть ТОЛЬКО абстрактные методы, там нет других свойств,
# нет других методов
# То есть, абстрактный класс - это класс, который говорит, ЧТО должно быть в дочерних классах

# from abc import ABC, abstractmethod
#
#
# class Father(ABC):
#     @abstractmethod
#     def display1(self):
#         pass
#
#     @abstractmethod
#     def display2(self):
#         pass
#
#
# class Child(Father):
#     def display1(self):
#         print("Child Class")
#
#
# class GrandChild(Child):
#     def display2(self):
#         print("GrandChild Class")
#
#
# ch = GrandChild()
# ch.display1()
# ch.display2()


# Вложенные классы

# Вложенные классы, также известные как внутренние классы, являются классами, определенными внутри
# других классов. В Python, вложенные классы могут быть использованы для повышения читаемости и
# организации кода, а также для создания более сложных структур данных.

# Вложенные классы - это когда класс лежит внутри другого класса

# class MyOuter:
#     age = 18  # статическое свойство
#
#     def __init__(self, name):
#         self.name = name
#
#     @staticmethod  # статический метод
#     def outer_method():
#         print("outer_method")
#
#     def instance_method(self):
#         print("instance_method")
#
#     class MyInner:
#         def __init__(self, inner_name, obj): # obj - здесь мы хотим передать экземпляр класса MyOuter,
#             # то есть (out)
#             self.inner_name = inner_name
#             self.obj = obj
#
#         def inner_method(self):
#             print("Вложенный метод", MyOuter.age, MyOuter.outer_method(), self.obj.instance_method(),
#                   self.obj.name)  # MyOuter.age - получили доступ к статическому свойству (age = 18) и к
#             # статическому методу MyOuter.outer_method(), а к динамическим методам, нужно по другому поступать.
#             # Нужно добавить в методе (obj), инициализировать и обращаться с помощью (self)
#
#
# out = MyOuter('внешний')  # экземпляр наружного класса мы создали без проблем
# print(out.name)  # (out.) - это и есть наш (self.)
# inner = out.MyInner('внутренний', out)  # => MyOuter.MyInner("внутренний")
# print(inner.inner_name)  # внутренний
# inner.inner_method()


# Задача:

# class Color:  # основной класс
#     def __init__(self):
#         self.name = "Green"
#         self.lg = self.LightGreen()  # получаем доступ к вложенному классу
#         self.dg = self.DarkGreen()  # и здесь
#
#     def show(self):
#         print("Name:", self.name)
#
#     class LightGreen:  # вложенный класс
#         def __init__(self):
#             self.name = "Light Green"
#
#         def display(self):
#             print("Name:", self.name)
#
#     class DarkGreen:
#         def __init__(self):
#             self.name = "Dark Green"
#
#         def display(self):
#             print("Name:", self.name)
#
#
# outer = Color()
# outer.show()
# g = outer.lg
# g.display()
# g2 = outer.dg
# g2.display()
# print(g2.name)


# Задача:
# class Computer:
#     def __init__(self):
#         self.name = "PC001"
#         # self.os = self.OS()  # теперь за счет этих двух свойств у нас есть доступ ко всем методам, которые
#         # # есть во вложенных классах
#         # self.cpu = self.CPU()
#
#     class OS:
#         def system(self):
#             return "Windows 10"
#
#     class CPU:
#         def make(self):
#             return "Intel"
#
#         def model(self):
#             return "Core-i7"
#
#
# comp = Computer()
# # my_os = comp.os
# # my_cpu = comp.cpu
#
# my_os = Computer().OS()
# my_cpu = Computer().CPU()
#
# print(comp.name)
# print(my_os.system())
#
# print(my_cpu.make())
# print(my_cpu.model())


#
# ****************************************
# ----------------------------------------------------------------
# Урок №27 Python от 27.03.2024
# Урок №1
# -----------------------------------------------


# Итак, главное отличие между __str__ и __repr__ в Python заключается в их назначении: __str__ предназначен
# для создания «приятного» для чтения представления объекта, в то время как __repr__ предназначен для
# создания «официального» представления, которое может быть использовано для воссоздания объекта.
# class Cat:
#     def __init__(self, name):
#         self.name = name
#
#     def __repr__(self):  # для разработчика
#         return f"{self.__class__}: {self.name}"
#
#     def __str__(self):  # для пользователя
#         return f"{self.name}"
#
#
# cat = [Cat("Пушок"), Cat("Пушок")]
# print(cat)


# Маленькие магические методы

# Что такое магические методы?
# Магические методы, или dunder-методы (double underscore - методы с двойным подчёркиванием в имени), в Python
# начинаются и заканчиваются двойным подчеркиванием. Они позволяют нам определить специальное поведение
# для объектов, например, специальный метод __init__ для инициализации нового объекта.


# class Point:
#     def __init__(self, *args):  # *args - чтобы не указывать большое количество цифр
#         self.coord = args  # () tuple
#         self.color = "red"
#         self.width = 2
#
#     def __len__(self):
#         return len(self.coord)
#
#
# p = Point(1, 2)
# print(len(p))
#
# s = list([1, 2])
# print(len(s))  # 2 - смотрим длину списка


# import math
#
#
# class Point:
#     __slots__ = ('x', 'y', '__length')  # если поставить просто __slots__ = (), то все свойства будут в классе
#
#     # запрещены, если в скобочках написать переменные конкретные, они будут разрешены
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#         self.length = math.sqrt(x * x + y * y)
#
#     @property
#     def length(self):
#         return self.__length
#
#     @length.setter
#     def length(self, value):
#         self.__length = value
#
#
# p1 = Point(10, 20)
# print(p1.x, p1.y)
# # p1.z = 30
# # print(p1.z)
# p1.length = 20
# print(p1.length)


import math

# class Point:
#     __slots__ = ('x', 'y')
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# class Point2:
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# pt1 = Point(1, 2)
# pt2 = Point2(1, 2)
# # print(pt2.__dict__)
# print("pt1 =", pt1.__sizeof__())  # pt1 = 32
# print("pt2 =", pt2.__sizeof__() + pt2.__dict__.__sizeof__())  # pt2 = 296 - __dict__ - много весит


# class Point:
#     __slots__ = ('x', 'y')
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#
# class Point3D(Point):
#     __slots__ = 'z'
#
#     def __init__(self, x, y, z):
#         super().__init__(x, y)
#         self.z = z
#
#
# pt1 = Point(1, 2)
# pt3 = Point3D(10, 20, 30)
# # pt3.z = 3
# print(pt3.z)


# НОВАЯ ТЕМА:
# Множественное наследование
# Python поддерживает множественное наследование, то есть один класс может наследовать свойства
# и методы сразу от нескольких классов-родителей. Для этого достаточно указать их имена через запятую в
# скобках после имени класса-потомка.

# class Creature:
#     def __init__(self, name):
#         self.name = name
#
#
# class Animal(Creature):
#     def sleep(self):
#         print(self.name + " is sleeping")
#
#
# class Pet(Creature):
#     def play(self):
#         print(self.name + " is playing")
#
#
# class Dog(Animal, Pet):
#     def bark(self):
#         print(self.name + " is barking")
#
#
# beast = Dog("Buddy")
# beast.bark()
# beast.sleep()
# beast.play()


# class A:
#     def __init__(self):
#         print("Инициализатор класса A")
#
#
# class AA:
#     def __init__(self):
#         print("Инициализатор класса AA")
#
#
# class B(A):
#     def __init__(self):
#         print("Инициализатор класса B")
#
#
# class C(AA):
#     def __init__(self):
#         print("Инициализатор класса C")
#
#
# class D(B, C):
#     def __init__(self):
#         print("Инициализатор класса D")
#         B.__init__(self)  # вызов родительского класса B - Инициализатор класса B
#         C.__init__(self)  # вызов родительского класса C - Инициализатор класса C
#
#
# d = D()
# print(D.mro())  # [<class '__main__.D'>, <class 'object'>]
# # print(D.__mro__)  # (<class '__main__.D'>, <class 'object'>)


# class Point:
#     def __init__(self, x, y):
#         self.__x = x
#         self.__y = y
#
#     def __str__(self):
#         return f"({self.__x}, {self.__y})"
#
#
# class Styles:
#     def __init__(self, color="red", width=1):
#         print("Инициализатор Styles")
#         self._color = color
#         self._width = width
#
#
# class Pos:
#     def __init__(self, sp: Point, ep: Point, color="red", width=1):
#         print("Инициализатор Pos")
#         self._sp = sp
#         self._ep = ep
#         # Styles.__init__(self, color, width)
#         super().__init__(color, width) # по иерархии Pos берет свойства выше у Styles
#
#
# class Line(Pos, Styles):
#     def draw(self):
#         print(f"Рисование линии: {self._sp}, {self._ep}, {self._color}, {self._width}")
#
#
# l1 = Line(Point(10, 10), Point(100, 100), "green", 5)   #
# l1.draw()
#
# print(Line.mro())


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# МИКСИНЫ

# Они представляют собой простые классы, которые включают набор методов, предназначенных для добавления
# к другому классу, и позволяют расширять функциональность классов без глубокой иерархии наследования.

# class Goods:
#     def __init__(self, name, weight, price):
#         print("Init Goods")
#         self.name = name
#         self.weight = weight
#         self.price = price
#         super().__init__()  # здесь указали @object
#
#     def print_info(self):
#         print(f"{self.name}, {self.weight}, {self.price}")
#
#
# class MixinLog:  # этот класс дополнительный, он по факту не имеет особой важности
#     ID = 0
#
#     def __init__(self):
#         print("Init Mixin")
#         MixinLog.ID += 1
#         self.id = MixinLog.ID
#
#     def save_sell_log(self):
#         print(f"{self.id}: товар был продан в 00:00 часов")
#
#
# class NoteBook(Goods, MixinLog):
#     pass
#
#
# n = NoteBook("HP", 1.5, 35000)
# n.print_info()
# n.save_sell_log()
#
# n1 = NoteBook("HP", 1.5, 35000)
# n1.save_sell_log()


# Перегрузка операторов

# Перегрузка операторов в Python – это возможность с помощью специальных методов в классах
# переопределять различные операторы языка (+, -. =, * и тд). Имена таких методов включают двойное подчеркивание
# спереди и сзади.

# 24 * 60 * 60 = 86400 - число секунд в одном дне

# class Clock:
#     __DAY = 86400  # это количество секунд в одном дне
#
#     def __init__(self, sec: int):  # инициализатор должен принимать кол-во секунд в типе данных int
#         if not isinstance(sec, int):  # если секунды не int
#             raise ValueError("Секунды должны быть целым числом")
#         self.sec = sec % self.__DAY  # это мы нашли кол-во секунд от того количества, которое мы передали
#
#     def get_format_time(self):
#         s = self.sec % 60  # находим секунды
#         m = (self.sec // 60) % 60  # находим минуты
#         h = (self.sec // 3600) % 24  # часы
#         return f"{Clock.get_form(h)}:{Clock.get_form(m)}:{Clock.get_form(s)}"
#
#     @staticmethod  # этот формат пишем просто для удобства
#     def get_form(x):
#         return str(x) if x > 9 else "0" + str(x)
#
#     def __add__(self, other):
#         if not isinstance(other, Clock):
#             raise ArithmeticError("Правый операнд должен быть типом Clock")
#         return Clock(self.sec + other.sec)
#
#     def __eq__(self, other):
#         if not isinstance(other, Clock):
#             raise ArithmeticError("Правый операнд должен быть типом Clock")
#         if self.sec == other.sec:
#             return True
#         return False
#
#     def __ne__(self, other):
#         return not self.__eq__(other)
#
#
# c1 = Clock(100)
# c2 = Clock(200)
#
# print(c1.get_format_time())
# print(c2.get_format_time())
#
# # c3 = c1 + c2
# # print(c3.get_format_time())
#
# # c4 = Clock(300)
# # print(c4.get_format_time())
# # c3 = c1 + c2 + c4
#
# # c1 += c2
# # print(c1.get_format_time())
#
# if c1 == c2:
#     print("Время равно")
# else:
#     print("Время разное")
#
# if c1 != c2:
#     print("Время разное")
# else:
#     print("Время равно")


#
# ****************************************
# ----------------------------------------------------------------
# Урок №28 Python от 01.04.2024
# Урок №1
# -----------------------------------------------


# class Student:
#     def __init__(self, name, marks):
#         self.name = name
#         self.marks = marks
#
#     def __getitem__(self, item):  # метод, позволяющий управлять квадратными скобками и индексами
#         if 0 <= item < len(self.marks):
#             return self.marks[item]  # он будет возвращать оценку по индексу [item]
#         else:
#             raise IndexError("Неверный индекс")
#
#     def __setitem__(self, key, value):  # s1[2] = 4, 2 - попадет в key, 4 - в value
#         # self.marks[key] = value
#         if not isinstance(key, int) or key < 0:
#             raise TypeError("Индекс должен быть целым положительным числом")
#         if key >= len(self.marks):  # 10 >= 5
#             off = key + 1 - len(self.marks)  # 10 + 1 - 5 = 6
#             self.marks.extend([None] * off)  # [5, 5, 3, 4, 5, None, None, None, None, None, None] -
#             # .extend - добавляет к существующему списку новый список из (None * 6)
#
#         self.marks[key] = value  # [5, 5, 3, 4, 5, None, None, None, None, None, 4]
#
#     def __delitem__(self, key):  # удаление элемента по индексу, удаляем по (key)
#         if not isinstance(key, int):
#             raise TypeError("Индекс должен быть целым числом")
#         del self.marks[key]
#
#
# s1 = Student("Сергей", [5, 5, 3, 4, 5])
# # print(s1[2])  # 3 - здесь получили доступ к списку и индексу с помощью метода __getitem__ выше
# # print(s1.marks[2])  # 3
#
# s1.marks[2] = 4
# print(s1.marks)  # [5, 5, 4, 4, 5]
#
# s1[10] = 4
# del s1[2]  # пытаемся удалить элемент по индексу
# print(s1.marks)
#
# # print([None] * 6)  # объяснение
# # lst = [5, 5, 3, 4, 5]
# # lst.extend([None, None, None, None, None, None])
# # print(lst)


# * * * * * * * * * * * * *
# Добавили новое с нового урока:
# Продолжили про перегрузку операторов
# class Clock:
#     __DAY = 86400
#
#     def __init__(self, sec: int):
#         if not isinstance(sec, int):
#             raise ValueError("Секунды должны быть целым числом")
#         self.sec = sec % self.__DAY
#
#     def get_format_time(self):
#         s = self.sec % 60
#         m = (self.sec // 60) % 60
#         h = (self.sec // 3600) % 24
#         return f"{Clock.get_form(h)}:{Clock.get_form(m)}:{Clock.get_form(s)}"
#
#     @staticmethod
#     def get_form(x):
#         return str(x) if x > 9 else "0" + str(x)
#
#     # def __add__(self, other):
#     #     if not isinstance(other, Clock):
#     #         raise ArithmeticError("Правый операнд должен быть типом Clock")
#     #     return Clock(self.sec + other.sec)
#     #
#     # def __eq__(self, other):
#     #     if not isinstance(other, Clock):
#     #         raise ArithmeticError("Правый операнд должен быть типом Clock")
#     #     if self.sec == other.sec:
#     #         return True
#     #     return False
#     #
#     # def __ne__(self, other):
#     #     return not self.__eq__(other)
#     def __getitem__(self, item):  # Метод __getitem__ делает перегрузку квадратных скобок
#         # Это мы получаем значение
#         if not isinstance(item, str):
#             raise ValueError("Ключ должен быть строкой")
#
#         if item == "hour":  # если ключи соответствуют указанным нами ранее, мы будем выводить часы, минуты
#             # и секунды, если нет, прога будет выводить "Неверный ключ"
#             return (self.sec // 3600) % 24
#         elif item == "min":
#             return (self.sec // 60) % 60
#         elif item == "sec":
#             return self.sec % 60
#         return "Неверный ключ"
#
#     def __setitem__(self, key, value):  # А здесь хотим значение установить
#         if not isinstance(key, str):
#             raise ValueError("Ключ должен быть строкой")
#
#         if not isinstance(value, int):
#             raise ValueError("Значение должно быть целым числом")
#
#         s = self.sec % 60
#         m = (self.sec // 60) % 60
#         h = (self.sec // 3600) % 24
#
#         if key == "hour":
#             self.sec = s + 60 * m + value * 3600
#         if key == "min":
#             self.sec = s + 60 * value + h * 3600
#         if key == "sec":
#             self.sec = value + 60 * m + h * 3600
#
#
# c1 = Clock(80000)
# print(c1.get_format_time())
# print(c1["hour"], c1["min"], c1["sec"])  # придумали ключи "hour", "min" и "sec", получаем значение
# c1["hour"] = 11  # хотим установить значение с помощью __setitem__
# print(c1.get_format_time())
# c1["min"] = 24
# c1["sec"] = 59
#
#
# # c1 = Clock(100)
# # c2 = Clock(200)
# # c4 = Clock(300)
# # print(c1.get_format_time())
# # print(c2.get_format_time())
# # print(c4.get_format_time())


# from random import choice, randint
#
#
# # Задача:
# # Написать программу разведения котов и кошек, с предполагаемым количеством котят
# class Cat:
#     def __init__(self, name, age, pol):
#         self.name = name
#         self.age = age
#         self.pol = pol
#
#     def __str__(self):  # и здесь указываем проверку
#         # __str__ будет срабатывать на один экземпляр класса
#         if self.pol == "M":
#             return f"{self.name} is good boy!!!"
#         elif self.pol == "F":
#             return f"{self.name} is good girl!!!"
#         else:
#             return f"{self.name} is good Kitty!!!"
#
#     def __repr__(self):  # если нужно работать с квадратными скобками и количеством значений более одного
#         return f"Cat(name='{self.name}', age={self.age}, pol='{self.pol}')"
#
#     def __add__(self, other):  # для сложения экземпляром класса, self - первый экземпляр, other - второй экземпляр
#         if self.pol != other.pol:
#             return [Cat("No name", 0, choice(["M", "F"])) for _ in range(randint(1, 5))]  # 0, 5
#         else:
#             raise TypeError("Types are not supported!")
#
#
# cat1 = Cat("Tom", 4, "M")
# cat2 = Cat("Elsa", 5, "F")
# cat3 = Cat("Murzik", 3, "M")
# print(cat1)  # <__main__.Cat object at 0x000001D28954DA00> - пока передает так. Чтобы получить удобочитаемый
# # формат представления в виде строк и слов, нужно использовать метод __str__ выше
# print(cat2)
# print(cat3)
# print(cat1 + cat2)  # просто так сложить 2 экземпляра класса нельзя с помощью оператора сложения, нужен метод
# __add__ выше


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Полиморфизм

# Полиморфизм в объектно-ориентированном программировании – это возможность обработки разных типов данных,
# т. е. принадлежащих к разным классам, с помощью "одной и той же" функции, или метода. На самом деле одинаковым
# является только имя метода, его исходный код зависит от класса.

# class Rectangle:  # прямоугольник
#     def __init__(self, w, h):
#         self.w = w
#         self.h = h
#
#     def get_perimetr(self):
#         return 2 * (self.w + self.h)
#
#
# class Square:  # квадрат
#     def __init__(self, a):
#         self.a = a
#
#     def get_perimetr(self):
#         return 4 * self.a
#
#
# class Triangle:  # треугольник
#     def __init__(self, a, b, c):
#         self.a = a
#         self.b = b
#         self.c = c
#
#     def get_perimetr(self):
#         return self.a + self.b + self.c
#
#
# r1 = Rectangle(1, 2)
# # print("Периметр прямоугольника №1: ", r1.get_perimetr())
# r2 = Rectangle(3, 4)
# # print("Периметр прямоугольника №2: ", r2.get_perimetr())
#
# s1 = Square(10)
# s2 = Square(20)
#
# t1 = Triangle(1, 2, 3)
# t2 = Triangle(4, 5, 6)
#
# shape = [r1, r2, s1, s2, t1, t2]  # чтобы не выводить и не вызывать все методы по очереди, мы поместим
# # все экземпляры класса в список
# for g in shape:  # А теперь мы пройдемся в цикле по этим экземплярам класса и вызовем метод (get_perimetr())
#     # для каждого образца
#     print(g.get_perimetr())
# Здесь мы используем один и тот же метод для всех классов, поэтому у нас появилась возможность использовать цикл


# Следующая задача:
# Используя полиморфизм создать два класса Cat и Dog. Реализуйте методы info (информация о питомце) и make_sound
# (какой звук издает данный питомец). Цикле выведите методы класса.


# class Cat:
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     def info(self):
#         return f"Я кот. Меня зовут {self.name}. Мой возраст {self.age}"
#
#     def make_sound(self):
#         return f"{self.name} мяукает."
#
#
# class Dog:
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     def info(self):
#         return f"Я собака. Меня зовут {self.name}. Мой возраст {self.age}"
#
#     def make_sound(self):
#         return f"{self.name} гавкает."
#
#
# c1 = Cat("Пушок", 2.5)
# d1 = Dog("Мухтар", 4)
# lst = [c1, d1]
# for i in lst:
#     print(i.info())
#     print(i.make_sound())


# Вариант учителя

# from abc import ABC, abstractmethod
#
#
# class Animal(ABC):
#     def __init__(self, name, age):
#         self.age = age
#         self.name = name
#
#     @abstractmethod  # абстрактные методы без реализации
#     def info(self):
#         pass
#
#     @abstractmethod
#     def make_sound(self):
#         pass
#
#
# class Cat(Animal):  # Class (Cat) must implement all abstract methods
#     def info(self):
#         return f"Я кот. Меня зовут {self.name}. Мой возраст {self.age}"
#
#     def make_sound(self):
#         return f"{self.name} мяукает"
#
#
# class Dog(Animal):
#
#     def info(self):
#         return f"Я Собака. Меня зовут {self.name}. Мой возраст {self.age}"
#
#     def make_sound(self):
#         return f"{self.name} гавкает"
#
#
# cat1 = Cat("Пушок", 2.5)
# dog1 = Dog("Мухтар", 4)
#
# for animal in (cat1, dog1):  # Вариант учителя
#     print(animal.info())
#     print(animal.make_sound())


# Задача:
# Создать иерархию классов: Human (Человек), Student (Студент), Teacher (Преподаватель) и Graduate (Дипломник).
# Создать список группы преподавателей данной иерархии, вывести информацию о каждом участнике.
# Разные классы, но в каждом классе будет только один метод info(), это и будет полиморфизм

# class Human:  # В родительский общий класс Human (Человек) можно вынести все свойства, которые схожи и будут
#     # повторяться во всех классах и родительском и дочерних
#     def __init__(self, last_name, first_name, age):
#         self.last_name = last_name
#         self.first_name = first_name
#         self.age = age
#
#     def info(self):
#         print(f"\n{self.last_name} {self.first_name} {self.age}", end=" ")  # end=" " - так мы убрали
#         # перенос на другую строчку
#
#
# class Student(Human):
#     def __init__(self, last_name, first_name, age, speciality, group, rating):
#         super().__init__(last_name, first_name, age)  # А вот это мы взяли из родительского класса
#         self.speciality = speciality
#         self.group = group
#         self.rating = rating
#
#     def info(self):
#         super().info()  # так же обращаемся к родительскому методу! без этого не будет видна инфа
#         print(f"{self.speciality} {self.group} {self.rating}", end=" ")
#
#
# class Teacher(Human):
#     def __init__(self, last_name, first_name, age, speciality, experience):
#         super().__init__(last_name, first_name, age)
#         self.speciality = speciality
#         self.experience = experience  # навык
#
#     def info(self):
#         super().info()
#         print(f"{self.speciality} {self.experience}", end=" ")
#
#
# class Graduate(Student):  # самый интересный класс, здесь передаем все, что уже есть у (Student)
#     def __init__(self, last_name, first_name, age, speciality, group, rating, topic):
#         super().__init__(last_name, first_name, age, speciality, group, rating)  # от Student
#         self.topic = topic
#
#     def info(self):
#         super().info()
#         print(f"{self.topic}", end=" ")
#
#
# group = [
#     Student("Батодалаев", "Даши", 16, "ГК", "Web_011", 5),
#     Student("Загидуллин", "Линар", 32, "РПО", "PD_011", 5),
#     Graduate("Шугани", "Сергей", 15, "РПО", "PD_011", 5, "Защита персональных данных"),
#     Teacher("Даньшин", "Андрей", 38, "Астрофизика", 110),
#     Student("Маркин", "Даниил", 17, "ГК", "Python_011", 5),
#     Teacher("Башкиров", "Алексей", 45, "Разработка приложений", 20)
# ]
# for i in group:
#     i.info()


# Нарисовать треугольник с помощью функции
# Вариант №1

# def draw_triangle(height):
#     for i in range(1, height + 1):
#         spaces = " " * (height - i)
#         stars = "*" * (2 * i - 1)
#         print(spaces + stars + spaces)
#
#
# triangle_height = 6  # Высота треугольника
# draw_triangle(triangle_height)


# Нарисовать треугольник с помощью функции в одну строку
# Вариант №2

# def draw_triangle(height):
#     return '\n'.join([' ' * (height - i) + '*' * (2 * i - 1) + ' ' * (height - i) for i in range(1, height + 1)])
#
# triangle_height = 6  # Высота треугольника
# triangle = draw_triangle(triangle_height)
# print(triangle)


#
# ****************************************
# ----------------------------------------------------------------
# Урок №29 Python от 03.04.2024
# Урок №1
# -----------------------------------------------

# ФУНКТОРЫ
# Функциональные объекты, или функторы в программировании — в Python обычно используется для обозначения объекта,
# который может быть вызван как функция. Функтор - это объект, который реализует метод __call__(), что позволяет
# его экземпляры вызываться как функции.
# Перегрузка круглых скобок (определение то учителя)

# Пример * * *
# class MyFunctor:
#     def __init__(self, x):
#         self.x = x
#
#     def __call__(self, y):
#         return self.x + y
#
#
# # Создание экземпляра функтора
# functor = MyFunctor(10)
#
# # Вызов функтора
# result = functor(5)
# print(result)  # Вывод: 15
# * * * * * * *  * * * * * *

# class Counter:
#     def __init__(self):
#         self.__count = 0
#
#     def __call__(self, *args, **kwargs):
#         self.__count += 1
#         print(self.__count)
#
#
# c1 = Counter()
# c1()
# c1()
# c1()


# def string_strip(chars):  # это у нас замыкание
#     def wrap(string):
#         if not isinstance(string, str):  # то есть, если строка, которая приходит в s1 (print(s1(" :?.Hello World! "))
#             # - не является строкой, то есть str, то вызовем сообщение об ошибке ValueError
#             raise ValueError("Аргумент должен быть строкой")
#         return string.strip(chars)  # .strip - удаляет пробелы справа и слева и все остальные символы, указанные
#         # в перечне s1 = string_strip("?:!.; "), которые нужно удалить
#
#     return wrap  # вызываем функцию (wrap) без круглых скобок
#
#
# s1 = string_strip("?:!.; ")
# print(s1(" :?.Hello World! "))  # мы вызываем переменную как функцию s1() со скобками
# Хотим вывести строки без пробелов и лишних символов


# class StripChars:
#     def __init__(self, chars):
#         self.__chars = chars
#
#     def __call__(self, string):
#         if not isinstance(string, str):
#             raise ValueError("Аргумент должен быть строкой")
#
#         return string.strip(self.__chars)
#
#     # def __call__(self, *args, **kwargs):
#     #     if not isinstance(args[0], str):
#     #         raise ValueError("Аргумент должен быть строкой")
#     #
#     #     return args[0].strip(self.__chars)
#
#
# s2 = StripChars("?:!.; ")
# print(s2(" :?.Hello World! "))


# Класс как декоратор

# Классы в Python можно использовать в качестве декораторов, что представляет собой способ изменения поведения
# функций или методов без изменения их самих.
#
# Чтобы класс мог быть использован в качестве декоратора, он должен реализовать метод __call__(), который будет
# вызываться при применении декоратора к функции или методу.

# Пример:

# class DecoratorExample:
#     def __init__(self, func):
#         self.func = func
#
#     def __call__(self, *args, **kwargs):
#         print("Вызвана функция:", self.func.__name__)
#         return self.func(*args, **kwargs)
#
#
# @DecoratorExample
# def example_function(x, y):
#     return x + y
#
#
# result = example_function(3, 4)
# print("Результат:", result)


# Это обычная функция
# def func():
#     print("Hello World")
#
#
# func()


# Теперь эту функцию мы задекорируем классом
# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self):
#         print("Перед вызовом функции")
#         self.fn()
#         print("После вызова функции")
#
#
# @MyDecorator
# def func():
#     print("Hello World")
#
#
# func()


# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self, x, y):
#         # print("Перед вызовом функции")
#         # self.fn(x, y)
#         # print("После вызова функции")
#
#         # * * * Можно еще так написать, сохранить формулу в переменную, к примеру (res), а потом этот
#         # (res) вывести * * *
#         # res = self.fn(x, y)
#         # return res
#         # * * * А можно это все собрать в один return
#
#         return f"Перед вызовом функции \n{self.fn(x, y)}\nПосле вызова функции"
#
#
# @MyDecorator
# def func(a, b):
#     return a * b
#
#
# print(func(2, 5))  # None - это значит, что наш print - сейчас не выводит значения, потому что мы в
# __call__ не возвратили его self.fn(x, y), а с return - возвратили


# Задача:
# Создать класс Power, который будет декорировать функцию в Python. Функция возвращает результат умножения двух
# чисел (a = 2, b = 3), а класс возводит их в квадрат.
# class Power:
#
#     def __init__(self, func):
#         self.func = func
#
#     def __call__(self, *args):  # или (self, x, y)
#         return f"Результат: {self.func(*args) ** 2}"  # или {self.func(x, y) ** 2}
#
#
# @Power
# def func_test(a, b):
#     return a * b
#
#
# print(func_test(2, 3))


# * * * * * * * * * * * * * * * * * * * * *
# ЗАДАЧА:
# Создать класс Power, который будет декорировать функцию в Python. Функция возвращает результат умножения двух
# чисел (a = 2, b = 3), а класс возводит их в квадрат.

# Вот пример реализации класса Power, который будет декорировать функцию умножения двух чисел, возводя их в квадрат:
# class Power:
#     def __init__(self, func):  # В этом примере класс Power принимает функцию в качестве аргумента
#         # в конструкторе и сохраняет ее в свойстве self.func.
#         self.func = func
#
#     def __call__(self, a, b):  # Метод __call__() вызывается при вызове декорированной функции multiply().
#         # В методе __call__() сначала вызывается функция self.func, переданный в конструкторе, затем результат
#         # умножения возводится в квадрат и возвращается.
#         result = self.func(a, b)  # Вызываем функцию, переданную в конструктор
#         return result ** 2  # Возводим результат в квадрат
#
#
# @Power  # декоратор Power применяется к функции multiply, это приводит к тому, что вначале числа умножаются здесь
# # (a * b), а потом только переходят в def __call__ и возводятся в квадрат
# def multiply(a, b):
#     return a * b
#
#
# result = multiply(2, 3)  # # Используем декорированную функцию
# print("Результат умножения, возведенный в квадрат:", result)


# В этом примере класс Power принимает функцию в качестве аргумента в конструкторе и сохраняет ее в свойстве
# self.func. Метод __call__() вызывается при вызове декорированной функции multiply(). В методе __call__() сначала
# вызывается функция self.func, переданный в конструкторе, затем результат умножения возводится в квадрат и
# возвращается.
#
# Декоратор @Power применяется к функции multiply, что приводит к тому, что при вызове multiply(2, 3)
# сначала происходит умножение двух чисел, а затем результат возводится в квадрат.
# * * * * * * * * * * * * * * * * * * * * *


# class MyDecorator:
#     def __init__(self, fn):
#         self.fn = fn
#
#     def __call__(self, *args, **kwargs):  # (self, *args, **kwargs) - это универсальный подход, который работает
#         # с любым количеством передаваемых значений и 2, и 3 и более
#         return f"Перед вызовом функции \n{self.fn(*args, **kwargs)}\nПосле вызова функции"
#
#
# @MyDecorator
# def func(a, b):
#     return a * b
#
#
# @MyDecorator
# def func1(a, b, c):
#     return a * b * c
#
#
# print(func(2, 5))
# print(func1(2, 5, 2))
# print(func1(2, c=5, b=2))  # именованные параметры


# class MyDecorator:
#     def __init__(self, arg):  # arg - какой-то аргумент
#         self.arg = arg
#
#     def __call__(self, fn):
#         def wrap(*args, **kwargs):
#             return (f"Перед вызовом функции \n{self.arg} {args[0]} * {args[0]} = {fn(*args, **kwargs)}\nПосле"
#                     f"вызова функции")
#
#         return wrap
#
#
# @MyDecorator("Произведение:")
# def func(a, b):
#     return a * b
#
#
# print(func(2, 5))


# Задача:
# Создать класс Power, который будет декорировать функцию в Python. Функция возвращает результат умножения двух
# чисел (a = 2, b = 2), а класс возводит их в степень, которую принимает декоратор.

# class Power:
#
#     def __init__(self, power):
#         self.power = power
#
#     def __call__(self, func):
#         def wrapper(*args, **kwargs):  # **kwargs - нужен только для именованных значений
#             print("args:", args)
#             print("kwargs:", kwargs)
#             return f"Результат: {func(*args, **kwargs) ** self.power}\n"
#
#         return wrapper
#
#
# @Power(3)
# def func_test(a, b):
#     return a * b
#
#
# print(func_test(2, 4))  # args
# print(func_test(b=3, a=5))  # kwargs

# @Power(3)
# def func_test(a, b):
#     return a * b
#
#
# print(func_test(2, 2))


# * * * * * * * * * * * * * * * * * * * * *

# Задача:
# Создать класс Power, который будет декорировать функцию в Python. Функция возвращает результат умножения
# двух чисел (a = 2, b = 2), а класс возводит их в степень, которую принимает декоратор.

# Вот пример реализации класса Power, который будет декорировать функцию умножения двух чисел и возводить
# результат в указанную степень:
# class Power:
#     def __init__(self, power):  # В этом примере класс (Power) принимает степень в качестве аргумента
#     в конструкторе.
#         self.power = power
#
#     def __call__(self, func):  # Метод __call__() принимает функцию в качестве аргумента и возвращает
#         # внутреннюю функцию inner, которая будет выполняться при вызове декорированной функции.
#         def inner(a, b):  # Внутренняя функция (inner) умножает переданные числа и возвращает результат
#             # возведенный в степень, которую определяет класс Power.
#             result = func(a, b)  # Вызываем переданную функцию
#             return result ** self.power  # Возводим результат в указанную степень
#
#         return inner
#
#
# @Power(power=3)  # Декоратор @Power(power=3) применяется к функции multiply, что приводит к тому,
# # что при вызове multiply(2, 2) сначала происходит умножение двух чисел, а затем результат возводится
# # в степень 3.
# def multiply(a, b):
#     return a * b
#
#
# # Используем декорированную функцию
# result = multiply(2, 2)
# print("Результат умножения, возведенный в степень:", result)

# * * * * * * * * * * * * * * * * * * * * *


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# После перемены мы посмотрим, как можно декорировать методы

# def dec(fn):
#     def wrap(*args, **kwargs):
#         print("*" * 20)
#         fn(*args, **kwargs)
#         print("*" * 20)
#
#     return wrap
#
#
# class Person:
#     def __init__(self, name, surname):
#         self.name = name
#         self.surname = surname
#
#     @dec
#     def info(self):  # декорировать метод мы будет простой функцией dec(), указанной выше
#         print(f"{self.name} {self.surname}")
#
#
# p1 = Person("Виталий", "Некрасов")
# p1.info()


# Декоратор в классе
# Этот код в Python демонстрирует использование класса в качестве декоратора.
# def decorator(cls):  # Функция decorator(cls) - это функция, которая принимает класс (cls) в качестве аргумента
#     # и возвращает другой класс Wrapper. Внутри функции создается класс Wrapper, который наследует от
#     # переданного класса (cls)
#     class Wrapper(cls):
#         def doubler(self, value):  # В данном случае класс Wrapper добавляет новый метод doubler, который
#             # умножает значение на 2.
#             return value * 2
#
#     return Wrapper
#
#
# @decorator  # Декоратор @decorator применяется к классу ActualClass. Это означает, что класс ActualClass
# # будет передан функции-декоратору decorator, а затем класс Wrapper будет возвращен вместо ActualClass.
# class ActualClass:
#     def __init__(self):
#         print("Инициализатор ActualClass")
#
#     def quad(self, value):
#         return value * 4
#
#
# obj = ActualClass()  # При создании объекта ActualClass вызывается инициализатор класса Wrapper
# # (так как ActualClass заменен на Wrapper благодаря декоратору). Затем объект obj будет экземпляром класса
# # Wrapper, а не ActualClass.
# print(obj.quad(5))  # Метод quad класса ActualClass доступен через объект obj, потому что класс Wrapper
# # наследует все методы класса ActualClass.
# print(obj.doubler(5))

# Новый метод doubler, добавленный в класс Wrapper, также доступен через объект obj.
# Таким образом, код демонстрирует, как использовать класс в качестве декоратора для расширения
# функциональности существующего класса.


#  * * * Новая тема * * *
# Дескриптор
# Пытаемся избавиться от лишних геттеров и сеттеров

# class String:  # Дескриптор
#     def __init__(self, value=None):
#         if value:
#             self.set(value)
#
#     def get(self):  # Это общий геттер для всех
#         return self.__value
#
#     def set(self, value):  # Это общий сеттер для всех
#         if not isinstance(value, str):
#             raise TypeError(f"{value} должно быть строкой")
#         self.__value = value
#
#
# class Person:
#     def __init__(self, name, surname):
#         self.name = String(name)  # мы сделали, что наш (name) - является экземпляром класса (String)
#         self.surname = String(surname)  # наш (surname) - является экземпляром класса (String)
#
#     # @property  # это у нас геттер, он возвращает закрытое свойство self.__name
#     # def name(self):
#     #     return self.__name
#     #
#     # @name.setter  # это у нас сеттер
#     # def name(self, value):
#     #     if not isinstance(value, str):  # проверка
#     #         raise TypeError(f"{value} должно быть строкой")
#     #     self.__name = value
#     #
#     # @property
#     # def surname(self):
#     #     return self.__surname
#     #
#     # @surname.setter
#     # def surname(self, value):
#     #     if not isinstance(value, str):
#     #         raise TypeError(f"{value} должно быть строкой")
#     #     self.__surname = value
#
#
# p = Person("Иван", "Петров")
# print(p.name.get())
# p.name.set("Игорь")
# print(p.name.get())


# Дескриптор (__get__, __set__, __set_name__, __delete__)
# В дескрипторе мы можем прописывать магические методы

# Этот код в Python демонстрирует использование дескриптора для валидации значений атрибутов в классе Person.

# class ValidString:  # Дескриптор - Класс ValidString является дескриптором, который проверяет, является ли
#     # значение атрибута строкой. Он реализует методы __set_name__, __get__, и __set__.
#     def __set_name__(self, owner, name):  # Метод __set_name__ вызывается при создании экземпляра класса,
#         # в котором определен данный дескриптор. Он принимает owner (класс-владелец) и name (имя атрибута) и
#         # сохраняет имя атрибута в приватное свойство __name.
#         print(owner)
#         self.__name = name
#
#     def __get__(self, instance, owner):
#         return instance.__dict__[self.__name]  # __dict__ - это словарь, мы по ключу получаем значение
#         # Метод __get__ вызывается при попытке получить значение атрибута. Он принимает instance (экземпляр класса)
#         # и owner (класс-владелец) и возвращает значение атрибута, хранящееся в словаре экземпляра по ключу,
#         # соответствующему имени атрибута.
#
#     def __set__(self, instance, value):  # Метод __set__ вызывается при попытке установить значение атрибута.
#         # Он проверяет, что устанавливаемое значение является строкой, и если нет, возбуждает исключение
#         # ValueError. Если значение является строкой, оно устанавливается как значение атрибута в словаре
#         # экземпляра.
#         if not isinstance(value, str):
#             raise ValueError(f"{self.__name} должно быть строкой")
#         instance.__dict__[self.__name] = value
#
#
# class Person:  # Класс Person определяет два атрибута name и surname, которые валидируются с помощью дескриптора
#     # ValidString.
#     name = ValidString()
#     surname = ValidString()
#
#     def __init__(self, name, surname):
#         self.name = name
#         self.surname = surname
#
#
# p = Person("Иван", "Петров")
# p.surname = "Иванов"
# print(p.name)
# print(p.surname)
# При создании экземпляра класса Person, значения атрибутов name и surname устанавливаются в конструкторе
# __init__. Поскольку они проходят валидацию, никаких исключений не возникает.
# При печати значений атрибутов name и surname через экземпляр p, будет выведено их текущее значение.


# ЗАДАЧА:
# Создать в дескрипторе класса (Order), который задает имя товара, его цену и количество. В дескрипторе должна
# быть реализована проверка на ввод положительных значений цены и количества товара.

# class NonNegative:
#     def __set_name__(self, owner, name):
#         self.name = "_" + name
#
#     def __get__(self, instance, owner):
#         # return instance.__dict__[self.name]
#         return getattr(instance, self.name)  # getattr -
#
#     def __set__(self, instance, value):
#         if value < 0:
#             raise ValueError(f"Значение {self.name} должно быть положительным")
#         # instance.__dict__[self.name] = value
#         setattr(instance, self.name, value)  # setattr -
#
#
# class Order:  # создаем класс Заказ (Order)
#     price = NonNegative()
#     quantity = NonNegative()
#
#     def __init__(self, name, price, quantity):  # инициализируем исходные данные (имя товара, цена и кол-во)
#         self.name = name
#         self.price = price
#         self.quantity = quantity
#
#     def total(self):  # здесь цену товара нужно умножить на кол-во
#         return self.price * self.quantity
#
#
# apple_order = Order('apple', 5, 10)  # создали экземпляр класса
# apple_order.quantity = 15  # обращаемся к экземпляру класса по количеству товара
# print(apple_order.price)
# print(apple_order.total())  # обратились по экземпляру класса к методу total()
# print(apple_order.__dict__)


#
# ****************************************
# ----------------------------------------------------------------
# Урок №30 Python от 08.04.2024
# Урок №1
# -----------------------------------------------


# Метаклассы

# Метаклассы в Python - это классы, которые определяют поведение других классов (классы для классов).
# Классы являются экземплярами метаклассов. По умолчанию в Python используется метакласс type, который является
# встроенным метаклассом для всех классов.

# class MyMeta(type):
#     def __new__(cls, name, bases, dct):
#         # Добавление новой функциональности к классу
#         dct['my_attribute'] = 42
#         return super().__new__(cls, name, bases, dct)
#
#
# class MyClass(metaclass=MyMeta):1478
#     pass
#
#
# print(MyClass.my_attribute)  # Выведет: 42

# В этом примере класс MyMeta является метаклассом, который добавляет атрибут my_attribute ко всем классам,
# созданным с его использованием. Класс MyClass использует метакласс MyMeta через аргумент metaclass.


# a = 5
# print(type(a))
# print(type(int))

# class MyList(list):  # создали список и внесли туда 2 значения
#     def get_length(self):
#         return len(self)
#
#
# MyList = type(  # использование метакласса
#     'MyList',
#     (list,),
#     dict(get_length=lambda self: len(self))
# )
#
# lst = MyList()
# lst.append(5)
# lst.append(7)
# print(lst, lst.get_length())


# * * * * * * * * * * * * * * * *

# НОВАЯ ТЕМА ***
# СОЗДАНИЕ МОДУЛЕЙ

# Модули в Python - это файлы с расширением .py, которые содержат Python код, такой как определения функций,
# классов и переменных.
# Код из одного модуля может быть импортирован в другой модуль с помощью инструкции import.

# Создание модулей
# Мы сейчас с вами посмотрим, как мы можем сами создать какие-то модули

# У нас есть задачка с тремя классами, мы сейчас создадим 3 отдельных модуля-документа (rect.py, sq.py, trian.py)

# import geometry.rect
# import geometry.sq
# import geometry.trian

# Из Python пакета (geometry) - мы импортируем 3 модуля для работы (которые там находятся)

# from geometry import rect, sq, trian  # Так работает ***
#

# from geometry import *

# from geometry import rect, sq, trian
#


# def run():  # Видим весь код, только если запуск происходит из нашего основного дока Main
#     r1 = rect.Rectangle(1, 2)  # это мы берем из модуля (rect)
#     r2 = rect.Rectangle(3, 4)
#
#     s1 = sq.Square(10)  # это мы берем из модуля (sq)
#     s2 = sq.Square(20)
#
#     t1 = trian.Triangle(1, 2, 3)  # это мы берем из модуля (trian)
#     t2 = trian.Triangle(4, 5, 6)
#
#     shape = [r1, r2, s1, s2, t1, t2]
#
#     for g in shape:
#         print(g.get_perimetr())
#
#
# if __name__ == '__main__':
#     run()  # Помогает запускать код в доке (test.py)


# if __name__ == '__main__':  # Весь код под (if), при импорте Main как модуля, виден не будет
#     r1 = rect.Rectangle(1, 2)  # это мы берем из модуля (rect)
#     r2 = rect.Rectangle(3, 4)
#
#     s1 = sq.Square(10)  # это мы берем из модуля (sq)
#     s2 = sq.Square(20)
#
#     t1 = trian.Triangle(1, 2, 3)  # это мы берем из модуля (trian)
#     t2 = trian.Triangle(4, 5, 6)
#
#     shape = [r1, r2, s1, s2, t1, t2]
#
#     for g in shape:
#         print(g.get_perimetr())


# if __name__ == '__main__':  # Когда Python запускает скрипт, он устанавливает специальную
#     # переменную __name__ для этого скрипта в значение "__main__". Это означает, что скрипт
#     # запущен как основная программа.
#     run()

# Мы пишем основной код под if __name__ == '__main__': с одной табуляцией, чтобы убедиться,
# что доступа к нашему коду из внешних источников не произойдет


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Задача на 2 уроке №1:
# Создать класс "Автомобиль" со свойствами бренд, модель, год выпуска и пробег. Работа с классами
# должна быть организована через пакет и модули.

# from car import electrocar
#
# # В Main - мы хотим делать экземпляр дочернего класса (ElectroCar)
# # То есть в Main(е) мы будем просто вызывать экземпляры класса
#
#
# if __name__ == '__main__':  # А теперь мы застраховали наш код, чтобы его никто не видел
#     e_car = electrocar.ElectroCar("Tesla", "T", 2018, 99000)
#     e_car.show_car()
#     e_car.description_battery()


# Задача на уроке №2:
# Задача, продолжить дома с использованием пакетов питон и модулей:
# class Employee:  # это у нас базовый родительский класс
#     def __init__(self, kod, name):
#         self.id = kod
#         self.name = name
#
#
# class SalaryEmployee(Employee):  # дочерний от (Employee)
#     """Административные работники, имеют фиксированную зарплату"""
#
#     def __init__(self, kod, name, weekly_salary):
#         super().__init__(kod, name)  # указали как у родителя, ниже инициализировали доп свойство (weekly_salary)
#         self.weekly_salary = weekly_salary
#
#     def calculate_payroll(self):
#         return self.weekly_salary
#
#
# class HourlyEmployee(Employee):  # указали как у родителя, ниже инициализировали дополнительные свойства
#     """Сотрудники с почасовой оплатой"""
#
#     def __init__(self, kod, name, hours_worked, hours_rate):
#         super().__init__(kod, name)
#         self.hours_worked = hours_worked
#         self.hours_rate = hours_rate
#
#     def calculate_payroll(self):
#         return self.hours_worked * self.hours_rate
#
#
# class CommissionEmployee(SalaryEmployee):
#     """Торговые представители, фиксированная зарплата + комиссия"""
#
#     def __init__(self, kod, name, weekly_salary, commission):
#         super().__init__(kod, name, weekly_salary)
#         self.commission = commission
#
#     def calculate_payroll(self):
#         fixed = super().calculate_payroll()
#         return fixed + self.commission
#
#
# class PayrollSystem:
#     def calculate(self, employees):
#         print("Расчет заработной платы")
#         print("=" * 50)
#         for employee in employees:
#             print(f"Заработная плата: {employee.id} - {employee.name}")
#             print(f"- Проверить сумму: {employee.calculate_payroll()}")
#             print()


# ДОМАШНЯЯ РАБОТА

# from employee import salaryemployee, hourlyemployee, commissionemployee, payrollsystem
#
#
# if __name__ == '__main__':
#     salary_employee = salaryemployee.SalaryEmployee(1, "Валерий Задорожный", 1500)
#     hourly_employee = hourlyemployee.HourlyEmployee(2, "Илья Кромин", 40, 15)
#     commission_employee = commissionemployee.CommissionEmployee(3, "Николай Хорольский", 1000, 250)
#
#     payroll_system = payrollsystem.PayrollSystem()
#     payroll_system.calculate([
#         salary_employee,
#         hourly_employee,
#         commission_employee
# ])

# ---------------------------------------------------


# НОВАЯ ТЕМА ***

# Упаковка данных:
# Сериализация
# Десериализация

# Сериализация данных в Python - это процесс преобразования объектов Python в поток байтов (обычно для их
# сохранения в файле или передачи по сети) и обратное преобразование потока байтов обратно в объекты Python.

# В Python для сериализации данных часто используется модуль (pickle) или модуль (json)
# (для сериализации в формат JSON, который более читаем для людей). Кроме того, есть и другие форматы,
# такие как YAML, XML и прочие, которые также могут использоваться для сериализации данных в зависимости от
# конкретных потребностей.

# комп., Майкр.	Pickle (To convert an object to a series of bytes for transmission to another medium)
# json - текстовый формат обмена данными, основанный на языке JavaScript

# marshal (*.pyc)
# pickle
# json


# import pickle
#
# file_name = "basket.txt"
#
# shop_list = {
#     "фрукты": ("яблоки", "манго"),
#     "овощи": ["морковь"],
#     "бюджет": 1000
# }
#
# with open(file_name, "wb") as f:  # "wb" - режим записи байты
#     pickle.dump(shop_list, f)  # dump() - сохраняет данные в открытый файл
#
# with open(file_name, "rb") as f:  # "rb" - и считываем в байтовом режиме
#     shop_list2 = pickle.load(f)  # load() - получает (считывает) данные из открытого файла
#
# print(shop_list2)

# dumps() - сохраняет данные в строку
# loads() - получает (считывает) данные из строки


# import pickle
#
#
# class Text:
#     num = 35
#     string = "Привет"
#     lst = [1, 2, 3]
#     tpl = (22, 23)
#
#     def __str__(self):
#         return f"Число: {Text.num}\nСтрока: {Text.string}\nСписок: {Text.lst}\nКортеж: {Text.tpl}"
#
#
# obj = Text()
#
# my_obj = pickle.dumps(obj)  # dumps() - сохраняет данные в строку
# print(my_obj)
#
# obj2 = pickle.loads(my_obj)  # loads() - получает (считывает) данные из строки
# print(obj2)


#
# ****************************************
# ----------------------------------------------------------------
# Урок №31 Python от 10.04.2024
# Урок №1
# -----------------------------------------------

# import pickle
#
#
# class Test2:
#     def __init__(self):
#         self.a = 35
#         self.b = "test"
#         self.c = lambda x: x * x  # здесь хранятся не данные, а действие
#
#     def __str__(self):
#         return f"{self.a} {self.b} {self.c(2)}"
#
#     def __getstate__(self):
#         attr = self.__dict__.copy()  # берем метод .__dict__. и применяем метод .copy(), который
#         # создает дубликат словаря
#         del attr['c']
#         return attr
#
#     def __setstate__(self, state):
#         self.__dict__ = state
#         self.c = lambda x: x * x
#
#
# item1 = Test2()
# print(item1)
# item2 = pickle.dumps(item1)
# print(item2)
# item3 = pickle.loads(item2)
# print(item3.__dict__)
# print(item3)

# __getstate__ что значит этот метод в питон
# Метод __getstate__ является частью протокола сериализации в Python и используется при сериализации
# объектов с помощью модуля pickle.
# Когда объект сериализуется с помощью pickle.dump() или pickle.dumps(), метод __getstate__ вызывается
# у объекта для определения состояния, которое должно быть сохранено.

# Обычно метод __getstate__ определяет, какие атрибуты объекта должны быть сериализованы. Он должен
# возвращать словарь, содержащий состояние объекта, которое нужно сохранить. Этот словарь будет передан
# в метод __setstate__ при десериализации объекта.


# Модуль - json

# import json

# data = {
#     'name': 'Ольга',
#     'age': 20,
#     20: None,
#     True: 1,
#     'hobbies': ('running', 'singing'),
#     'children': ['Alica', 'Bob']
# }
#
# with open('data_file.json', 'w') as f:
#     json.dump(data, f, indent=4, ensure_ascii=False)
#
# with open("data_file.json", 'r') as f:
#     data1 = json.load(f)
#
# print(data1)
#
# json_string = json.dumps(data, ensure_ascii=False)
# print(json_string)
# print(type(json_string))
# data1 = json.loads(json_string)
# print(data1)
# print(type(data1))


# Сама - сама - переделываю за учителем:
# data = {
#     'name': 'Ольга',  # русское слово - будут проблемы с кодировкой
#     'age': 20,
#     20: None,
#     True: 1,
#     'hobbies': ('running', 'singing'),
#     'children': ['Alica', 'Bob']
# }
#
# with open('data_file_file.json', 'w') as f:
#     json.dump(data, f, indent=4, ensure_ascii=False)  # indent=4 - кол-во отступов на каждой строке для
#     вложенных объектов
#
# with open('data_file_file.json', 'r') as f:
#     data1 = json.load(f)  # load - считываем, смотрим в консоли результат
#
# print(data1)

# json_string = json.dumps(data, ensure_ascii=False)
# ensure_ascii=False - позволяет сохранять данные,
# # даже написанный на русском языке, в читабельном виде
# # .dumps - сохраняет данные в строку
# print(json_string)
# print(type(json_string))  # <class 'str'>
# data1 = json.loads(json_string)  # это уже словарь будет
# print(data1)
# print(type(data1))  # <class 'dict'>


# ---------------------------------------------------
# Этот код создает случайные данные для "людей" и записывает их в файл JSON.
import json
# from random import choice
#
#
# def gen_person():
#     name = ''
#     tel = ''
#
#     letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
#     nums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']
#
#     while len(name) != 7:
#         name += choice(letters)
#     # print(name)
#
#     while len(tel) != 10:
#         tel += choice(nums)
#     # print(tel)
#
#     person = {  # это словарь, куда помещаются случайные имена и телефоны людей, которые генерирует
#         # random.choice
#         'name': name,
#         'tel': tel
#     }
#
#     return person  # и возвращаются из функции


# Функция gen_person(): Эта функция создает случайные имена и номера телефонов для каждого "человека".
# Она использует модуль random для выбора случайных символов из списка букв и цифр для генерации
# имени и номера телефона. Затем эти данные помещаются в словарь person и возвращаются из функции.
#
# def write_json(person_dict):
#     try:
#         data = json.load(open('persons.json'))  # Функция write_json(person_dict) - открывает файл
#         # persons.json, если он существует, и загружает его содержимое в переменную data.
#     except FileNotFoundError:  # Если файл не существует, создается пустой список.
#         data = []
#
#     data.append(person_dict)  # Затем данные о "человеке" добавляются к списку data, и весь список
#     # записывается обратно в файл JSON с отступом в два пробела.
#     with open("persons.json", "w") as f:
#         json.dump(data, f, indent=2)


# Функция write_json(person_dict): Эта функция записывает данные о "человеке" (представленные в виде
# словаря) в файл JSON. Она открывает файл persons.json, если он существует, и загружает его содержимое
# в переменную data. Если файл не существует, создается пустой список. Затем данные о "человеке"
# добавляются к списку data, и весь список записывается обратно в файл JSON с отступом в два пробела.

# for i in range(5):
#     print(gen_person())
#
# Цикл for i in range(5): Этот цикл вызывает функцию gen_person() пять раз и выводит результат на экран.
# Таким образом, он генерирует пять случайных "людей" и выводит их данные на экран.

# Таким образом, после выполнения этого кода в файл persons.json будет записано пять случайных "людей"
# в формате JSON.
# ---------------------------------------------------


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------
# import json

# Задача:
# Работа с файлами, создать класс Студент с возможностью добавления, удаления, изменения оценок и
# подсчетом среднего балла
# import json
#
#
# class Student:
#     def __init__(self, name, marks):
#         self.name = name
#         self.marks = marks
#
#     def __str__(self):
#         # Первый более длинный вариант
#         # a = ''  # давайте создадим переменную, и это у нас будет строковое значение
#         # for i in self.marks:
#         #     a += str(i) + ", "  # str(i) - мы тоже приводим к строке
#         # return f"Студент: {self.name} => {a[:-2]}"  # можно убрать запятую через срез
#
#         # Второй более короткий вариант
#         a = ", ".join(map(str, self.marks))
#         return f"Студент: {self.name} => {a}"  # Студент: Bodnya => 5, 4, 3, 4, 5, 3,
#
# # ", ".join(map(str, self.marks)): Эта строка кода преобразует каждый элемент списка (self.marks) в строку с помощью
# # map(str, self.marks)
# # , а затем объединяет их с помощью метода join(), разделяя элементы (запятой и пробелом).
# #
# # Таким образом, если (self.marks) - это список оценок студента, то эта строка создает строку, содержащую все оценки
# # студента, разделенные запятой и пробелом.
# #
# # f"Студент: {self.name} => {a}": Это форматированная строка (f-строка), которая создает строковое представление объекта.
# #
# # В этой строке {self.name} и {a} заменяются на значения имени студента и строкового представления оценок
# # (которое мы получили выше). Таким образом, в итоговой строке будет содержаться имя студента, затем символ. => и
# # перечисление его оценок.
#
#
#     def add_mark(self, mark):
#         self.marks.append(mark)  # чтобы добавить доп оценку, обратимся к нашему self.marks - и применим метод
#         # .append(mark), тк ниже список с оценками
#
#     def delete_mark(self, index):  # нужно удалить оценку, используем метод - Удаление по индексу - pop(index)
#         self.marks.pop(index)
#
#     def edit_mark(self, index, new_mark):  # нужно изменить оценку (сделаем по индексу), то есть вначале пишем индекс
#         # оценки, которую мы хотим изменить, а потом новую оценку (new_mark)
#         self.marks[index] = new_mark
#
#     def average_mark(self):  # делаем подсчет среднего балла
#         return round(sum(self.marks) / len(self.marks), 2)
#
#     def get_file_name(self):  # создадим метод, который нам будет возвращать название файла
#         return self.name.lower() + ".json"
#     # метод get_file_name() возвращает строку, которая состоит из имени файла, записанного в нижнем регистре,
#     # с расширением .json. Например, если self.name содержит "MyFile", метод вернет "myfile.json".
#     # это промежуточный метод, мы не будем вызывать его за пределами класса
#
#     def dump_to_json(self):  # теперь мы хотим данные о студенте сохранять в файл
#         data = {"name": self.name, "marks": self.marks}  # соберем данные в словарь
#         with open(self.get_file_name(), "w") as f:
#             json.dump(data, f, indent=2)
#
#     def load_from_file(self):  # теперь нам нужно данные считать
#         with open(self.get_file_name(), "r") as f:  # "r" - режим чтения
#             print(json.load(f))
#     # with open(self.get_file_name(), "r") as f:: Эта строка открывает файл JSON для чтения
#     # Он открывается с использованием контекстного менеджера with, который гарантирует, что файл будет корректно
#     # закрыт после завершения блока with.
#     # json.load(f): Эта строка загружает содержимое файла JSON из объекта файла f с использованием функции json.load().
#
#
# class Group:
#     def __init__(self, students, group):
#         self.students = students
#         self.group = group
#
#     def __str__(self):
#         a = "\n".join(map(str, self.students))
#         return f"Группа: {self.group}\n{a}"
#
#     def add_student(self, student):  # добавим метод, который будет добавлять студентов
#         self.students.append(student)
#
#     def remove_student(self, index):  # нужен метод для удаления студента
#         return self.students.pop(index)
#
#     @staticmethod
#     def change_group(gr1, gr2, index):  # метод для перевода студента (по индексу) из одной группы в другую
#         gr2.add_student(gr1.remove_student(index))
#
#     def get_file_name(self): # получить название файла
#         return self.group.lower().replace(" ", "-") + ".json"  # replace(" ", "-") - ищем в названии файла
#         # пробельные символы (" ") и заменяем на знак дефиса ("-")
#
#     def dump_to_json(self):  # теперь нам надо эти данные сохранять в файл, как? в списке и внутри словарь.
#         data = [
#             {'name': student.name, "marks": student.marks} for student in self.students
#         ]
#         with open(self.get_file_name(), 'w') as f:  # теперь данные эти мы записываем
#             json.dump(data, f, indent=2)
#
#     def load_from_file(self):  # и теперь мы эти данные считаем
#         with open(self.get_file_name(), "r") as f:
#             print(json.load(f))
#
#
# # st1 = Student('Bodnya', [5, 4, 3, 4, 5, 3])
# # print(st1)  # Студент: Bodnya => 5, 4, 3, 4, 5, 3
# #
# # st1.add_mark(4)  # в конец списка добавляем новую оценку (4)
# # print(st1)  # Студент: Bodnya => 5, 4, 3, 4, 5, 3, 4
# #
# # st1.delete_mark(2)  # удаляем оценку по индексу (2)
# # print(st1)  # Студент: Bodnya => 5, 4, 4, 5, 3, 4
# #
# # st1.edit_mark(2, 5)  # изменим оценку по индексу 2 на 5
# # print(st1)  # Студент: Bodnya => 5, 4, 5, 5, 3, 4
# #
# # print(st1.average_mark())  # 4.33
#
#
# # st1.dump_to_json()
# # st1.load_from_file()  # {'name': 'Bodnya', 'marks': [5, 4, 5, 5, 3, 4]} - считали данные в виде обычного словаря
# #
# # st2 = Student('Nikolaenko', [2, 3, 5, 4, 2])
# # st2.dump_to_json()
# # st2.load_from_file()  # {'name': 'Nikolaenko', 'marks': [2, 3, 5, 4, 2]}
# #
# # st2.add_mark(5)  # Студент: Nikolaenko => 2, 3, 5, 4, 2, 5
# # print(st2)
# # st2.dump_to_json()
# # st2.load_from_file()
#
#
# st1 = Student('Bodnya', [5, 4, 3, 4, 5, 3])
# st2 = Student('Nikolaenko', [2, 3, 5, 4, 2])
# st3 = Student('Birukov', [3, 5, 3, 2, 5, 4])
#
# sts1 = [st1, st2]
# group1 = Group(sts1, "ГК Python")
# # print(group1)  # <__main__.Group object at 0x0000018CC21DC6B0>
# # print()
#
# group1.add_student(st3)
# # print(group1)
# # print()
#
# group1.remove_student(1)  # удаление студента по индексу
# # print(group1)
# # print()
#
# sts2 = [st2]
# group2 = Group(sts2, "ГК Web")
# print(group2)
#
# Group.change_group(group1, group2, 0)  # change_group() - это у нас статический метод, поэтому можем
# # обратиться по имени класса (Group)
# print()
# print(group1)
# print()
# print(group2)
#
# group2.dump_to_json()
# group2.load_from_file() # [{'name': 'Nikolaenko', 'marks': [2, 3, 5, 4, 2]}, {'name': 'Bodnya', 'marks':
# # [5, 4, 3, 4, 5, 3]}]
#
# group1.dump_to_json()
# group1.load_from_file()  # [{'name': 'Birukov', 'marks': [3, 5, 3, 2, 5, 4]}]


#
# ****************************************
# ----------------------------------------------------------------
# Урок №32 Python от 15.04.2024
# Урок №1
# -----------------------------------------------

# доделываем задачу с предыдущего урока

#     def add_db(self):
#         try:
#             data = json.load(open('db.json'))
#         except FileNotFoundError:
#             data = {}
#         js = [
#             {student.name: student.marks} for student in self.students
#         ]
#         data[self.group] = js
#         with open("db.json", "w+") as f:
#             json.dump(data, f, indent=2)
#         print(f"Группа {self.group} добавлена в файл")
#
#
#     @staticmethod
#     def load_groups(file):
#         with open(file, "r") as f:
#             print(json.load(f))
#
#
# group1.add_db()
# group2.add_db()
#
# file_name = "db.json"
# Group.load_groups(file_name)

# все, с этой задачей мы закончили

# Теперь повторяем все, что проходили на всех этих занятиях


# Задача:
# Есть словарь, который хранит названия стран и столиц (как ключ и значение).
# Необходимо реализовать: добавление, удаление, поиск, редактирование и просмотр данных (используя упаковку
# и распаковку данных)

# import json
#
#
# class CountryCapital:  # создадим класс, где мы все эти методы будет реализовывать
#     @staticmethod
#     def load(file_name):
#         # data = None
#         # Мы для каждого метода - данные должны считать
#         try:
#             data = json.load(open(file_name))
#         except FileNotFoundError:
#             data = {}
#         finally:
#             return data
#
#     @staticmethod  # Нам здесь проще и удобнее использовать статические методы, чтобы не создавать экземпляры
#     # класса. Мы можем просто обращаться к имени класса (CountryCapital.) и вызывать нужный нам метод
#     def add_country(file_name):
#         new_country = input("Введите название страны: ").lower()  # приводит к нижнему регистру
#         new_capital = input("Введите название столицы: ").lower()
#
#         data = CountryCapital.load(file_name)  # load - это метод или функция, используемая для загрузки
#         # данных о странах и их столицах из файла с указанным именем (file_name)
#         # Она выполняет чтение данных из файла и создание объекта (или объектов), представляющих эту информацию,
#         # которые затем могут быть использованы в программе.
#
#         data[new_country] = new_capital  # у нас есть словарь data{}, но нам нужно записать туда new_country -
#         # ключом, а new_capital - значением
#
#         with open(file_name, 'w') as f:  # 'w' - режим записи, создаем файл
#             json.dump(data, f, indent=2)  # dump - это функция из модуля json, которая используется для записи
#             # данных в файл в формате JSON.
#
#     @staticmethod
#     def delete_country(file_name):
#         del_country = input("Введите название страны: ").lower()
#
#         data = CountryCapital.load(file_name)
#
#         if del_country in data:  # Если название страны есть в нашей базе данных
#             del data[del_country]
#
#             with open(file_name, 'w') as f:
#                 json.dump(data, f, indent=2)
#         else:
#             print("Такой страны в базе нет")
#
#     @staticmethod
#     def search_data(file_name):
#         country = input("Введите название страны: ").lower()
#
#         data = CountryCapital.load(file_name)
#
#         if country in data:
#             print(f"Страна {country.capitalize()} столица {data[country].capitalize()} есть в словаре")
#         else:
#             print(f"Страны {country.capitalize()} нет в словаре")
#
#     @staticmethod
#     def edit_data(file_name):
#         country = input("Введите страну для корректировки: ").lower()
#
#         data = CountryCapital.load(file_name)
#
#         if country in data:
#             new_capital = input("Введите новое значение столицы: ").lower()
#             data[country] = new_capital
#             with open(file_name, 'w') as f:
#                 json.dump(data, f, indent=2)
#         else:
#             print("Такой страны в базе нет")
#
#     @staticmethod
#     def load_from_file(file_name):  # Открываем файл file_name для чтения.
#         with open(file_name) as f:
#             print({k.capitalize(): v.capitalize() for k, v in json.load(f).items()})
#
#
# # Используетcя функция json.load(f), чтобы загрузить данные из файла в формате JSON.
# # Загруженные данные преобразуются в (словарь Python).
# # Применяется генератор словарей {k.capitalize(): v.capitalize() for k, v in json.load(f).items()} для обработки
# # каждой пары ключ-значение из загруженных данных - json.load(f).items()
# # Внутри генератора словарей каждый ключ k и значение v обрабатываются методом capitalize(), который делает
# # первую букву каждого слова в строке заглавной, а все остальные буквы - строчными.
#
#
# file = "list_capital.json"
#
# while True:
#     index = input("Выбор действия:\n1 - добавление данных\n2 - удаление данных\n"
#                   "3 - поиск данных\n4 - редактирование данных\n5 - просмотр данных\n"
#                   "6 - завершение работы\nВвод: ")  # лучше (int) здесь не указывать, а обращаться к строкам,
#     # иначе, нам придется обрабатывать исключения с помощью (try, except)
#     # Поэтому, даже сейчас когда мы вводим (буквы), мы идем по кругу, и ошибки у нас не выскакивают
#     if index == "1":
#         CountryCapital.add_country(file)  # так как методы у нас статические, мы обращаемся напрямую через
#         # имя класса CountryCapital. и название метода (вызываем его)
#     elif index == "2":
#         CountryCapital.delete_country(file)
#     elif index == "3":
#         CountryCapital.search_data(file)
#     elif index == "4":
#         CountryCapital.edit_data(file)
#     elif index == "5":
#         CountryCapital.load_from_file(file)
#     elif index == "6":
#         break
#     else:
#         print("Введен некорректный номер")
#
# # Так что у нас повторялось постоянно во всех методах - Чтение файла!
# # try:
# #     data = json.load(open(file_name))
# # except FileNotFoundError:
# #     data = {}


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Мы будем продолжать работать с json объектами, но сейчас рассмотрим дополнительно новый модуль - import requests
# requests - это модуль в Python, который предоставляет простой и удобный способ взаимодействия с веб-ресурсами.
# Он позволяет отправлять HTTP-запросы (например, GET, POST, PUT, DELETE и т.д.) и получать ответы от серверов.

# import requests
# import json
#
# response = requests.get("https://jsonplaceholder.typicode.com/todos")  # response - это не название
# # переменной, это ответ тела сервера [200]
# # Отправляет GET-запрос на "https://jsonplaceholder.typicode.com/todos" с помощью requests.get().
# # print(response)  # <Response [200]>
# # print(response.text)  # получаем все данные по ссылке с сервера <class 'str'>
# todos = json.loads(response.text)  # Преобразует полученный JSON-ответ в словарь Python с помощью json.loads().
# # print(todos)
# # print(type(todos))  # <class 'list'>
# # print(type(todos[0]))  # <class 'dict'>
#
# todos_by_user = {}  # {1: 11, 2: 8, 3: 7, 4: 6, 5: 12, 6: 6, 7: 9, 8: 11, 9: 8, 10: 12}
# # Создает словарь todos_by_user, в котором ключами будут ID пользователей, а значениями - количество
# # выполненных задач каждым пользователем.
#
# for todo in todos:
#     if todo["completed"]:
#         try:
#             todos_by_user[todo['userId']] += 1  # {1: 2}
#         except KeyError:
#             todos_by_user[todo['userId']] = 1  # {1: 1, 2: 1, 3: 1}
# print(todos_by_user)
# # Результат: {1: 11, 2: 8, 3: 7, 4: 6, 5: 12, 6: 6, 7: 9, 8: 11, 9: 8, 10: 12}
# # Проходит циклом по задачам в todos, проверяя, была ли задача выполнена (todo["completed"]).
# #  Если да, увеличивает соответствующее значение в словаре todos_by_user на 1 или, если такого пользователя
# #  еще нет в словаре, создает новую запись с количеством выполненных задач равным 1.
#
# # Узнаем, кто выполнил максимальное кол-во задач
#
# # top_users = sorted(todos_by_user)  # если так, то получим только список ключей [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# # print(top_users)
#
# top_users = sorted(todos_by_user.items(), key=lambda x: x[1], reverse=True)  # сортировка по значениям
# print(top_users)  # [(5, 12), (10, 12), (1, 11), (8, 11), (7, 9), (2, 8), (9, 8), (3, 7), (4, 6), (6, 6)]
#
# max_complete = top_users[0][1]
# print(max_complete)  # 12
# # Вычисляет максимальное количество выполненных задач (max_complete) - берет первый элемент из top_users
# # (с наибольшим количеством выполненных задач) и его значение.
#
# users = []  # составим список для пользователей, которые выполнили максимальное кол-во задач
# for user, num_complete in top_users:
#     if num_complete < max_complete:  # 11 < 12
#         break
#     users.append(str(user))
# print(users)  # ['5', '10'] - только пользователь 5 и 10
#
# max_users = " and ".join(users)  # join - это метод строк
# print(max_users)
# print(f"Users {max_users} completed {max_complete} Todos")  # Users 5 and 10 completed 12 Todos


# max_users_data = []
#
# for user, num_complete in top_users:
#     if num_complete < max_complete:
#         break
#     max_users_data.append({"userId": user, "num_complete": num_complete})
#
# # Записываем данные в файл JSON
# with open("max_users.json", "w") as file:
#     json.dump(max_users_data, file, indent=2)


#
# ****************************************
# ----------------------------------------------------------------
# Урок №33 Python от 17.04.2024
# Урок №1
# -----------------------------------------------


# def keep(todo):  # Определяется функция keep(todo), которая принимает задачу (todo) в качестве аргумента.
#     completed = todo["completed"]  # Внутри функции извлекаются значения completed и userId из задачи.
#     max_count = str(todo["userId"]) in users  # Проверяется, выполнил ли пользователь (userId) максимальное
#     # количество задач, проверяя, есть ли его ID в списке users.
#     return completed and max_count
# # Функция возвращает True, если задача выполнена (completed) и пользователь выполнил максимальное количество
# # задач (max_count), в противном случае возвращает False.
#
#
# with open("filter_file.json", "w") as f:  # Открывается файл "filter_file.json" для записи.
#     filtered = list(filter(keep, todos))  # С помощью функции filter() фильтруется список задач todos с
#     # использованием функции keep. Функция filter() возвращает итератор, содержащий только те задачи, для
#     # которых функция keep возвращает True.
#     json.dump(filtered, f, indent=2)
# Результат фильтрации записывается в файл "filter_file.json" с использованием json.dump() с отступами
# в 2 пробела для лучшей читаемости.
# -----------------------------------------------


# С json форматом мы закончили, теперь переходим к изучению формата (csv)

# Формат CSV (Comma-Separated Values) (Значения, разделенные запятыми) представляет собой текстовый
# формат для хранения табличных данных.
# В CSV данные организованы в виде таблицы, где строки представляют отдельные записи, а столбцы -
# поля данных.
# Основные особенности формата CSV: Формат CSV (Comma-Separated Values) представляет собой текстовый
# формат для хранения табличных данных. В CSV данные организованы в виде таблицы, где строки
# представляют отдельные записи, а столбцы - поля данных.
#
# Основные особенности формата CSV:
# 1) Разделение данных:
# Записи разделяются запятыми (или другим разделителем, таким как точка с запятой или табуляция).
# Каждое поле данных отделено запятой. Например:
# sql
# Copy code
# имя, возраст, город
# John, 25, New York
# Alice, 30, London
# 2) Строки данных: Каждая строка представляет отдельную запись или строку данных.
# 3) Столбцы данных: Каждый столбец представляет определенный атрибут или поле данных.
# 4) Простота: CSV - это простой и удобный формат для хранения и передачи табличных данных.
# Он легко читается и обрабатывается как человеком, так и компьютером.


# Формат CSV (Comma-Separated Values) - текстовый формат для хранения больших объемов данных

# csv.reader() - [] - будет получать данные в виде списка
# csv.DictReader() - {} - будет получать данные в виде словаря


# import csv
#
#
# with open("data1.csv") as f:  # файл с таким названием "data.csv" уже создан, мы открываем его только
#     # на чтение, можно указывать (r), можно не указывать
#     file_reader = csv.reader(f, delimiter=";")  # file_reader - просто переменная
#     # delimiter - разделитель (";")
#
#     count = 0  # создадим какую-то переменную (count), присвоим ей значение 0
#     for row in file_reader:
#         if count == 0:  # Этот блок выполняется только для первой строки файла.
#             print(f"Файл содержит столбцы: {', '.join(row)}")  # Выводит на экран заголовки столбцов,
#             # разделенные запятыми.
#         else:  # Этот блок выполняется для всех остальных строк файла.
#             print(f"\t{row[0]} - {row[1]}. Родился в {row[2]} году.")  # Выводит на экран данные
#             # из строк CSV-файла. Для каждой строки выводится первый и второй столбец, а также
#             # текст "Родился в" и значение третьего столбца.
#         count += 1
#
#     # for row in file_reader:
#     #     print(row)


# Формат CSV (Comma-Separated Values) - текстовый формат для хранения больших объемов данных

# csv.reader() - [] - будет получать данные в виде списка
# csv.DictReader() - {} - будет получать данные в виде словаря
# sv.writer() - [] - будет записывать данные в виде списка
# sv.DictWriter() - {} - будет записывать данные в виде словаря


# import csv
#
#
# with open("data1.csv") as f:
#     file_reader = csv.DictReader(f, delimiter=";")
#     for row in file_reader:
#         print(row)
# Результат: получили 2 словаря
# {'Имя': 'Виктор', 'Профессия': 'Веб-дизайнер', 'Год рождения': '1995'}
# {'Имя': 'Игорь', 'Профессия': 'Программист', 'Год рождения': '1983'}


# import csv
#
#
# with open("data1.csv") as f:
#     file_names = ['Имя', 'Профессия', 'Год рождения']
#     file_reader = csv.DictReader(f, delimiter=";", fieldnames=file_names)
#     count = 0
#     for row in file_reader:
#         if count == 0:
#             print(f"Файл содержит столбцы: {', '.join(row)}")
#         print(f"\t{row['Имя']} - {row['Профессия']}. Родился в {row['Год рождения']} году.")
#         count += 1


# import csv
#
# # Этот код создает CSV-файл с именем "student.csv" и записывает в него данные о студентах.
# with open("student.csv", "w") as f:  # Открывает файл "student.csv" для записи ("w" - режим записи)
#     # и создает файловый объект f. Блок with гарантирует закрытие файла после завершения работы с ним.
#     writer = csv.writer(f, delimiter=";", lineterminator="\r")  # ограничитель строки
#     # Создает переменную - объект (writer) с помощью функции csv.writer(), разделитель данных будет
#     # использоваться точка с запятой (delimiter=";"), а lineterminator="\r" устанавливает символ конца
#     # строки в возврат каретки (\r) - возврат каретки
#     writer.writerow(["Имя", "Класс", "Возраст"])  #  Записывает первую строку в файл, содержащую
#     # заголовки столбцов: "Имя", "Класс" и "Возраст".
#     writer.writerow(["Женя", 9, 15])  # Записывает данные о первом студенте в файл. Имя "Женя", класс 9,
#     # возраст 15.
#     writer.writerow(["Саша", 5, 12])
#     writer.writerow(["Маша", 11, 18])


# import csv
#
#
# data = [['hostname', 'vendor', 'model', 'location'],
#         ['sw1', 'Cisco', '3750', 'London, Best str'],
#         ['sw2', 'Cisco', '3850', 'Liverpool, Better str'],
#         ['sw3', 'Cisco', '3650', 'Liverpool, Better str'],
#         ['sw4', 'Cisco', '3650', 'London, Best str']]
#
# with open("data_new.csv", "w") as f:
#     writer = csv.writer(f, delimiter=";", lineterminator="\r")
#     # for row in data:
#     #     writer.writerow(row)
#     writer.writerows(data)
#
# with open("data_new.csv") as f:
#     print(f.read())


# Формат CSV (Comma-Separated Values) - текстовый формат для хранения больших объемов данных

# csv.reader() - [] - будет получать данные в виде списка
# csv.DictReader() - {} - будет получать данные в виде словаря
# sv.writer() - [] - будет записывать данные в виде списка
# sv.DictWriter() - {} - будет записывать данные в виде словаря


# import csv
#
#
# with open("student1.csv", "w") as f:
#     names = ["Имя", "Возраст"]
#     file_writer = csv.DictWriter(f, delimiter=";", lineterminator="\r", fieldnames=names)
#     # fieldnames=names - будет заголовочная строка
#     file_writer.writeheader()  # заголовочная строка
#     file_writer.writerow({"Имя": "Саша", "Возраст": 6})  # вывести первую строку
#     file_writer.writerow({"Имя": "Маша", "Возраст": 15})  # вывести вторую строку
#     file_writer.writerow({"Имя": "Вова", "Возраст": 14})  # вывести третью строку


# import csv
#
# # Задача - список словарей
# data = [{
#     'hostname': 'sw1',
#     'location': 'London',
#     'model': '3750',
#     'vendor': 'Cisco'
# }, {
#     'hostname': 'sw2',
#     'location': 'Liverpool',
#     'model': '3850',
#     'vendor': 'Cisco'
# }, {
#     'hostname': 'sw3',
#     'location': 'Liverpool',
#     'model': '3650',
#     'vendor': 'Cisco'
# }, {
#     'hostname': 'sw4',
#     'location': 'London',
#     'model': '3650',
#     'vendor': 'Cisco'
# }]
#
# with open("dict_writer.csv", "w") as f:
#     # fieldnames = ['hostname', 'location', 'model', 'vendor']
#     writer = csv.DictWriter(f, delimiter=";", lineterminator="\r", fieldnames=list(data[0].keys()))
#     writer.writeheader()
#     for d in data:
#         writer.writerow(d)  # обращаемся к переменной writer и записываем, проходя в цикле, строки
#         # по порядку

# print(list(data[0].keys()))  # нам нужно из словаря взять только ключи, поэтому .keys()
# В Python \r представляет собой управляющий символ, который обозначает возврат каретки (carriage return).
# Этот символ используется для перемещения курсора в начало строки без перехода на новую строку.


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Парсинг

# Новая тема - это парсинг данных с какого-то сайта * * *
# Парсинг данных с сайта - это процесс извлечения информации из веб-страницы или веб-сайта с целью анализа,
# обработки или использования этой информации в приложениях или исследованиях. Парсинг может включать
# в себя извлечение текста, изображений, ссылок, таблиц, метаданных и других элементов веб-страницы.

# Основные шаги парсинга данных с сайта обычно включают в себя:
#
# 1) Загрузка страницы: С помощью HTTP-запроса загружается HTML-код веб-страницы, с которой нужно извлечь данные.
# 2) Анализ HTML: HTML-код веб-страницы анализируется для идентификации нужных элементов, таких как теги,
# классы, идентификаторы и атрибуты.
# 3) Извлечение данных: Используя различные методы и библиотеки парсинга (например, BeautifulSoup для Python),
# данные извлекаются из HTML-кода веб-страницы в структурированный формат для последующей обработки.
# 4) Обработка данных: Извлеченные данные могут быть очищены, обработаны и преобразованы в нужный формат
# в соответствии с целями парсинга.
# 5) Использование данных: Обработанные данные могут быть использованы для анализа, визуализации, хранения,
# интеграции с другими системами или любыми другими целями.


# from bs4 import BeautifulSoup
#
#
# f = open('index.html').read()  # здесь мы просто открыли файл для чтения в виде строки (получили просто
# # html разметку)
# # print(f)
#
# soup = BeautifulSoup(f, "html.parser")  # сюда мы передадим нашу строку, она сейчас находится в
# переменной (f), BeautifulSoup - требует своим вторым параметром (parser)

# row = soup.find("div", class_="name").text  # поиск (html) элементов на странице (1 встречный элемент)
# row = soup.find_all("div", class_="name")  # возвращает список всех найденных совпадений
# [<div class="name">Petr</div>, <div class="name">Alena</div>, <div class="name">Kate</div>,
# <div class="name">Ksenia</div>]
# row = soup.find_all("div", class_="name")[1]  # можно обратиться по индексу - <div class="name">Alena</div>
# row = soup.find_all("div", class_="name")[1].text # и даже взять текст по индексу - Alena
# print(row)

# Можем добираться до элементов через точечную нотацию:
# row = soup.find_all("div", class_="row")[1].find("div", class_="links")  # получаем доступ к элементу
# # "div" по классу "row". но обращаемся к классу, который внутри "links", отрабатывает слева направо
# print(row)

# Теперь хотим получить все зарплаты, которые есть, т.е. ко всем salary:
# row = soup.find_all("div", {"data-set": "salary"})  # "data-set" - это пользовательский атрибут,
# почему в {}, потому что указываем как элементы словаря, получили 4 блока
# row = soup.find_all("div", {"class": "name"})
# print(row)


# row = soup.find("div", string="Alena")  # <div class="name">Alena</div>
# А теперь попробуем найти элемент на уровень выше с помощью (.parent)
# row = soup.find("div", string="Alena").parent
# .parent - можно применять несколько раз, если написать его 2 раза (.parent.parent), то мы получим
# доступ на 2 уровня выше
# row = soup.find("div", string="Alena").parent.parent
# print(row)
# row = soup.find("div", string="Alena").find_parent(class_="row")  # это найти родителя также,
# # тоже самое, что и (.parent.parent). Здесь мы идем изнутри наружу.
# print(row)


# Давайте попробуем найти (id)
# row = soup.find("div", id="whois3")  # <div class="whois" id="whois3">Designer</div>
# row = soup.find("div", id="whois3").find_next_sibling()  # <div data-set="salary">2300 usd</div> -
# здесь мы пишем (найти следующего родственника)
# row = soup.find("div", id="whois3").find_previous_sibling()  # предыдущего
# # <div class="name">Ksenia</div>
# print(row)


# from bs4 import BeautifulSoup
#
#
# def get_copywriter(tag):
#     whois = tag.find("div", class_="whois")
#     if "Copywriter" in whois:
#         return tag
#     return None
#
#
# f = open('index.html').read()
# soup = BeautifulSoup(f, "html.parser")
#
# copywriter = []
# row = soup.find_all("div", class_="row")  # row - это список их 4х этих divов
# for i in row:
#     cw = get_copywriter(i)
#     if cw:
#         copywriter.append(cw)
#
# print(copywriter)


# from bs4 import BeautifulSoup
# import re
#
#
# def get_salary(s):
#     pattern = r"\d+"
#     # res = re.findall(pattern, s)[0]
#     res = re.search(pattern, s).group()
#     print(res)
#
#
# f = open('index.html').read()
# soup = BeautifulSoup(f, "html.parser")
# salary = soup.find_all("div", {"data-set": "salary"})
#
# for i in salary:
#     get_salary(i.text)


#
# ****************************************
# ----------------------------------------------------------------
# Урок №34 Python от 22.04.2024
# Урок №1
# -----------------------------------------------

# Делаем парсинг со стороннего ресурса - https://ru.wordpress.org/
# Получаем доступ к ресурсу, устанавливая модуль requests
# Коды состояние:
# 1XX - информация
# 2XX - успешно
# 3XX - перенаправление
# 4XX - ошибка клиента (ошибка на вашей стороне)
# 5XX - ошибка сервера (ошибка на их стороне)


# import requests
#
# r = requests.get("https://ru.wordpress.org/")
# print(r)  # <Response [200]>
# print(r.status_code)  # 200
# print(r.headers)  # заголовки, которые нам возвращает сервер
# print(r.headers['Content-Type'])  # text/html; charset=UTF-8
# r.encoding = 'utf-8'
# print(r)
# print(r.content)  # содержимое - байтовая строка
# print(r.text)


# import requests
#
# r = requests.get("https://ru.wordpress.org/").encode('utf-8')
# print(r.headers)
# print(r.content)
# print(r.text)


# import requests
# from bs4 import BeautifulSoup
#
#
# def get_html(url):
#     r = requests.get(url)
#     return r.text
#
#
# def get_data(html):
#     soup = BeautifulSoup(html, "lxml")
#     p1 = soup.find("header", id="masthead").find("p", class_="site-title").text
#     return p1
#
#
# def main():
#     url = "https://ru.wordpress.org/"
#     print(get_data(get_html(url)))
#
#
# if __name__ == '__main__':
#     main()


# А ТЕПЕРЬ ЭТОТ КОД МЫ РАЗБЕРЕМ ПОДРОБНЕЕ :
# BeautifulSoup - это библиотека для парсинга HTML и XML документов.
# import requests  # Эта строка импортирует модуль requests, который используется для отправки HTTP-запросов.
# from bs4 import BeautifulSoup  # Эта строка импортирует класс BeautifulSoup из модуля bs4.
#
#
# def get_html(url):  # Эта строка определяет функцию get_html(), которая принимает URL в качестве аргумента.
#     r = requests.get(url)  # Эта строка отправляет GET-запрос по указанному URL и сохраняет ответ в
#     # переменной (r).
#     return r.text  # Эта строка возвращает текст ответа (HTML-код) из переменной r.
#
#
# def get_data(html):  # Эта строка определяет функцию get_data(), которая принимает HTML-код в качестве
#     # аргумента.
#     soup = BeautifulSoup(html, "lxml")  # (вместо "html.parser" - "lxml") Эта строка создает объект
#     # BeautifulSoup из HTML-кода, который был передан в функцию. Аргумент "lxml" указывает на использование
#     # парсера lxml для анализа HTML.
#     p1 = soup.find("header", id="masthead").find("p", class_="site-title").text  # Эта строка находит
#     # элемент <p> с классом site-title внутри <header> с идентификатором masthead и извлекает текст из него.
#     # Результат сохраняется в переменной p1.
#     return p1  # Эта строка возвращает извлеченный текст.
#
#
# def main():  # Эта строка определяет главную функцию main().
#     url = "https://ru.wordpress.org/"  # Эта строка определяет URL-адрес, который мы будем парсить.
#     print(get_data(get_html(url)))  # Эта строка вызывает функцию get_html() для загрузки HTML-кода
#     # страницы по указанному URL, а затем передает этот HTML-код в функцию get_data() для извлечения данных.
#     # Результат выводится на экран.
#
#
# if __name__ == '__main__':  # Этот блок проверяет, запущен ли скрипт напрямую (а не импортирован в
#     # другой скрипт). Если скрипт запущен напрямую:
#     main()  # Эта строка вызывает функцию main() для выполнения основной логики программы.


# import re
# import requests
# from bs4 import BeautifulSoup
#
#
# def main():
#     url = "https://ru.wordpress.org/plugins/"
#     get_data(get_html(url))
#
#
# def get_data(html):
#     soup = BeautifulSoup(html, "lxml")
#     p1 = soup.find_all("section", class_="plugin-section")[-1]
#     plugins = p1.find_all('article')
#
#     for plugin in plugins:
#         name = plugin.find("h3").text
#         url = plugin.find("h3").find("a").get('href')
#         rating = plugin.find("span", class_="rating-count").find("a").text
#         r = refined(rating)
#         data = {'name': name, "url": url, "rating": r}
#         write_csv(data)
#
#
# def get_html(url):
#     r = requests.get(url)
#     return r.text
#
#
# def write_csv(data):
#     with open("plugins.csv", "a") as f:
#         writer = csv.writer(f, delimiter=";", lineterminator="\r")
#         writer.writerow((data['name'], data['url'], data['rating']))
#
#
# def refined(s):
#     res = re.sub(r"\D+", "", s)
#     return res
#
#
# if __name__ == '__main__':
#     main()


# А ТЕПЕРЬ ЭТОТ КОД МЫ РАЗБЕРЕМ ПОДРОБНЕЕ :
# import re  # Эта строка импортирует модуль re, который предоставляет функциональность для работы
# # с регулярными выражениями (regular expressions).
# import requests  # Эта строка импортирует модуль requests, который используется для отправки HTTP-запросов.
# from bs4 import BeautifulSoup  # Эта строка импортирует класс BeautifulSoup из модуля bs4. BeautifulSoup
# # - это библиотека для парсинга HTML и XML документов.
# import csv
#
#
# def main():
#     url = "https://ru.wordpress.org/plugins/"  # Эта строка определяет URL-адрес страницы с плагинами
#     # для WordPress.
#     get_data(get_html(url))
#
#
# def get_data(html):
#     soup = BeautifulSoup(html, "lxml")  # Эта строка создает объект BeautifulSoup из HTML-кода,
#     # который был передан в функцию. Аргумент "lxml" указывает на использование парсера lxml для анализа HTML.
#     p1 = soup.find_all("section", class_="plugin-section")[-1]  # Эта строка находит последний элемент
#     # <section> с классом "plugin-section". Это делается, чтобы извлечь список плагинов с правильного блока
#     # на странице.
#     plugins = p1.find_all('article')  # Эта строка находит все элементы <article> внутри найденного <section>.
#     # Каждый <article> представляет собой один плагин.
#
#     for plugin in plugins:  # в цикле извлекаются данные о каждом плагине
#         name = plugin.find("h3").text  # Извлекается текст заголовка <h3>, который содержит название плагина.
#         # print(name)
#         url = plugin.find("h3").find("a").get('href')  # Извлекается атрибут href ссылки внутри заголовка <h3>,
#         # который содержит URL плагина.
#         # print(url)
#         rating = plugin.find("span", class_="rating-count").find("a").text  # Извлекается текст элемента,
#         # который содержит рейтинг плагина.
#         # print(rating)
#         r = refined(rating)  # Рейтинг плагина очищается от лишних символов с помощью функции refined().
#         # print(r)
#         data = {'name': name, "url": url, "rating": r}  # Создается словарь с данными о плагине.
#         # print(data)
#         write_csv(data)  # Данные о плагине записываются в CSV-файл.
#
#
# def get_html(url):  # Эта строка определяет функцию get_html(), которая принимает URL в качестве аргумента.
#     r = requests.get(url)  # Эта строка отправляет GET-запрос по указанному URL и сохраняет ответ
#     # в переменной (r).
#     return r.text  # Эта строка возвращает текст ответа (HTML-код) из переменной (r).
#
#
# def write_csv(data):  # Эта строка определяет функцию write_csv(), которая принимает данные о плагине в виде
#     # словаря в качестве аргумента.
#     with open("plugins.csv", "a") as f:  # Эта строка открывает файл "plugins.csv" для записи в формате CSV.
#         # Режим "a" означает, что новые данные будут добавляться в конец файла.
#         writer = csv.writer(f, delimiter=";", lineterminator="\r")  # Создается объект writer для записи CSV.
#         # Разделитель столбцов установлен в точку с запятой (;), а символ новой строки установлен в возврат
#         # каретки (\r).
#         writer.writerow((data['name'], data['url'], data['rating']))  # Эта строка записывает данные
#         # о плагине в CSV-файл.
#
#
# def refined(s):  # Эта строка определяет функцию refined(), которая принимает строку в качестве аргумента.
#     res = re.sub(r"\D+", "", s)  # Эта строка использует регулярное выражение для удаления всех
#     # нецифровых символов из строки, мы ищем все что не цифра, заменяем на пустую строку "",
#     # и где будем искать, в аргументе (s)
#     return res  # Очищенная строка возвращается в качестве результата.
#
#
# if __name__ == '__main__':
#     main()


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------


# Делаем парсинг сайта:
# import requests
# from bs4 import BeautifulSoup
# import csv
#
#
# def get_html(url):
#     r = requests.get(url)
#     return r.text
#
#
# def refine_cy(s):
#     return s.split()[-1]
#
#
# def get_data(html):
#     soup = BeautifulSoup(html, "lxml")
#     elements = soup.find_all("article", class_="plugin-card")
#     for el in elements:
#         try:
#             name = el.find("h3").text
#         except AttributeError:
#             name = ""
#         try:
#             url = el.find("h3").find("a")['href']
#         except AttributeError:
#             url = ""
#         # print(url)
#
#         try:
#             snippet = el.find("div", class_="entry-excerpt").text.strip()  # .strip() - удаляет все лишние пробелы
#         except AttributeError:
#             snippet = ""
#         # print(snippet)
#
#         try:
#             active = el.find("span", class_="active-installs").text.strip()
#         except AttributeError:
#             active = ""
#         # print(active)
#
#         try:
#             c = el.find("span", class_="tested-with").text.strip()
#             cy = refine_cy(c)
#         except AttributeError:
#             cy = ""
#         data = {
#             'name': name,
#             'url': url,
#             'snippet': snippet,
#             'active': active,
#             'cy': cy
#         }
#         write_csv(data)
#
#
# def write_csv(data):
#     with open("plugins1.csv", "a", encoding="utf-8") as f:  # можно поставить кодировку для русского языка
#         # - encoding="windows-1251"
#         writer = csv.writer(f, delimiter=";", lineterminator="\r")
#         writer.writerow((data['name'], data['url'], data['snippet'], data['active'], data['cy']))
#
#
# def main():
#     for i in range(1, 5):
#         url = "https://ru.wordpress.org/plugins/browse/blocks/page/{i}/"
#         get_data(get_html(url))
#
#
# if __name__ == '__main__':
#     main()


# ---------------------------------------
# from parsers import Parser
#
#
# def main():
#     pars = Parser("https://www.ixbt.com/live/index/news/", "news.txt")
#     # pars.get_html()
#     pars.run()
#
#
# if __name__ == '__main__':
#     main()


#
# ****************************************
# ----------------------------------------------------------------
# Урок №35 Python от 24.04.2024
# Урок №1
# -----------------------------------------------

# from parsers import Parser
#
#
# def main():
#     pars = Parser("https://www.ixbt.com/live/index/news/", "news.txt")
#     pars.run()
#
#
# if __name__ == '__main__':
#     main()
# ---------------------------------------


# НОВАЯ ТЕМА:

# MVC
# Model - модель
# View - вид или представление
# Controller - контроллер

# Задача:
# Создать приложение, которое позволит манипулировать статьями. Реализуйте паттерн MVC.

# Сокеты:
# Серверный
# Клиентский


#
# ****************************************
# ----------------------------------------------------------------
# Урок №36 Python от 29.04.2024
# Урок №1
# -----------------------------------------------


# import socket
#
# from view import index, blog
#
# # Хотим создать серверный сокет
# URLS = {
#     '/': index,
#     '/blog': blog
# }
#
#
# def parser_request(request):
#     parsed = request.split()
#     method = parsed[0]
#     url = parsed[1]
#     return method, url
#
#
# def generate_headers(method, url):
#     if method != 'GET':
#         return 'HTTP/1.1 405 Method Not Allowed!\n\n', 405
#     if url not in URLS:
#         return 'HTTP/1.1 404 Page Not Found!\n\n', 404
#     return 'HTTP/1.1 200 OK!\n\n', 200
#
#
# def generate_content(code, url):
#     if code == 404:
#         return '<h1>404</h1><h3>Page Not Found!</h3>'
#     if code == 405:
#         return '<h1>405</h1><h3>Method Not Allowed!</h3>'
#     return URLS[url]()
#
#
# def generate_response(request):
#     method, url = parser_request(request)
#     headers, code = generate_headers(method, url)
#     body = generate_content(code, url)
#     return (headers + body).encode()
#
#
# def run():
#     server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # здесь мы обратимся к нашему модулю socket
#     # и вызовем у него метод .socket, AF_INET - для сетевого протокола
#     server_socket.bind(('127.0.0.1', 5000))  # 127.0.0.1:5000 - .bind - привязывает сокет к адресу address
#     server_socket.listen()  # .listen() - переводит сервер в режим приема соединения
#
#     while True:
#         client_socket, addr = server_socket.accept()  # принимает соединение и блокирует приложение в ожидании
#         # сообщения от клиента, conn - объект соединения, address - адрес клиента
#         request = client_socket.recv(1024)  # .recv - читает и возвращает данные в двоичном формате
#         print(f"Клиент: {addr} => \n{request.decode('utf-8')}\n")
#         # print(f"Клиент: {addr} => \n{request}\n")
#
#         response = generate_response(request.decode())
#         client_socket.sendall(response)
#         client_socket.close()
#
#
# if __name__ == "__main__":  # мы будем вызывать (run), если запуск будем делать с этого документа
#     run()


# ---------------------------------------

# НОВАЯ ТЕМА - БАЗЫ ДАННЫХ * * *

# SQL - запрос -> СУБД -> БД
# Данные -> СУБД -> БД


import sqlite3

# Любая база данных работает с расширением .db, .sqlite (в джанго), .db3, .sqlite3

# Сейчас мы рассмотрим 2 способа создания баз данных:
# Вариант №1
# con = sqlite3.connect("profile.db")  # Метод .connect делает соединение с базой данных, если она существует,
# # если ее нет, он эту базу данных создаст
# cur = con.cursor()  # а потом через переменную мы можем обратиться к методу .cursor()
# cur.execute("""""")
# con.close()  # не забываем закрывать соединение с базой данных

# Вариант №2
# Теперь мы сделаем тоже самое через контекстный менеджер (with)
# Создали пустую базу данных
# with sqlite3.connect("profile.db") as con:
#     cur = con.cursor()
#     cur.execute("""""")

# Теперь заполним ее информацией
# with sqlite3.connect("profile.db") as con:
#     cur = con.cursor()
#     cur.execute("""CREATE TABLE IF NOT EXISTS users(
#     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     name TEXT NOT NULL,
#     summa REAL,
#     date BLOB)""")
#     cur.execute("DROP TABLE users")


# with sqlite3.connect("profile.db") as con:
#     cur = con.cursor()
#     cur.execute("""CREATE TABLE IF NOT EXISTS users(
#     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     name TEXT NOT NULL,
#     summa REAL,
#     date BLOB)""")
#     # cur.execute("DROP TABLE users")  # удаляет таблицу


# SELECT * звездочка  - это все значения или нужно перечислять названия столбцов
# SELECT * [ALL | DISTINCT] {* | столбец_1 [, столбец_N]} - DISTINCT - чтобы не дублировать
# FROM T1 - это будет имя таблицы - таблица_1 [, таблица_N]
# WHERE условие
# =, ==, !=, <>, <, <=, >, >=
# (AND, OR)
# [NOT] BETWEEN начальное_значение AND конечное_значение - BETWEEN - здесь мы указываем диапазон значений
# [NOT] LIKE шаблон_строки:
# % - любое кол-во символов
# _ - один любой символ
# Представим, что вы хотите найти все имена, начинающиеся с буквы J. Для этого достаточно использовать
# следующий запрос: SELECT * FROM table_name WHERE name LIKE 'J%';


# SELECT *
# FROM T1
# /*WHERE FName LIKE "Петров"*/+
# --WHERE FName == "Петров" (=)
# WHERE FName LIKE "Пе%"

# IS NULL
# IS [NOT] NULL
# NULL - это специальное значение, которое используется в SQL для обозначения отсутствия данных.
# Оно отличается от пустой строки или нулевого значения, так как NULL означает отсутствие какого-либо значения
# в ячейке таблицы.

# ORDER BY CITY2 - отсортировать в алфавитном порядке


#
# ****************************************
# ----------------------------------------------------------------
# Урок №37 Python от 13.05.2024
# Урок №1
# -----------------------------------------------

# В SQL, GLOB (Global) - это оператор, используемый для сопоставления шаблонов строк, аналогичный оператору LIKE.
# Однако GLOB используется в основном в базах данных SQLite, а не в других популярных СУБД, таких как MySQL или
# PostgreSQL.

# Основные характеристики оператора GLOB:
# Шаблоны: GLOB использует шаблоны для сопоставления строк, где специальный символ * соответствует любой
# последовательности символов (включая пустую строку), а символ ? соответствует любому одному символу.
# Чувствительность к регистру: Оператор GLOB чувствителен к регистру. Это означает, что "abc" не будет
# соответствовать "ABC" при использовании GLOB.
#
# Примеры использования:
# '*abc*' соответствует любой строке, содержащей "abc".
# 'a?c' соответствует строкам длиной 3 символа, где первый символ - 'a', второй может быть любым, а третий - 'c'.


# [NOT] GLOB регулярные_выражения:
# * - любое кол-во символов
# ? - элемент может быть, может не быть
# . - один любой символ
# [символы] - соответствует одному из заданных символов
# [начальное_значение - конечное_значение] - одно из значений заданного диапазона
# [^...] - все, кроме заданных символов [^0-9]


# ORDER BY название_столбца | номер_столбца [ASC | DESC]
# ASC - сортировка по возрастанию
# DESC - сортировка по убыванию

# [NOT] IN (набор значений  | выражение)

# SELECT NAME, SUM, KOD
# FROM ZAKAZ
# /*WHERE SUM > 4000 AND (KOD = 1003 OR KOD = 1010 OR KOD = 1016)*/
# /*WHERE SUM > 4000 AND (KOD LIKE 1003 OR KOD LIKE 1010 OR KOD LIKE 1016)*/
# /*WHERE SUM > 4000 AND (KOD IS 1003 OR KOD IS 1010 OR KOD IS 1016)*/
# WHERE SUM > 4000 AND KOD IN (1003, 1010, 1016) или NOT IN - это одно из заданных значений

# ---------------------------------------------

import sqlite3

# with sqlite3.connect("users.db") as con:
#     cur = con.cursor()
#     cur.execute("""
#     CREATE TABLE IF NOT EXISTS person(
#     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     name TEXT NOT NULL,
#     phone BLOB NOT NULL DEFAULT "+79099000000",
#     age INTEGER CHECK(age > 0 AND age < 100),
#     email TEXT UNIQUE
#     )""")


# ---------------------------------------------

# with sqlite3.connect("users.db") as con:
#     cur = con.cursor()
#
#     cur.execute("""
#     ALTER TABLE person_table
#     DROP TABLE person_table
#     """)
# # удалить всю таблицу, не удаляя базу данных
#
#     cur.execute("""
#     ALTER TABLE person_table
#     DROP COLUMN home_address;
#     """)
# # здесь удаляем не всю таблицу, а только один из столбцов
#
#     cur.execute("""
#     ALTER TABLE person_table
#     RENAME COLUMN address TO home_address;
#     """)
#
#     cur.execute("""
#     ALTER TABLE person_table
#     ADD COLUMN address_add TEXT NOT NULL DEFAULT "Москва";
#     """)
#
#     cur.execute("""
#     ALTER TABLE person
#     RENAME TO person_table;
#     """)
#
#     cur.execute("""
#     CREATE TABLE IF NOT EXISTS person(
#     id INTEGER PRIMARY KEY AUTOINCREMENT,
#     name TEXT NOT NULL,
#     phone BLOB NOT NULL DEFAULT "+79099000000",
#     age INTEGER CHECK(age > 0 AND age < 100),
#     email TEXT UNIQUE
#     )""")


# INSERT - добавление новой строки в базу данных
# UPDATE - изменить строку в существующей базе данных
# DELETE - удаление строки из БД

# INSERT INTO имя_таблицы [(название_столбцов)]
# VALUES (набор_значений)
# SELECT список_столбцов
# FROM имя_таблицы
# WHERE условие

# ---------------------------------------------

# INSERT INTO T1
# VALUES (16, 'Юшина', 'Секретарь', 2, 1500)
#
# INSERT INTO T1 (ID, Doljnost, ORab, ZP, FName)
# VALUES (17, 'Охранники', 1, 2500, 'Петров');
#
# INSERT INTO T1 (ID, FName)
# VALUES (29, 'Николаев');
#
#
# Перенос в другую таблицу
# INSERT INTO T1 (ID, FName, Doljnost, ORab, ZP)
# SELECT ID, FName, D, ORabot, Zp
# FROM T2
# WHERE ID LIKE 18;
# ---------------------------------------------


# UPDATE имя_таблицы
# SET столбец_1=значение_1, столбец_N=значение_N - установить значение
# WHERE условие

# DELETE FROM имя_таблицы - удалить из таблицы
# WHERE удаление

# Новый оператор LIMIT, используется только после ORDER BY
# LIMIT - количество строк до вывода
# OFFSET - смещение (на необходимое количество)

# [NOT] IN (набор_значений  | выражение)
# ORDER BY название_столбца | номер_столбца [ASC | DESC]
# LIMIT количество_строк OFFSET смещение
#         LIMIT [смещение,] количество_строк


# SELECT * - выведем все
# FROM Ware - из таблицы Ware
# ORDER BY Price DESC - отсортируем по цене (Price) по убыванию
# LIMIT 5 OFFSET 2 - выведем только 5 строк, OFFSET 2 - смещение на первые 2 строчки (те после 2-х следующие 5)


# SELECT *
# FROM Ware
# ORDER BY Price DESC
# /*LIMIT 5 OFFSET 2*/
# LIMIT 2, 5 - другой вариант записи LIMIT


# with sqlite3.connect("db_4.db") as con:
#     cur = con.cursor()
#
#     cur.execute("""
#     SELECT *
#     FROM Ware
#     ORDER BY Price DESC
#     LIMIT 2, 5
#     """)
#
#     # res = cur.fetchall() - возвращает список кортежей
#     # res = cur.fetchone()
#     # print(res)
#     # res = cur.fetchone()
#     # print(res)
#     # res = cur.fetchmany(2)  # цифра - это кол-во записей, которые хотим вывести
#     # print(res)
#
#     for res in cur:
#         print(res)

# Логическая БД
# Физическая БД


#
# ****************************************
# ----------------------------------------------------------------
# Урок №38 Python от 15.05.2024
# Урок №1
# -----------------------------------------------

# Логическая БД
# Физическая БД

# Первичный ключ:
# Суррогатный ключ (искусственный)
# Логический ключ (естественный)

# Виды связи:
# 1:1 Связь один-к-одному
# 1:М Связь один-ко-многим
# M:N Связь многие-ко-многим

# Внешний ключ - это ограничение на ввод данных для определенного поля.


# Декартовое произведение - все возможные комбинации каждой строки одной таблицы с каждой строкой другой таблицы
# Это если следующее:
# SELECT Seller, Goods
# FROM Seller, SallerGoods

# Для решения этой проблемы, нам нужно связать внешний ключ с первичным ключом
# То есть:
# SELECT Seller, Goods
# FROM Seller, SallerGoods
# WHERE Seller.INNSeller=SallerGoods.INNSeller


# Функции агрегирования (посчитает по значению столбца)
# SUM (только с числами)
# AVG (только с числами)
# COUNT (с любыми типами данных)
# MIN (с любыми типами данных)
# MAX (с любыми типами данных)


#
# ****************************************
# ----------------------------------------------------------------
# Урок №39 Python от 20.05.2024
# Урок №1
# -----------------------------------------------


# ПОРЯДОК НАПИСАНИЯ КОМАНД:
# WHERE (условие и связывание таблиц)
# GROUP BY (группировать по)
# HAVING (условие для групп)
# ORDER BY (отсортировать по алфавитному порядку или наоборот)
# LIMIT (ограничить кол-во строк)

# Пример:
# SELECT city, MAX(rating)
# FROM Customers
# GROUP BY city
# ORDER BY 2


# COUNT
# MIN
# MAX

# Подзапросы (вложенные запросы)
# - однострочный (>, <, =, <>, !=, <=, =>)
# - многострочный IN (NOT IN)


#
# ****************************************
# ----------------------------------------------------------------
# Урок №40 Python от 22.05.2024
# Урок №1
# -----------------------------------------------

# НОВЫЙ ОПЕРАТОР
# where
# exists (проверяет элемент на существование)
# используется сразу после оператора where
# а далее идет вложенный запрос

# select cnum, cname, city
# from Customers
# where exists
# (select *
# from Customers
# where city="Berlin")

# Оператор exists отрабатывает, если вложенный запрос вернет значение true,
# То есть основной (главный) запрос отработает, если вложенный запрос вернет значение true

# UNION - выводит элементы без дубликатов,
# UNION ALL - выводит данные с дубликатами (с повторяющимися строками)

# Внутреннее объединение - пересечение 2х таблиц - JOIN
# full outer join
# inner join
# left join
# right join

# SELECT столбцы
# FROM имя_таблицы_1 [INNER] JOIN имя_таблицы_2
# ON условие (это связь_ключей)


# import sqlite3
#
#
# cars_list = [
#     ('BMW', 54000),
#     ('Chevrolet', 46000),
#     ('Daewoo', 38000),
#     ('Citroen', 29000),
#     ('Honda', 33000),
# ]
#
# with sqlite3.connect("car.db") as con:  # con - это переменная, где у нас хранится соединение с базой данных
#     cur = con.cursor()  # execute - метод, который выполняет 1 xql запрос
#     cur.execute("""
#     CREATE TABLE IF NOT EXISTS cars (
#         car_id INTEGER PRIMARY KEY AUTOINCREMENT,
#         model TEXT,
#         price INTEGER
#     )
#     """)
#
#     # executescript - выполняет много разных разного плана запросов
#     cur.executescript("""
#     DELETE FROM cars WHERE model LIKE 'B%';
#     UPDATE cars SET price = price + 100;
#     """)
#
#     # А теперь именованные параметры
#     cur.execute(f"UPDATE cars SET price = :Price where model LIKE 'B%'", {'Price': 0})
#
#     # cur.executemany("INSERT INTO cars VALUES(NULL, ?, ?)", cars_list)
#     # executemany - выполняет много однотипных запросов
#
#     # for car in cars_list:
#     #     cur.execute("INSERT INTO cars VALUES(NULL, ?, ?)", car)
#
#     # cur.execute("INSERT INTO cars VALUES(1, 'Renault', 22000)")
#     # cur.execute("INSERT INTO cars VALUES(2, 'Volvo', 29000)")
#     # cur.execute("INSERT INTO cars VALUES(3, 'Mercedes', 57000)")
#     # cur.execute("INSERT INTO cars VALUES(4, 'Bentley', 35000)")
#     # cur.execute("INSERT INTO cars VALUES(5, 'Audi', 52000)")
#
# # con.commit() - это если мы не будем пользоваться контекстным менеджером (with)
# # con.close()


#
# ****************************************
# ----------------------------------------------------------------
# Урок №41 Python от 27.05.2024
# Урок №1
# -----------------------------------------------

# ПОЧТИ ЗАВЕРШИЛИ РАБОТУ с xql и написанием запросов в SQLiteStudio
# ----------------------------------------------
# ----------------------------


# Запрос №1
# import sqlite3
#
# con = None
# try:
#     con = sqlite3.connect("car.db")
#     cur = con.cursor()
#     cur.executescript("""
#     CREATE TABLE IF NOT EXISTS cars (
#         car_id INTEGER PRIMARY KEY AUTOINCREMENT,
#         model TEXT,
#         price INTEGER
#     );
#     BEGIN;
#     INSERT INTO cars VALUES(NULL, 'Renault', 22000);
#     UPDATE cars2 SET price = price + 100;
#     """)
#     con.commit()
# except sqlite3.Error as e:
#     if con:
#         con.rollback()
#     print("Ошибка выполнения запроса")
# finally:
#     if con:
#         con.close()
# -------------------------------

# Этот из чата Сработал:
# con = None
# try:
#     con = sqlite3.connect("car.db")
#     cur = con.cursor()
#     cur.executescript("""
#     CREATE TABLE IF NOT EXISTS cars (
#         car_id INTEGER PRIMARY KEY AUTOINCREMENT,
#         model TEXT,
#         price INTEGER
#     );
#     BEGIN;
#     INSERT INTO cars VALUES(NULL, 'Renault', 22000);
#     UPDATE cars SET price = price + 100;
#     """)
#     con.commit()
# except sqlite3.Error as e:
#     if con:
#         ...
#     print("Ошибка выполнения запроса")
# finally:
#     if con:
#         con.close()
# -------------------------------


# Запрос №2
# import sqlite3
#
#
# with sqlite3.connect("car.db") as con:
#     con.row_factory = sqlite3.Row
#     cur = con.cursor()
#     cur.executescript("""
#     CREATE TABLE IF NOT EXISTS cars (
#         car_id INTEGER PRIMARY KEY AUTOINCREMENT,
#         model TEXT,
#         price INTEGER
#     );
#     CREATE TABLE IF NOT EXISTS cost (
#         name TEXT, tr_in INTEGER, buy INTEGER
#     );
#     """)
#
#     # cur.execute("INSERT INTO cars VALUES(NULL, 'Запорожец', 1000)")
#     # last_row_id = cur.lastrowid  # у объекта cur мы берем id последней записи
#     # buy_car_id = 2
#     # cur.execute("INSERT INTO cost VALUES('Илья', ?, ?)", (last_row_id, buy_car_id))
#
#     cur.execute("SELECT model, price FROM cars")
#
#     # rows = cur.fetchall()
#     # print(rows)
#     # rows = cur.fetchone()
#     # print(rows)
#     # rows = cur.fetchmany(5)
#     # print(rows)
#     # print()
#     for res in cur:
#         # print(res[0], res[1]) - вывод по индексам
#         # print(res)
#         print(res['model'], res['price'])  # - вывод по ключам


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# Запрос №3 - сохранение картинки в базе данных
# import sqlite3
#
#
# def read_ava(n):
#     try:
#         with open(f"avatars/{n}.png", "rb") as f:
#             return f.read()
#     except IOError as e:
#         print(e)
#         return False
#
#
# def write_ava(name, data):
#     try:
#         with open(name, "wb") as f:
#             f.write(data)
#     except IOError as e:
#         print(e)
#         return False
#     return True
#
#
# with sqlite3.connect("car.db") as con:
#     con.row_factory = sqlite3.Row
#     cur = con.cursor()
#
#     cur.execute("""
#     CREATE TABLE IF NOT EXISTS users (
#         name TEXT,
#         ava BLOB,
#         score INTEGER
#     )""")
#
#     # img = read_ava(1)
#     # if img:
#     #     binary = sqlite3.Binary(img)
#     #     cur.execute("INSERT INTO users VALUES ('Илья', ?, 1000)", (binary,))
#
#     cur.execute("SELECT ava FROM users")
#     img = cur.fetchone()['ava']
#
#     write_ava("out.png", img)


# Запрос №4
# import sqlite3


# with sqlite3.connect("car.db") as con:
#     cur = con.cursor()
#
#     with open("sql_dump.sql", "w") as f:
#         for sql in con.iterdump():  # iterdump - для восстановления базы данных
#             f.write(sql)
#
#     # for sql in con.iterdump():  # iterdump - это метод, в котором хранятся все запросы бд
#     #     print(sql)


# with sqlite3.connect("car_new.db") as con:
#     cur = con.cursor()
#
#     with open("sql_dump.sql", "r") as f:  # восстанавливаем удаленную базу данных (со всеми данными)
#         sql = f.read()
#         cur.executescript(sql)


# МЫ ЗАВЕРШИЛИ РАБОТУ С БАЗАМИ ДАННЫХ (бд).
# ----------------------------------------------
# ----------------------------


# НОВАЯ ТЕМА ***
# ШАБЛОНИЗАТОР - посредник между питоном и другими программами
# В наших фреймворках используется шаблонизатор, который называется Jinja
# pip install jinja2
# Файл - settings - Python Interpreter - (+) - Jinja2
# {{ название переменной }}
# {% блок кода %} - то есть циклы, условия, импорты

# {% for i in names %} - можно использовать цикл
# {% for <выражение> %}
# {% endfor %} - конструкция используется для завершения блока цикла (for)

# {% if <условие> %} - есть еще условие с if
# {% elif %}
# {% else %}
# {% endif %} - закрывает блок с if

# Мы будем изучать фреймверки Flask и Django

# Макро определение
# {% macro имя (аргументы) %}
# {% endmacro %}
# {{ имя (параметры) }}


# from jinja2 import Template

# template = Template('Hello, {{ name }}!')
# rendered = template.render(name='World')
# print(rendered)  # Выведет: Hello, World!
# Этот пример демонстрирует, как с помощью Jinja2 можно вставить переменную (name) в шаблон
# и получить динамически сгенерированную строку.

# name = "Игорь"
# tm = Template("Привет {{ n }}")  # Template - это шаблон
# msg = tm.render(n=name)
# print(msg)


# name = "Игорь"
# age = 28
#
# tm = Template("Мне {{ a*2 }} лет. Меня зовут {{ n.upper() }}.")
# # tm = Template("Мне {{ a }} лет. Меня зовут {{ n }}.")
# msg = tm.render(n=name, a=age)  # n & a - это переменные из питона
#
# print(msg)


# Сейчас я создам словарь
# per = {"name": "Игорь", "age": 28}
#
# tm = Template("Мне {{ p.age }} лет. Меня зовут {{ p['name'] }}.")  # p.age - можно через точечную
# # нотацию, можно через p['name'] - скобки, но ключ тогда надо указать в кавычках
# msg = tm.render(p=per) # при словаре только одна переменная (p), присваиваю ей значение нашего словаря
# # (per)
#
# print(msg)


# Теперь создадим класс
# class Person:
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age
#
#     # def get_name(self):
#     #     return self.name
#
#
# per = Person("Игорь", 28)
#
# tm = Template("Мне {{ p.age }} лет. Меня зовут {{ p.name }}.")
# # tm = Template("Мне {{ p.age }} лет. Меня зовут {{ p.get_name() }}.")
# msg = tm.render(p=per)
#
# print(msg)


# # Подготовим словари
# cities = [
#     {"id": 1, "city": "Москва"},
#     {"id": 2, "city": "Сочи"},
#     {"id": 3, "city": "Смоленск"},
#     {"id": 4, "city": "Ярославль"},
#     {"id": 5, "city": "Минск"}
# ]
# # Сейчас сделаем многострочный текст
# link = """
# <select name='cities'>
#     {% for c in cities -%}
#         {% if c.id > 3 -%}
#             <option value="{{ c['id'] }}">{{ c['city'] }}</option>
#         {% elif c.city == "Москва" %}
#             <option>{{ c['city'] }}</option>
#         {% else -%}
#             {{ c['city'] }}
#         {% endif -%}
#     {% endfor -%}
# </select>
# """
#
# # link = """
# # <select name='cities'>
# #     {% for c in cities -%}
# #         <option value="{{ c['id'] }}">{{ c['city'] }}</option>
# #     {% endfor -%}
# # </select>
# # """
#
# # -% - убирает пустые пробельные символы
# tm = Template(link)
# msg = tm.render(cities=cities)  # для цикла берем с левой стороны cities
#
# print(msg)


# Домашнее задание:
# Используйте шаблонизатор и from jinja2 import Template. Выведите список из пунктов меню и ссылок.
# Представьте, что активный пункт - Главная (добавить к нему class="active")
# Чтобы получился следующий результат:
#     <ul>
#         <li><a href="/index" class="active">Главная</a></li>
#         <li><a href="/news">Новости</a></li>
#         <li><a href="/about">О компании</a></li>
#         <li><a href="/shop">Магазин</a></li>
#         <li><a href="/contacts">Контакты</a></li>
#     </ul>


#
# ****************************************
# ----------------------------------------------------------------
# Урок №42 Python от 29.05.2024
# Урок №1
# -----------------------------------------------

# Официальный сайт - Jinja - https://jinja.palletsprojects.com/en/latest/
# Это ссылка на последнюю версию сайта

# from jinja2 import Template

# cars = [9, 6, 8, 7, 4, 5, 1]

# tp1 = "Сумма: {{ cs }}"
# tm = Template(tp1)
# msg = tm.render(cs=cars)
#
# print(msg)


# cars = [
#     {'model': 'Audi', 'price': 23000},
#     {'model': 'Skoda', 'price': 17300},
#     {'model': 'Renault', 'price': 44300},
#     {'model': 'Wolksvagen', 'price': 21300}
# ]
#
# # tp1 = "Сумма: {{ cs | sum(attribute='price') }}"
# # tp1 = "Max: {{ cs | max(attribute='price') }}"
# # tp1 = "Min: {{ (cs | min(attribute='price')).model }}"
# # tp1 = "{{ (cs | min(attribute='price')).model }}"
# # tp1 = "{{ cs | random }}"
# tp1 = "{{ cs | replace('model', 'brand') }}"
# tm = Template(tp1)
# msg = tm.render(cs=cars)
#
# print(msg)
# # print(cars)


# НОВАЯ ТЕМА ***
# ШАБЛОНИЗАТОР - посредник между питоном и другими программами
# В наших фреймворках используется шаблонизатор, который называется Jinja
# pip install jinja2
# Файл - settings - Python Interpreter - (+) - Jinja2
# {{ название переменной }}
# {% блок кода %} - то есть циклы, условия, импорты

# {% for i in names %} - можно использовать цикл
# {% for <выражение> %}
# {% endfor %} - конструкция используется для завершения блока цикла (for)

# {% if <условие> %} - есть еще условие с if
# {% elif %}
# {% else %}
# {% endif %} - закрывает блок с if

# Мы будем изучать фреймверки Flask и Django

# Макро определение - это аналог обычной функции
# {% macro имя (аргументы) %}
# {% endmacro %}
# {{ имя (параметры) }}


# html = '''
# {% macro get_input(name, value='', type='text', size=20) -%}
#     <input type="{{ type }}" name="{{ name }}" value="{{ value }}" size="{{ size }}">
# {% endmacro -%}
#
# <p>{{ get_input('username') }}</p>
# <p>{{ get_input('email') }}</p>
# <p>{{ get_input('password', type='password') }}</p>
# '''
#
# tm = Template(html)
# msg = tm.render()
#
# print(msg)


# Новая папка - templates
# index.html = main.html

# from jinja2 import Template
# from jinja2 import Environment, FileSystemLoader
#
#
# persons = [
#     {"name": "Алексей", "year": 18, "weight": 78.5},
#     {"name": "Никита", "year": 28, "weight": 82.3},
#     {"name": "Виталий", "year": 33, "weight": 94.0}
# ]
#
# file_loader = FileSystemLoader('templates')
# env = Environment(loader=file_loader)
#
# tm = env.get_template('main.html')
# msg = tm.render(users=persons, title="About Jinja")
#
# print(msg)


# from jinja2 import Environment, FileSystemLoader
#
# # Наследование или расширение шаблона
# subs = ["Культура", "Наука", "Политика", "Спорт"]
#
# file_loader = FileSystemLoader('templates')
# env = Environment(loader=file_loader)
#
# tm = env.get_template('about.html')
# msg = tm.render(list_table=subs)  # list_table=subs
#
# print(msg)


# Домашнее задание:
# Используйте шаблонизатор и from jinja2 import Template. Выведите список из пунктов меню и ссылок.
# Представьте, что активный пункт - Главная (добавить к нему class="active")
# Чтобы получился следующий результат:
#     <ul>
#         <li><a href="/index" class="active">Главная</a></li>
#         <li><a href="/news">Новости</a></li>
#         <li><a href="/about">О компании</a></li>
#         <li><a href="/shop">Магазин</a></li>
#         <li><a href="/contacts">Контакты</a></li>
#     </ul>


# Домашнее задание
# Используйте шаблонизатор и from jinja2 import Template и from jinja2 import Environment, FileSystemLoader
# Создайте макроопределение для шаблона полей ввода input в шаблоне html-документа по образцу, то есть создаете
# в виде текстовой строки макро определение и вызываете это макро определние без импорта:
# Чтобы получился следующий результат:
# <p><input type="text" name="firstname" placeholder="Имя"></p>
# <p><input type="text" name="lastname" placeholder="Фамилия"></p>
# <p><input type="text" name="address" placeholder="Адрес"></p>
# <p><input type="tel" name="phone" placeholder="Телефон"></p>
# <p><input type="email" name="email" placeholder="Почта"></p>


# from jinja2 import Template
# from jinja2 import Environment, FileSystemLoader
#
#
# # Определение шаблона с макросом
# template_str = """
# {% macro input_field(type, name, placeholder) %}
# <p><input type="{{ type }}" name="{{ name }}" placeholder="{{ placeholder }}"></p>
# {% endmacro %}
#
# <!DOCTYPE html>
# <html lang="en">
# <head>
#     <meta charset="UTF-8">
#     <meta name="viewport" content="width=device-width, initial-scale=1.0">
#     <title>Form Example</title>
# </head>
# <body>
#     {{ input_field('text', 'firstname', 'Имя') }}
#     {{ input_field('text', 'lastname', 'Фамилия') }}
#     {{ input_field('text', 'address', 'Адрес') }}
#     {{ input_field('tel', 'phone', 'Телефон') }}
#     {{ input_field('email', 'email', 'Почта') }}
# </body>
# </html>
# """
#
# # Создание объекта Template
# template = Template(template_str)
#
# # Рендеринг шаблона
# rendered_html = template.render()
#
# # Сохранение результата в файл
# with open('output.html', 'w', encoding='utf-8') as f:
#     f.write(rendered_html)
#
# print('Шаблон успешно отрендерен и сохранен в output.html')


#
# ----------------------------------------------------------------
# Урок №2
# ----------------------------

# БЕРЕМ НОВУЮ ТЕМУ - FRAME WORKS
# Flask
# Django

# templates
#     index.html
#     about.html
#     base.html

# int - только цифры
# float - вещественное число
# path - любые допустимые символы URL + "/"


# @app.route("/profile/<int: username>")
# def profile(username):
#     return f"Пользователь: {username}"


#
# ****************************************
# ----------------------------------------------------------------
# Урок №43 Python от 03.06.2024
# Урок №1
# -----------------------------------------------


# templates
#     index.html
#     about.html
#     base.html
#     contact.html
#     page404.html
#     login.html


# http://127.0.0.1:5000/contact?username=igor&email=igor%40gmail.com&message=

# flash() - отправка мгновенных сообщений
# get_flashed_messages()

# ----------------------------

# import os
# os.urandom(20).hex()

# Two/sq_db.sql

# from Two.fldbsite import create_db
# create_db()

# from Two.fldbsite import create_db
# create_db()
